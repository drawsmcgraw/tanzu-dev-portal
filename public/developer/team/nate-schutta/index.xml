<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VMware Tanzu Developer Center – </title>
    <link>/team/nate-schutta/</link>
    <description>Recent content on VMware Tanzu Developer Center</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/team/nate-schutta/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      
      <title>Guides: What is CI/CD?</title>
      
      <link>/guides/ci-cd/ci-cd-what-is/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/ci-cd/ci-cd-what-is/</guid>
      <description>

        
        &lt;p&gt;Modern distributed architectures together with cloud environments offer a powerful toolkit for delivering applications that quickly deliver business value. No industry is immune to disruption, however, and you can no longer afford a plodding release cycle with nebulous review boards and heavyweight gates that slow development to a crawl. You need to move fast but you cannot afford to break things. You need deployment pipelines.&lt;/p&gt;
&lt;p&gt;So, how can you ensure releases don’t bring down production? By leveraging continuous integration (CI) and continuous delivery (CD), you can rapidly deliver features and functionality while still getting a good night’s sleep!&lt;/p&gt;
&lt;h2 id=&#34;how-did-we-get-here&#34;&gt;How did we get here?&lt;/h2&gt;
&lt;p&gt;In the early days of web development, servers were handcrafted and builds were bespoke. Deployment “scripts” were often littered with manual steps and, unsurprisingly, mistakes were common. Such an approach worked, for some definition of worked, at least when software development was measured in quarterly releases. But you don’t live in that time in human history. Today, many companies release new versions of their software products continuously, sometimes multiple times a day.&lt;/p&gt;
&lt;p&gt;To support these more dynamic environments, companies are increasingly turning to automation to ensure a consistent, repeatable delivery process. While artisanal coffee may make your morning better, a build process that cannot be replicated isn’t anyone&amp;rsquo;s definition of a good way to start your day. You need a reliable process. You need a deployment pipeline.&lt;/p&gt;
&lt;p&gt;CI/CD puts you and your customers in the driver&amp;rsquo;s seat by allowing you to deploy features and functionality on your schedule. A deployment pipeline does &lt;strong&gt;not&lt;/strong&gt; require code to go from commit to production in minutes, though robust pipelines can &lt;em&gt;enable&lt;/em&gt; that timeline and companies with years of experience may choose to release quickly, at least with low-risk changes. But if you’re releasing code early and often, how do you avoid the pain of broken software and late nights in a windowless conference room?&lt;/p&gt;
&lt;p&gt;Automation to the rescue! Instead of thoughts and prayers every time you deploy software, pipelines ensure code that gets to production has endured a gauntlet. Code must survive a set of automated tests, code quality scans, performance tests, chaos engineering, and whatever other gates you need to give you confidence.&lt;/p&gt;
&lt;h3 id=&#34;what-is-ci&#34;&gt;What is CI?&lt;/h3&gt;
&lt;p&gt;Continuous Integration (CI) has been around for many years; it was originally defined as one of Kent Beck’s core practices of &lt;a href=&#34;https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change-ebook/dp/B00N1ZN6C0/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Extreme Programming&lt;/a&gt;. CI solves the age-old problem of merge hell, when two (or more!) developers are working in similar parts of the codebase at the same time. While source code management tools could sometimes automatically merge code, developers often spent a significant amount of time staring at diffs trying to amalgamate conflicting changes. Problems were compounded if developers spent days—or worse, weeks—working before merging their code.&lt;/p&gt;
&lt;p&gt;CI could be summarized as merge early, merge often. But it is &lt;a href=&#34;https://martinfowler.com/articles/continuousIntegration.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;more than that&lt;/a&gt;. It starts with an automated build separate from the IDE. Code isn’t just built, though; it is also subject to a barrage of automated tests. From traditional unit tests all the way through to various integration or end-to-end tests, automated testing provides a safety net for developers. A robust test suite allows developers to change code at will because they know that a broken test will alert them to any issues their changes may have caused. And code quality scans can be employed to catch common mistakes and antipatterns, which helps to ensure adherence to agreed-upon standards. Again, deviation is detected and fixed early.&lt;/p&gt;
&lt;p&gt;CI is also a cultural shift. Developers commit early and commit often to main. A CI server like &lt;a href=&#34;https://jenkins.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Jenkins&lt;/a&gt; or &lt;a href=&#34;https://concourse-ci.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Concourse&lt;/a&gt; monitors the code repository, kicking off the build process on every commit. These builds must be fast (seconds or minutes); if a test or quality scan fails, developers are notified and the problem is handled quickly or the change is rolled back. The goal is to maintain a stable base so that you can be responsive to the challenging environments that companies exist in today.&lt;/p&gt;
&lt;p&gt;Ultimately, CI reduces risk. Developers work in small batches. Bugs are found and fixed quickly. Instead of a frustrating game of whack-a-mole, unintended side effects are manifested early and can be remediated before they grow into unwieldy monsters. With your code in a releasable state (most of the time) you are empowered to deliver functionality on your schedule.&lt;/p&gt;
&lt;h3 id=&#34;what-is-cd&#34;&gt;What is CD?&lt;/h3&gt;
&lt;p&gt;Continuous Delivery (CD) builds upon the foundations of CI and takes it to the next step, where code is released. By adding automation to the release process, it allows you to decide which cadence is most appropriate. The goal is to find issues before your code hits production servers. &lt;a href=&#34;https://martinfowler.com/bliki/ContinuousDelivery.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;CD&lt;/a&gt; takes the deployable unit coming out of your CI process and moves it from a development region all the way through to production. This process typically involves a pass through QA and a customer acceptance gate, both of which may involve a manual sign off.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;delivery-vs-deployment&#34;&gt;Delivery vs. Deployment&lt;/h4&gt;
&lt;p&gt;There is some ambiguity about the definition of the D in CD. Arguably the most common understanding is that continuous &lt;em&gt;deployment&lt;/em&gt; is one step beyond continuous &lt;em&gt;delivery&lt;/em&gt; where changes that successfully pass through all the deployment pipeline gates are &lt;strong&gt;automatically&lt;/strong&gt; moved to production. In other words, changes are serving live customer traffic within minutes of a commit. Continuous Deployment requires a significant investment in testing to ensure changes do not cause havoc in production. It also typically involves feature flags and other advanced techniques.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From there, releases move into a staging environment. There should be relatively few issues in staging; they should have been discovered earlier in the process. Staging allows you to throw real-world traffic at your code without actually exposing it to customers validating monitoring, performance, user experience, and whatever other factors matter for your application. If it all checks out in staging, it’s time to move to a canary release.&lt;/p&gt;
&lt;p&gt;A canary release is literally the canary in the coal mine; you expose a percentage of your production workload to the new version of your code. Canaries serve real-world traffic; if you find errors, you roll back to the previous version. With a robust deployment pipeline, you should have very few issues in production as they should have surfaced earlier in the process. Not only does this allow you to deliver business value on a regular basis, it builds credibility with your customers while significantly reducing your stress level. It is a win-win!&lt;/p&gt;
&lt;h3 id=&#34;how-do-you-move-forward&#34;&gt;How do you move forward?&lt;/h3&gt;
&lt;p&gt;It can be daunting to create a build pipeline from scratch. While your organization probably already has CI tooling in place, there may be little guidance provided for how to start. A blank editor is terrifying. Don’t start at zero, use &lt;a href=&#34;https://spring.io/blog/2018/11/13/spring-cloud-pipelines-to-cloud-pipelines-migration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cloud Pipelines&lt;/a&gt; as a base. Whether you use it for inspiration or as a set of starter scripts that you customize, Cloud Pipelines is worth some of your time.&lt;/p&gt;
&lt;p&gt;If you are new to the CI/CD journey, don’t neglect the cultural shift inherent in any technical change. Some developers reject the build break notifications, some going so far as removing themselves from the email list. Be sure everyone understands the benefits of CI/CD, including increased speed-to-market, stable builds, and reduced drama around releases. Software development has changed dramatically in recent years; no longer can you afford to say “That’s how we’ve always done it.” Applications are evolving rapidly, which requires you to &lt;a href=&#34;https://github.blog/2015-12-15-move-fast/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Move Fast and Fix Things&lt;/a&gt;. CI/CD will not just help you deliver for your customers; it will help you sleep better at night.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Breaking Down a Monolith into Microservices</title>
      
      <link>/guides/microservices/deconstructing-the-monolith/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/deconstructing-the-monolith/</guid>
      <description>

        
        &lt;p&gt;There is a pretty good chance more than a few people in your organization are talking about microservices these days. Perhaps you’ve noticed more copies of Eric Evans’ &lt;a href=&#34;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Domain-Driven Design&lt;/a&gt;, or maybe they’ve taken a &lt;a href=&#34;http://www.wmrichards.com/microservices-architecture.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;training course&lt;/a&gt; or two. And while there are ample &lt;a href=&#34;https://martinfowler.com/microservices/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;resources&lt;/a&gt; to help you understand the nuances of a suite of small focused services, most start from, well, greenfield development. Much as physicists are first taught to “&lt;a href=&#34;https://www.forbes.com/sites/chadorzel/2015/09/29/the-annoying-physics-of-air-resistance/#38a1ab0e718a&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ignore air resistance&lt;/a&gt;” software prognostication often ignores the reality facing every organization - the entrenched portfolio of heritage applications that make up the bulk of every company’s IT environment. While it is tempting to nuke and pave, you have to face the facts, these applications are powering your business and you must chart a path forward.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My personal favorite is &amp;quot;profitable&amp;quot;. &lt;a href=&#34;https://t.co/RCZwKm457U&#34;&gt;https://t.co/RCZwKm457U&lt;/a&gt;&lt;/p&gt;&amp;mdash; Phil Webb 🍃 (@phillip_webb) &lt;a href=&#34;https://twitter.com/phillip_webb/status/1229184287867428864?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;what-is-a-microservice&#34;&gt;What is a microservice?&lt;/h2&gt;
&lt;p&gt;There are nearly as many definitions of a microservice as there are developers touting them as miracle cures. Before delving further, the key definition is the one inside the walls of &lt;em&gt;your&lt;/em&gt; organization. Whether it adheres to the Platonic ideal form of a microservice isn’t nearly as important as getting everyone on the same page. There is a reason why a glossary is often one of the most important artifacts in any project room.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’ve already debated tabs vs spaces, consider touching off a &lt;a href=&#34;https://mobile.twitter.com/littleidea/status/500005289241108480&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;discussion around the definition&lt;/a&gt; of a microservice. Consider removing sharp objects, it may devolve rapidly. Microservices really are in the eye of the beholder!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ultimately, microservices are a reaction to monoliths and heavyweight &lt;a href=&#34;https://martinfowler.com/bliki/ServiceOrientedAmbiguity.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;service oriented architectures&lt;/a&gt; as well as the capabilities of cloud environments. The issues with poorly structured monolithic architectures are legion, from low developer productivity caused by massive code bases to the inability to target compute resources to the bits that need more performance, there are no shortage of headaches. Software is not immune to the &lt;a href=&#34;https://www.grc.nasa.gov/WWW/K-12/airplane/thermo2.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;second law of thermodynamics&lt;/a&gt;, over time, the modularity of the monolith breaks down and it takes longer and longer to add new features and functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should be stressed that monoliths span the continuum of modularity and they can actually be structured in such a way that they don’t suffer all of the maladies normally associated with the term “monolith”. You can apply &lt;a href=&#34;https://twitter.com/simonbrown/status/962945350737825793?lang=en&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;microservice design principles&lt;/a&gt; to monoliths!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Personally, I am a fan of “something that can be rewritten in two weeks or less” since that reminds us microservices should be, well, small. Others are partial to saying any service built and maintained by a two pizza team. While I support two pizza teams, that definition won’t help you determine just how many services said team can support. Of course there is no stock answer to that question, it depends on the volatility of the services in question. If the microservices are stable, a two pizza team might be able to support ten or twenty however if the services are constantly changing, the exact same team might struggle with more than five!&lt;/p&gt;
&lt;p&gt;Rather than debate terms, think in terms of characteristics, microservices are suites of small, focused services that embody the &lt;a href=&#34;http://www.catb.org/~esr/writings/taoup/html/ch01s06.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Unix ethos&lt;/a&gt; of small, focused tools that do one thing and do it well. Microservices should be independently deployable, independently scalable, and free to evolve at different rates. Developers are free to choose the best technology to build services around business capabilities. In a nutshell, microservices are an example of the zeroth law of computer science - high cohesion, low coupling&amp;hellip;applied to services.&lt;/p&gt;
&lt;h2 id=&#34;what-should-be-a-microservice&#34;&gt;What should be a microservice?&lt;/h2&gt;
&lt;p&gt;There is no doubt that microservices bring a host of benefits however, they come with added complexity. Teams should understand the trade-offs before blindly sprinting down a path that has the potential to make things worse. Repeat after me &lt;strong&gt;not everything needs to be a microservice&lt;/strong&gt;! Please consider the following principles when considering microservices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple Rates of Change&lt;/strong&gt;. In many systems, some parts change all the time while others haven’t been touched since the initial commit. If parts of your system evolve at different rates, microservices might help. Splitting out the more volatile pieces allows them to iterate faster enabling you to deliver business value quickly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Independent Life Cycles&lt;/strong&gt;. The monolith doesn’t turn on a dime but today you need to be nimble. Speed matters, your business partners may not be able to wait for a quarterly release window. Standalone microservices can have their own life cycle with their own repository and a separate deployment pipeline containing the appropriate tests and code quality scans allowing you to capitalize on new opportunities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Independent Scalability&lt;/strong&gt;. Monoliths often force you to make decisions early, when you know the least about the forces acting on your system. Your infrastructure engineers probably asked you how much capacity your application needs forcing a “take the worst case and double it” mentality leading to poor resource utilization. Instead of wild guesses, a microservice approach allows you to more efficiently allocate compute.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failure Isolation&lt;/strong&gt;. To &lt;a href=&#34;https://www.youtube.com/watch?v=dMjQ3hA9mEA&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;paraphrase a fictional mathematician&lt;/a&gt;, failure, uh, finds a way. Microservices can be used to isolate a dependency giving you a natural spot to build in proper failover mechanisms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simplifying Interactions&lt;/strong&gt;. Microservices give you a natural indirection layer insulating you from external dependencies that change frequently or are complex to use. Essentially, your microservice implements the facade pattern.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polyglot Tech Stacks&lt;/strong&gt;. Monoliths forced a standardized, often lowest common denominator, technology stack regardless of the fit to purpose. Microservices give you the freedom to choose the right language or database for the business requirements rather than force a one size fits all solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facilitate Legal Compliance&lt;/strong&gt;. Our applications often deal with sensitive data which means compliance with various laws and regulations. Credit cards and personally identifiable information must be safeguarded. Creating a separate microservice to handle the legally entangled aspects of your application can be simpler and faster than attempting to rewire the monolith.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microservices are not an excuse to use your favorite esoteric language or technology. You must &lt;a href=&#34;https://www.vmwaretanzu.com/episode/0004/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;weigh the pros and cons&lt;/a&gt; of any design choice and do not dismiss the cost of maintaining multiple disparate stacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you’d like to learn more about these principles, peruse the blog series &lt;a href=&#34;https://tanzu.vmware.com/content/blog/should-that-be-a-microservice-keep-these-six-factors-in-mind&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Should that be a Microservice?&lt;/a&gt; on the &lt;a href=&#34;https://tanzu.vmware.com/blog&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;identifying-bounded-contexts&#34;&gt;Identifying Bounded Contexts&lt;/h2&gt;
&lt;p&gt;By now, developers are (re)familiarizing themselves with domain driven design and the quest for the bounded contexts in their systems. But it can be daunting to know how to start. &lt;a href=&#34;https://tanzu.vmware.com/content/podcasts/domain-driven-design-event-storming-with-jakub-pilimon&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Event Storming&lt;/a&gt; is a collaborative technique designed to help you discover bounded contexts and vertical slices of an application. It facilitates decomposition of the monolith giving you an opportunity to model new flows and ideas. &lt;a href=&#34;https://www.eventstorming.com/book/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Event Storming&lt;/a&gt; is a group activity requiring little more than sticky notes, sharpies, some painters tape and a large wall.&lt;/p&gt;
&lt;p&gt;As a group, participants “storm the business” process jotting down domain events on sticky notes. The facilitator will often kick things off by identifying the start and end of the process. Focus on the happy path to begin with and use past tense for events. As your team works through the business domain, you will inevitably find trouble spots, external systems, parallel processing and time constrained events like batch processes. Once you’ve brainstormed the events, work with domain experts to enforce a timeline which will often uncover missing elements.&lt;/p&gt;
&lt;p&gt;Once you have a timeline, look for domain aggregates aka bounded contexts. Identify events that transition across subdomains. These clumps of events will often expose candidate services. From here you can also rough out user interfaces, personas and whatever else is important in the domain.&lt;/p&gt;
&lt;p&gt;In addition to Event Storming, you can apply a set of heuristics to discover domains. Some of the things to look for:
The structure of the organization. An insurance policy means different things to the billing area than it does to the claims department.
Domain language - where does a given term mean the same thing and more importantly where does it mean something else entirely?
Where are domain experts positioned in the org chart?
What is the core domain of the company? Strategic differentiation should inform your breakdown.&lt;/p&gt;
&lt;p&gt;Once you have some candidate boundaries, you can test them! Are there any “schizophrenic contexts” aka where the context does too many things? A multitude of if statements indicates you probably have two or more domains. Is your context autonomous? Can it make decisions on its own or does it need to reach out to a dozen other modules? It may seem a bit fuzzy, but don’t forget to do a sanity check - do these boundaries feel right?&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;There is a fair amount of art involved when you decompose a monolith, there is no magic formula. Hopefully this article gives you some tips and a place to start your journey. &lt;a href=&#34;https://www.youtube.com/watch?v=toqfiv4o7jA&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Refactoring&lt;/a&gt; takes time, be patient, your portfolio wasn’t built in a day and you won’t move everything to the cloud in a week. Move what makes sense, prioritize what can and be ruthlessly pragmatic. Good luck!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Decomposing the monolith can be a very challenging exercise. With years of technical debt, mounting pressure and an often unconscious attachment to “we’ve always done it that way” it can be a challenge to shift to microservices. Not to toot our own horn, but the &lt;a href=&#34;https://tanzu.vmware.com/labs&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Labs&lt;/a&gt; team has a &lt;a href=&#34;https://tanzu.vmware.com/customers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;proven track record of success&lt;/a&gt; helping companies of all sizes in a wide variety of domains &lt;a href=&#34;https://tanzu.vmware.com/application-modernization&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;modernize their apps&lt;/a&gt;. We even offer a virtual consultation, if you’re interested, please &lt;a href=&#34;https://tanzu.vmware.com/product-consultation&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;reach out&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
  </channel>
</rss>
