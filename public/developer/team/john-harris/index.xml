<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VMware Tanzu Developer Center â€“ </title>
    <link>/team/john-harris/</link>
    <description>Recent content on VMware Tanzu Developer Center</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/team/john-harris/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      
      <title>Guides: Application Enhancements</title>
      
      <link>/guides/kubernetes/app-enhancements/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements/</guid>
      <description>

        
        &lt;p&gt;Kubernetes does not demand specifics about the applications that run on top of
it. They don&amp;rsquo;t not need to be microservices, 12 factor, or maintain other specific
software philosophies. However, for an application to run well on Kubernetes, there
are aspects of your application you may wish to reconsider.&lt;/p&gt;
&lt;p&gt;Kubernetes is a distributed system that has behaviors different from what many
are used to in a traditional environment. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workloads must be packaged in a container.&lt;/li&gt;
&lt;li&gt;Workloads may be moved (stopped and recreated) based on the needs of the
system.&lt;/li&gt;
&lt;li&gt;Workload IP addresses are [generally] ephemeral.&lt;/li&gt;
&lt;li&gt;Workloads have no affinity to hosts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from the above constraints, how your application is developed and run is
up to you. There are multiple considerations you can make to comply with more
idiomatic Kubernetes software practices. The following checklist covers the
considerations for running an application in Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;popular-tooling--approaches&#34;&gt;Popular Tooling &amp;amp; Approaches&lt;/h2&gt;
&lt;h3 id=&#34;application-probes&#34;&gt;Application Probes&lt;/h3&gt;
&lt;p&gt;Kubernetes supports a multitude of probes that indicate state of a running
workload. For details on implementing probes, see &lt;a href=&#34;../app-enhancements-probing-app-state&#34;&gt;the guide on Probing
Application State&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;readiness-probe&#34;&gt;Readiness Probe&lt;/h4&gt;
&lt;p&gt;You should use readiness probes as they gate whether your application is
considered &amp;lsquo;Ready&amp;rsquo; to a cluster. Until applications are &amp;lsquo;Ready&amp;rsquo; they do not
receive traffic. A simple HTTP check that reports ready, post initialization is
often adequate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/readiness-probe.png&#34; alt=&#34;Readiness Probe&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;For implementation details, see &lt;a href=&#34;../app-enhancements-probing-app-state&#34;&gt;the guide on Probing Application
State&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;liveness-probe&#34;&gt;Liveness Probe&lt;/h4&gt;
&lt;p&gt;You should consider liveness probes as a &amp;lsquo;safety&amp;rsquo; check for your application to
ensure it hasn&amp;rsquo;t halted operation unexpectedly. These checks should &lt;strong&gt;not&lt;/strong&gt; rely
on external dependencies as you don&amp;rsquo;t want your application to restart due to
external issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/liveness-probe.png&#34; alt=&#34;Liveness Probe&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;For implementation details, see &lt;a href=&#34;../app-enhancements-probing-app-state&#34;&gt;the guide on Probing Application
State&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;startup-probe&#34;&gt;Startup Probe&lt;/h4&gt;
&lt;p&gt;You should consider a startup probe for legacy applications that require a
larger amount of time for their initial startup. This probe only executes on
first start-up and does not continue probing over time (like readiness and
liveness). After a startup probe succeeds, if configured, a liveness probe will
continue. Ideally, modern applications &lt;strong&gt;do not&lt;/strong&gt; require this kind of
protection, but it can be helpful when long start ups cannot be worked around.&lt;/p&gt;
&lt;h3 id=&#34;externalized-configuration&#34;&gt;Externalized Configuration&lt;/h3&gt;
&lt;p&gt;In Kubernetes based-platform, you should keep all application configuration
outside of the application / container when possible. This will enable you to
dynamically change how your application runs by altering ConfigMaps and Secrets.
It&amp;rsquo;s also helpful when deploying the application into different context or
environments.&lt;/p&gt;
&lt;p&gt;For details on how to externalize configuration, see the &lt;a href=&#34;../app-enhancements-externalizing-configuration&#34;&gt;externalizing
configuration guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;graceful-shutdown-mechanics-handlers&#34;&gt;Graceful Shutdown Mechanics Handlers&lt;/h3&gt;
&lt;p&gt;As Kubernetes moves workloads around the cluster, an instance of your
application can be asked to stop so a new instance of it can be started
elsewhere. If your application requires any amount of graceful shutdown, you
should ensure your application can handle this event.&lt;/p&gt;
&lt;p&gt;When a pod is being deleted, moved, or recreated each container&amp;rsquo;s PID 1 receives
a SIGTERM. The process then has a grace-period to do what it needs and exit.
The default grace-period is 30 seconds; check with your cluster administrator to
understand what your cluster is set to. If the grace period expires, a SIGKILL
is sent. For more details, see the &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Termination of Pods
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If a process, script, or HTTP endpoints must be called to terminate gracefully,
you can also add a &lt;a href=&#34;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;preStop
hook&lt;/a&gt;
to your Kubernetes manifest.&lt;/p&gt;
&lt;p&gt;For details on how to gracefully shutdown pods, see the &lt;a href=&#34;../app-enhancements-graceful-shutdown&#34;&gt;graceful shutdown guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;structured-logging&#34;&gt;Structured Logging&lt;/h3&gt;
&lt;p&gt;Structured logging allows log aggregation systems to provide a better view of your
applications logs. You should consider this approach for applications running
Kubernetes. Typically it&amp;rsquo;s as simple as creating log-helper functions or
introducing a logging library. For implementation details, see the &lt;a href=&#34;../app-enhancements-logging-practices&#34;&gt;logging
practice guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;export-application-metrics&#34;&gt;Export Application Metrics&lt;/h3&gt;
&lt;p&gt;When exposing metrics about your application, it is a common practice to use
an exporter. This allows you to introduce metrics to your application and a
scraping system, such as &lt;a href=&#34;https://prometheus.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;prometheus&lt;/a&gt;, to gather those
metrics over time.  There are exporter libraries for most languages. See the
&lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Client Library&lt;/a&gt;
documentation for a list of examples.&lt;/p&gt;
&lt;p&gt;Work with your platform team to determine if scrape-based monitoring system such
as prometheus, Datadog, or Elastic is available.&lt;/p&gt;
&lt;p&gt;For more details, see the &lt;a href=&#34;../app-observability-exporting-metrics&#34;&gt;Exporting Application Metrics
guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;trace-points&#34;&gt;Trace Points&lt;/h3&gt;
&lt;p&gt;In service based architectures, a request can move through many
applications and thus across network boundaries multiple times. A trade-off to
these architectures is detecting where issues in the stack are occurring. For
example, where is most of the latency in a request coming from?&lt;/p&gt;
&lt;p&gt;If your workload falls into this architecture, implementing tracing in your
application(s) is worth considering. Often you need a system that lets you view
trace results, before running one, you may wish to check with your platform team
to see if something pre-exists.&lt;/p&gt;
&lt;p&gt;For more details on this concern, see the
&lt;a href=&#34;../app-observability&#34;&gt;Observability section&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Application Lifecycle</title>
      
      <link>/guides/kubernetes/app-lifecycle/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-lifecycle/</guid>
      <description>

        
        &lt;p&gt;The scripts and systems used in the CI/CD pipelines to deploy and update
applications are limited by the Kubernetes resources they can manage.  In many
cases this may be perfectly sufficient.  An update to the image in a Deployment
spec may be all that is required to perform an update of an application, for
example.&lt;/p&gt;
&lt;p&gt;However, this model is often insufficient
when dealing with workloads that are stateful, distributed and/or complex.
For example, an application that stores data in a relational database may require
a database schema update in coordination with an upgrade to the application itself.
This kind of coordination is awkward for a pipeline to orchestrate and usually
requires a series of manual operations to perform an application update or
upgrade.&lt;/p&gt;
&lt;h2 id=&#34;operators&#34;&gt;Operators&lt;/h2&gt;
&lt;p&gt;A Kubernetes operator is a piece of software that runs in your cluster and
manages the deployment and lifecycle management on your behalf.  In this
example you use a custom resource - an extension to the Kubernetes
API - to define the essential characteristics of your application.  The operator
responds by creating the various Kubernetes resources on your behalf.  When
an app upgrade is needed, the pipeline need only update the custom resource that
represents your application.  The operator contains the logic that allows it to
conduct the upgrade in response.  In the relational database-backed example, it
may put the application into a maintenance mode, initiate a backup of the
database, apply the schema update to the database, upgrade the application
version and restore it to normal functioning mode.&lt;/p&gt;
&lt;p&gt;The advantage of using Kubernetes operators is that you can reduce the human
toil from otherwise labor-intensive operations and perform these operations
reliably.  The drawback is that you have another piece of complex software to
develop and maintain.&lt;/p&gt;
&lt;h2 id=&#34;popular-tooling--approaches&#34;&gt;Popular Tooling &amp;amp; Approaches&lt;/h2&gt;
&lt;h3 id=&#34;kubebuilder&#34;&gt;Kubebuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubebuilder&lt;/a&gt; is an SDK for
building custom Kubernetes controllers and operators.  It is a CLI you can use
to stamp out boilerplate and scaffolded Go code that is common to all such projects.
The code generated by Kubebuilder includes a Dockerfile, deployment manifests and a
Makefile that facilitates local development.  In addition to the base project
codebase, Kubebuilder can be used to add new APIs as CRDs along with their
corresponding controllers.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is &lt;a href=&#34;https://book.kubebuilder.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;well documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;can include admission webhooks for your CRDs&lt;/li&gt;
&lt;li&gt;has experimental support for
&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder/tree/master/plugins&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;plugins&lt;/a&gt;
to build operators using alternative patterns&lt;/li&gt;
&lt;li&gt;is maintained and controlled by upstream Kubernetes SIG&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requires the Go programming language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metacontroller&#34;&gt;Metacontroller&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-lifecycle/metacontroller.png&#34; alt=&#34;metacontroller&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/metacontroller&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Metacontroller&lt;/a&gt; or, the
more actively maintained fork &lt;a href=&#34;https://github.com/AmitKumarDas/metac&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;metac&lt;/a&gt;, is
a cluster add-on that runs in your cluster and takes care of the common
operations all controllers and operators must do.  Whereas Kubebuilder stamps
out boilerplate code for these common operations, metacontroller abstracts
those operations away into a separate workload.  Metacontroller manages all
interactions with the Kubernetes API.  The custom controller&amp;rsquo;s logic is
developed in what metacontroller calls the &amp;ldquo;lambda controller&amp;rdquo;.  The presence
and nature of the lambda controller is defined in a metacontroller custom
resource, for example the &amp;ldquo;Composite Controller&amp;rdquo;.  In the case of a Composite
Controller, the &amp;ldquo;parent resource&amp;rdquo; is the resource that is watched and which
triggers reconciliation.  When a change occurs in the parent resource,
metacontroller calls the lambda controller and passes that parent resource
object as JSON.  The lambda controller responds with the &amp;ldquo;child resource&amp;rdquo; as
JSON and metacontroller makes the change to the actual child resource in the API.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lambda controllers can be developed in any language that can expose an HTTP
endpoint to metacontroller and use JSON&lt;/li&gt;
&lt;li&gt;smaller codebase for your controller logic&lt;/li&gt;
&lt;li&gt;fast to get started - great for prototyping&lt;/li&gt;
&lt;li&gt;can run multiple controllers behind a single metacontroller instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;your controller has the additional dependency and operational overhead of
metacontroller running in the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operator-sdk&#34;&gt;Operator SDK&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/operator-framework/operator-sdk&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Operator SDK&lt;/a&gt; is a project
originally started at CoreOS that is similar to Kubebuilder in that it uses a
CLI to generate boilerplate and scaffolded code for a new project.  It is a
component of Red Hat&amp;rsquo;s &lt;a href=&#34;https://github.com/operator-framework&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Operator Framework&lt;/a&gt;
which could make it attractive if you are using other components of that toolkit.
Due to the overlap between Kubebuilder and the Go-based operator support in
Operator SDK, those features will be &lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/integrating-kubebuilder-and-osdk.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;merged into
Kubebuilder&lt;/a&gt;
in the future.  Operator SDK should only be considered where value can be
derived from the Ansible or Helm features.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows you to develop operators in Go, Ansible or Helm&lt;/li&gt;
&lt;li&gt;offers integrations with lifecycle manager from the Operator Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is managed by Red Hat for their ecosystem so may not fit your needs well if
not using OpenShift&lt;/li&gt;
&lt;li&gt;the Go-based operator features will be merged into Kubebuilder&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Application Observability</title>
      
      <link>/guides/kubernetes/app-observability/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-observability/</guid>
      <description>

        
        &lt;p&gt;The term &amp;ldquo;observability&amp;rdquo; in control theory states that the system is observable
if the internal states of the system and its behavior can be determined by only
looking at its inputs and outputs.&lt;/p&gt;
&lt;p&gt;In software, observability means we can answer most questions about a system&amp;rsquo;s
status and performance by looking from the outside. The system has been
instrumented to externalize and make available measurements useful to those
responsible for the platform&amp;rsquo;s success and reliability.&lt;/p&gt;
&lt;p&gt;Observability aims to provide highly granular insights into the behavior of
production systems along with rich context, perfect for debugging and
performance analysis.&lt;/p&gt;
&lt;h2 id=&#34;health-checks&#34;&gt;Health checks&lt;/h2&gt;
&lt;p&gt;Health checks (often custom HTTP endpoints) help orchestrators, like Kubernetes,
perform automated actions to maintain overall system health. These can be a
simple HTTP route that returns meaningful values, or a command that can be
executed from within the container.&lt;/p&gt;
&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;p&gt;Metrics are a numeric representation of data that is collected at intervals into
a time series. Numerical time series data is easy to store and query, which
helps when looking for historical trends. Over a longer period of time,
this numerical data can be compressed into less granular aggregates like daily
or weekly, for example. This allows for longer retention periods for
historic purposes.&lt;/p&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;p&gt;Log entries represent discrete events. Log entries are essential for debugging,
as they often include stack traces and other contextual information that can
help identify the root cause of observed failures.&lt;/p&gt;
&lt;p&gt;Logging is used when the developer wants to explicitly output some message for
someone to see. It is coded directly into executable code, including passing
along values of relevant variables. When problems occur, the logs are useful for
debugging purposes, showing where a failure occurred, such as a stack trace for
an exception that got thrown.&lt;/p&gt;
&lt;h2 id=&#34;distributed-tracing&#34;&gt;Distributed Tracing&lt;/h2&gt;
&lt;p&gt;Distributed, request, or end-to-end tracing captures the end-to-end flow of a
request through the system. Tracing essentially captures both relationships
between services (the services the request touched), and the structure of work
through the system (synchronous or asynchronous processing, child-of or
follows-from relationships). Tracing is something unique to the cloud-native
world, allowing developers and operators to track the exchanges between
different microservices.&lt;/p&gt;
&lt;p&gt;In order to enable distributed tracing, an application needs to be &amp;ldquo;instrumented&amp;rdquo;
by adding and configuring distributed tracing client libraries. For example, you
can configure application to send trace records to an Open Tracing compliant
trace server whenever any JAX-RS annotated method is invoked. This way you have
an audit record of what got called when, by whom, and how long it took. By
adding Open Tracing annotations to traced methods you can also include
information about what private methods have been called in your code for
example.&lt;/p&gt;
&lt;h2 id=&#34;popular-tooling--approaches&#34;&gt;Popular Tooling &amp;amp; Approaches&lt;/h2&gt;
&lt;h3 id=&#34;health-checks-1&#34;&gt;Health checks&lt;/h3&gt;
&lt;p&gt;Kubernetes exposes the following health probes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readiness -  whether application is considered &amp;lsquo;Ready&amp;rsquo; to a cluster.&lt;/li&gt;
&lt;li&gt;Liveness - safety check to ensure that application hasn&amp;rsquo;t halted operation unexpectedly.&lt;/li&gt;
&lt;li&gt;Startup - for applications that require a larger amount of time for their initial startup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use above health endpoints based on application&amp;rsquo;s requirements.&lt;/p&gt;
&lt;p&gt;For implementation details, see &lt;a href=&#34;../app-enhancements-probing-app-state&#34;&gt;the guide on Probing Application
State&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;metrics-1&#34;&gt;Metrics&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt; is an open-source systems monitoring and
alerting toolkit. It works well for recording any purely numeric time series. It
fits both machine-centric monitoring as well as monitoring of highly dynamic
service-oriented architectures. In a world of microservices, its support for
multi-dimensional data collection and querying is a particular strength. We
recommend the &lt;a href=&#34;https://github.com/coreos/prometheus-operator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus
operator&lt;/a&gt;, which manages the
lifecycle of prometheus and comes with many sensible defaults.&lt;/p&gt;
&lt;p&gt;Managing Prometheus could become challenging overtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data retention - ability to efficiently store data for longer periods of time.&lt;/li&gt;
&lt;li&gt;High-Cardinality Metrics - metrics with dimensions that have many different
values can cause performance degradation.&lt;/li&gt;
&lt;li&gt;Dynamic service scraping - could cause performance degradation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend the reader to check with their platform team if any metrics
scraping services are available in the platform.&lt;/p&gt;
&lt;p&gt;For more details on this concern, see &lt;a href=&#34;../app-enhancements#export-application-metrics&#34;&gt;the opinion on Export Application
Metrics&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;logging-1&#34;&gt;Logging&lt;/h3&gt;
&lt;p&gt;In most Kubernetes deployments, all logging should happen to standard out and
standard error. Additionally, most platform teams will offer developers a log
shipping solution, so you should check with your platform team to understand
how this works.&lt;/p&gt;
&lt;p&gt;Typical Logging Stack:&lt;/p&gt;
&lt;h4 id=&#34;log-aggregator&#34;&gt;Log Aggregator&lt;/h4&gt;
&lt;p&gt;This component collects logs from pods running on different nodes and route them
to a central location.
&lt;a href=&#34;https://www.fluentd.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;fluentd&lt;/a&gt; has become a
popular log aggregator for Kubernetes deployments. It is small, efficient and
has a wide plugin ecosystem.&lt;/p&gt;
&lt;h4 id=&#34;log-collectorstoragesearch&#34;&gt;Log Collector/Storage/Search&lt;/h4&gt;
&lt;p&gt;This component stores the logs from log aggregators and provides an interface to
search logs efficiently. It should also provide storage management and archival
of logs. Ideally, this component should be resilient to node failures, so that
logging does not become unavailable in case of infrastructure failures.
&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Elasticsearch&lt;/a&gt; is one of the
options, as it can ingest logs from fluentd, creates inverted indices on
structured log data making efficient search possible, and has multi-master
architecture with ability to shard data for high availability.&lt;/p&gt;
&lt;h4 id=&#34;ui-and-alerting&#34;&gt;UI and Alerting&lt;/h4&gt;
&lt;p&gt;Visualizations are key for log analysis of distributed applications. A good UI
with query capabilities makes it easier to sift through application logs,
correlate and debug issues. Custom dashboards can provide high level overview of
the health of the distributed application.
&lt;a href=&#34;https://www.elastic.co/products/kibana&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kibana&lt;/a&gt; from Elasticsearch can be used
as the UI for the log storage, and will be explored as an option here. Alerting
is typically an actionable event in the system. It can be set up in conjunction
with logging and monitoring.&lt;/p&gt;
&lt;p&gt;For additional implementation details, see &lt;a href=&#34;../app-enhancements-logging-practices&#34;&gt;the guide on Logging
Practices&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;distributed-tracing-1&#34;&gt;Distributed Tracing&lt;/h3&gt;
&lt;p&gt;Consider using Distributed Tracing in complex multi-service architectures. It
can help with detection of cascading failures in service calls, optimization of
Database requests, latency problems etc.&lt;/p&gt;
&lt;p&gt;We recommend to check with the platform team to see what tracing platform tools
pre-exist / are available.&lt;/p&gt;
&lt;p&gt;Typical Distributed Tracing stack:&lt;/p&gt;
&lt;h4 id=&#34;zop-stack-zipkin-opentracing-prometheus&#34;&gt;ZOP stack (Zipkin, OpenTracing, Prometheus)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zipkin.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Zipkin&lt;/a&gt; - distributed tracing system. Applications need
to be &amp;ldquo;instrumented&amp;rdquo; to report trace data to Zipkin. This usually means
configuration of a &lt;a href=&#34;https://zipkin.io/pages/tracers_instrumentation&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;tracer or instrumentation
library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opentracing.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenTracing&lt;/a&gt; - vendor-neutral APIs and
instrumentation for distributed tracing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt; - open-source systems monitoring and alerting toolkit. Before
you can monitor your services, you need to add instrumentation to their code
via one of the &lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client
libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;jop-stack-jaeger-opentracing-prometheus&#34;&gt;JOP stack (Jaeger, OpenTracing, Prometheus)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jaegertracing.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Jaeger&lt;/a&gt; - distributed tracing system. It is
used for monitoring and troubleshooting microservices-based distributed
systems. Applications must be instrumented before they can send tracing data
to Jaeger backend. Check the &lt;a href=&#34;https://www.jaegertracing.io/docs/1.16/client-libraries/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Client
Libraries&lt;/a&gt; section
for information about how to use the OpenTracing API and how to initialize and
configure Jaeger tracers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opentracing.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenTracing&lt;/a&gt; - vendor-neutral APIs and
instrumentation for distributed tracing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt; - open-source systems monitoring and alerting toolkit. Before
you can monitor your services, you need to add instrumentation to their code
via one of the &lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client
libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Developer Workflow</title>
      
      <link>/guides/kubernetes/dev-workflow/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/dev-workflow/</guid>
      <description>

        
        &lt;p&gt;The developer workflow typically involves writing code, executing automated
tests, building the application, and running the app locally. In most cases,
developers repeat these steps throughout the day, creating a development cycle.
The efficiency of the development cycle has a direct impact on the time it takes
development teams to ship new features and fix bugs. For this reason, minimizing
the time it takes to iterate through the cycle is desirable.&lt;/p&gt;
&lt;p&gt;In the context of the development workflow, Kubernetes only impacts the final
steps of the cycle, which involve running the application. Depending on the
complexity of the application, developers might choose to run it in a
development Kubernetes cluster that mimics a production environment. In doing
so, developers leverage Kubernetes deployment manifests to deploy their
application alongside its dependencies, such as other services, databases, and
message queues.&lt;/p&gt;
&lt;p&gt;The ability to deploy and test applications in a production-like environment is
one of the most significant benefits of including Kubernetes in the development
cycle. Without appropriate processes and tooling, however, Kubernetes could
hinder developers&#39; efficiency, as they would need to add new steps to their
cycle. (Steps such as building container images and running kubectl commands to
deploy new containers).&lt;/p&gt;
&lt;h2 id=&#34;application-development-cycle-on-kubernetes&#34;&gt;Application Development Cycle on Kubernetes&lt;/h2&gt;
&lt;p&gt;For simple projects it is preferable to keep Kubernetes out of a developer&amp;rsquo;s
workflow. As a starting point, a development cycle might involve changing code
and rerunning an executable on one&amp;rsquo;s local machine. Containers usually enter the
development process as a means of easily running dependencies with pinned
versions (for example a SQL database). As the application grows and multiple
containers are needed, it becomes useful to codify the development environment.&lt;/p&gt;
&lt;p&gt;As more services are introduced it becomes increasingly attractive to favor
Kubernetes API manifests as the means of specifying a development environment.
This allows the developer to reuse &lt;code&gt;deployment.yaml&lt;/code&gt; files which are often
already in place in production environments. At this point there is a high level
of parity between development, staging, and production environments. However, a
new challenge arises: how does the developer efficiently update the application
running on their development cluster every time the code is updated?&lt;/p&gt;
&lt;p&gt;The Kubernetes community and the broader Cloud Native ecosystem offers a variety
of tools that improve the development workflow. Each tool attempts to solve one
of these problems: 1) Running Kubernetes in the developer&amp;rsquo;s local environment,
and 2) Continuously building, pushing, and deploying containers as the developer
changes source code.&lt;/p&gt;
&lt;h2 id=&#34;local-vs-remote-cluster&#34;&gt;Local vs Remote Cluster&lt;/h2&gt;
&lt;p&gt;An organization will eventually need to provide a cluster for
sandbox/development workloads for teams of developers. There are an array of
tools and strategies to provide a cluster for development workloads, but the
first question often asked is &amp;ldquo;Where should my developer&amp;rsquo;s develop?&amp;rdquo; As
organizations move towards a cloud native model, the journey often starts with
simple local development machines and matures towards multi-cluster development
environments hosted on-prem or with a cloud provider.&lt;/p&gt;
&lt;p&gt;The following tools provide developers with a local Kubernetes environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kind.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the development model matures, on-prem or hosted clusters are used together
with CI/CD tooling to standardize environments and workflows.&lt;/p&gt;
&lt;h2 id=&#34;kubeconfig--multiple-clusters&#34;&gt;Kubeconfig &amp;amp; Multiple Clusters&lt;/h2&gt;
&lt;p&gt;As more clusters are created for teams, projects, or production environments, it
is important to efficiently manage configurations and navigate between clusters.
Your &lt;code&gt;$HOME/.kube/config&lt;/code&gt; file, known as the &lt;code&gt;kubeconfig&lt;/code&gt;, is used to organize
information about clusters, credentials, and namespaces. Below are some common
commands to navigate contexts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl config view &lt;span class=&#34;c1&#34;&gt;# Show Merged kubeconfig settings.&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# use multiple kubeconfig files at the same time and view merged config&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;KUBECONFIG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/.kube/config:~/.kube/kubconfig2


kubectl config get-contexts                &lt;span class=&#34;c1&#34;&gt;# display list of contexts&lt;/span&gt;
kubectl config current-context             &lt;span class=&#34;c1&#34;&gt;# display the current-context&lt;/span&gt;
kubectl config use-context my-cluster-name &lt;span class=&#34;c1&#34;&gt;# set the default context to my-cluster-name&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# permanently save the namespace for all subsequent kubectl commands in that context.&lt;/span&gt;
kubectl config set-context --current --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ggckad-s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, useful tooling such as
&lt;a href=&#34;https://github.com/ahmetb/kubectx&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;kubectx&lt;/a&gt; can help developers navigate
between contexts.&lt;/p&gt;
&lt;h2 id=&#34;popular-tooling--approaches&#34;&gt;Popular Tooling &amp;amp; Approaches&lt;/h2&gt;
&lt;h3 id=&#34;skaffold&#34;&gt;Skaffold&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Skaffold&lt;/a&gt; is a project from Google that bundles multiple steps (build, tag, test, deploy) into a single command.
The tool can watch for changes and re-run the steps as needed.
Skaffold is configurable with pluggable integrations for each step.
It also assists with debugging by aggregating and tailing logs.
In addition to aiding development workflows, Skaffold can also serve double duty as the basis for executing CI/CD pipelines.&lt;/p&gt;
&lt;h3 id=&#34;tilt&#34;&gt;Tilt&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/windmilleng/tilt&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tilt&lt;/a&gt; is a CLI+GUI project backed by a startup (Windmill Engineering).
Like Skaffold, Tilt supports pluggable templating solutions (Helm, Kustomize, etc).
However, unlike other tools which only present the developer with aggregated logs, Tilt also shows a summarized view of all their running applications.
This is done by displaying a web view of each application, or showing a high-level status for each service (success/error).
The Tilt team also provides a method of sharing snapshots of one&amp;rsquo;s development environment with teammates via TiltCloud.&lt;/p&gt;
&lt;p&gt;Tilt is able to speed up build processes by avoiding in-container builds during development through copying source files (and injecting restart scripts).
This process is more seamless for interpreted languages than for compiled languages where more workarounds are needed.&lt;/p&gt;
&lt;p&gt;Tilt represents a step forward in development workflow tools because it focuses on optimizing feedback loops within a Developer&amp;rsquo;s own environment as well as across a team.
However, Tilt is still an early stage project and the direction of the startup behind the project is not yet clear.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Packaging</title>
      
      <link>/guides/kubernetes/packaging/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/packaging/</guid>
      <description>

        
        &lt;p&gt;In Kubernetes, the desired state of the system is declared via resources sent to the API Server.
Resources are stored as JSON or YAML files called &lt;em&gt;manifests&lt;/em&gt;.
The management of manifests can be cumbersome but there are many tools which can help.
To inform tooling choices it is helpful to define the nature of the problems commonly encountered and identify the approaches that each tool takes to address them.&lt;/p&gt;
&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;
&lt;h3 id=&#34;value-duplication&#34;&gt;Value Duplication&lt;/h3&gt;
&lt;p&gt;Managing manifests as flat data files (YAML) violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;DRY principle&lt;/a&gt;.
For example, a service port defined in one resource needs to be defined in multiple other resources.&lt;/p&gt;
&lt;h3 id=&#34;resource-duplication&#34;&gt;Resource Duplication&lt;/h3&gt;
&lt;p&gt;Resource variants must be accounted for.
The number of environments manifests are applied to may be bounded (dev, stage, prod) or unbounded (per developer).
Manifests may be defined inside of an organization (SaaS app) or by a third party (Wordpress).&lt;/p&gt;
&lt;h4 id=&#34;differences-in-application-configuration&#34;&gt;Differences in Application Configuration&lt;/h4&gt;
&lt;p&gt;A. Logging level as defined by env variable &lt;code&gt;LOG_LEVEL&lt;/code&gt; (staging: Debug / production: Info)&lt;/p&gt;
&lt;p&gt;B. Access token for accessing an external API located at &lt;code&gt;/secrets/credentials.json&lt;/code&gt; (staging/prod access separate accounts)&lt;/p&gt;
&lt;p&gt;Kubernetes accounts for these differences via resource references.
Maintaining and applying different ConfigMap and Secret manifests for each environment allows for a common Deployment definition to be used across environments.&lt;/p&gt;
&lt;h4 id=&#34;differences-in-application-operation&#34;&gt;Differences in Application Operation&lt;/h4&gt;
&lt;p&gt;Example: Deployment replica count (staging: 3 / production: 12)&lt;/p&gt;
&lt;p&gt;These types of differences cannot be accounted for by native resource references.&lt;/p&gt;
&lt;h2 id=&#34;techniques&#34;&gt;Techniques&lt;/h2&gt;
&lt;h3 id=&#34;1-configuration-language&#34;&gt;1. Configuration Language&lt;/h3&gt;
&lt;h4 id=&#34;1a-variable-substitution&#34;&gt;1.A. Variable Substitution&lt;/h4&gt;
&lt;p&gt;Value duplication can be solved by elevating the level of abstraction at which resources are specified: using a language in place of data files.
A configuration language can be as simple as an interpolator or it can expose features such as expressions (&lt;code&gt;appName + &amp;quot;:&amp;quot; + appPort&lt;/code&gt;) and conditionals (&lt;code&gt;if appPort != &amp;quot;80&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Some languages suffer from readability issues through introducing interpolation symbols (for example: &lt;code&gt;foo: {{ .myBarVar }}&lt;/code&gt; vs &lt;code&gt;foo: bar&lt;/code&gt;).
Language features also bring complexity and complexity brings bugs.
Both of these issues are more prominent in languages that lack support for the underlying data structures and formats.
Generic text templating languages fall into this category.
On the opposite end of the spectrum, languages that output structured data can help avoid bugs through data validation.&lt;/p&gt;
&lt;h4 id=&#34;1b-parameterization&#34;&gt;1.B. Parameterization&lt;/h4&gt;
&lt;p&gt;Most configuration languages allow for grouping manifests into modules.
Resource variants are accounted for by exposing module input parameters.
Any value that needs to vary across environments is exposed outside of the module.&lt;/p&gt;
&lt;p&gt;The pitfall of this approach is that encapsulation tends to break down over time.
As the use-cases increase, the number of exposed parameter trends towards the total of the configurable options in the underlying resources.&lt;/p&gt;
&lt;p&gt;You end up with an API contract that is defined by your module.
This is different from (and not as well documented) as the API of the underlying resources that live in your module, yet similar in surface-area after enough time has passed.&lt;/p&gt;
&lt;h3 id=&#34;2-patching&#34;&gt;2. Patching&lt;/h3&gt;
&lt;p&gt;Some tools allow for patches (partial resource definitions) to be applied to resources before they are sent to the API Server.
Patches are defined as YAML manifests that contain enough information to identify the resource they are intended to patch (for instance: &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;namespace&lt;/code&gt;) as well as target fields they are going to update/insert (for example: &lt;code&gt;replicas&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;While useful, patches introduce a layer of complexity.
Looking at a single file no longer represents the full resource that will be applied.
In addition, ordering must be accounted for: applying patch A before B can result in a different outcome as applying B before A.&lt;/p&gt;
&lt;h3 id=&#34;3-branching&#34;&gt;3. Branching&lt;/h3&gt;
&lt;p&gt;It is best practice to store manifests in version control.
Tools like git can be used to maintain branches for each environment.
This allows for native VCS tools to be used for viewing diffs across environments.
Pull Requests targeting separate branches, as opposed to separate directories can be utilized as a means of promoting changes across environments.&lt;/p&gt;
&lt;h3 id=&#34;4-convention&#34;&gt;4. Convention&lt;/h3&gt;
&lt;p&gt;Favoring convention over configuration can help mitigate repeated values.
Establishing conventions for standard ports (for example: 80 or 443 for REST APIs) can reduce required configuration as most libraries default to these values.
This can be done by taking advantage of the IP-per-pod networking model, where every pod gets a unique IP so port conflict concerns are a non-issue.
In addition, utilizing namespaces in lieu of prefixing/suffixing names (&lt;code&gt;namespace: staging, name: my-app&lt;/code&gt; as opposed to &lt;code&gt;name: my-app-staging&lt;/code&gt;) can help with keeping resource references constant.&lt;/p&gt;
&lt;h2 id=&#34;popular-tooling--approaches&#34;&gt;Popular Tooling &amp;amp; Approaches&lt;/h2&gt;
&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm&lt;/a&gt; is the dominant player in the world of Kubernetes
templating. Helm manifests are organized into modules called &lt;em&gt;charts&lt;/em&gt;. Charts
expose parameters that can be used to customize deployments. Customization of
the underlying resources is accomplished by using Golang text templates as a
DSL. Helm also incorporates the concept of a package registry to facilitate easy
consumption of third-party charts. It&amp;rsquo;s recommended to avoid the use of Helm for
managing internal projects (a business specific API, a website deployment, etc).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Large ecosystem of charts&lt;/li&gt;
&lt;li&gt;Third-party software is usually available via Helm charts
(a message queue, a database, etc)&lt;/li&gt;
&lt;li&gt;Deploying applications and their associated objects is done in one command&lt;/li&gt;
&lt;li&gt;Parameterizing values makes it easier to adjust configurations per environment
(a values file for dev, test, prod)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Charts trend towards becoming a 1:1 mapping of parameters into Kubernetes
resource definition fields&lt;/li&gt;
&lt;li&gt;Instead of configuring a well-documented Kubernetes API resource, users end up
configuring a less well known and under-documented helm chart API (as in the
exposed chart input parameters).&lt;/li&gt;
&lt;li&gt;The Go text templating language is not aware that it is outputting schemas
defined by OpenAPI or even that it is being used to format data at all. Helm
is not able to validate that &lt;code&gt;replicas: &amp;quot;three&amp;quot;&lt;/code&gt; is an invalid Deployment
field.&lt;/li&gt;
&lt;li&gt;YAML&amp;rsquo;s sensitivity to indention along with conditionally defined template
blocks often results in unforeseen issues when input parameters are changed.
Even when indentation is accounted for correctly, the result is often hard to
read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kustomize&#34;&gt;Kustomize&lt;/h3&gt;
&lt;p&gt;As of &lt;a href=&#34;https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes
1.14&lt;/a&gt;,
the &lt;a href=&#34;https://kustomize.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kustomize&lt;/a&gt; tool is a part of the native toolchain
via &lt;code&gt;kubectl apply -k&lt;/code&gt;. Kustomize does not use templates. Instead, it relies on
patching. This attribute allows Kustomize to modify vanilla manifests. Kustomize
also provides &lt;em&gt;Kubernetes aware&lt;/em&gt; functionality such as applying a prefix to all
managed resource names. Behavior is controlled by a &lt;code&gt;kustomization.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The main negative to using Kustomize is the inability to encapsulate Kubernetes
resource implementation aspects. Because patching operates at the resource
level, updating implementation details (Deployment vs StatefulSet) almost always
results in breaking changes to downstream users. The gravity of this downside
varies greatly based on the use-case. For a team that manages 3 separate
environments, encapsulation is less of a concern. On the other hand an
open-source MySQL implementation might have thousands of consumers, each with
relatively little knowledge of internal implementation details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part of the native &lt;code&gt;kubectl&lt;/code&gt; toolchain&lt;/li&gt;
&lt;li&gt;Able to modify vanilla manifests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main negative to using Kustomize is the inability to encapsulate Kubernetes
resource implementation aspects&lt;/li&gt;
&lt;li&gt;Because patching operates at the resource level, updating implementation
details (Deployment vs StatefulSet) almost always results in breaking changes
to downstream users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Operators&lt;/a&gt; are
composed of CustomResourceDefinitions (CRDs) and a control loop that is running
on a cluster. Open source projects such as &lt;a href=&#34;https://github.com/coreos/prometheus-operator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus now have
operators&lt;/a&gt;. Operators use CRDs to
create a domain-specific API for a specialized application. Similar in concept
to templating tools, this approach uses a programming language (the controller,
usually written in Go) to translate parameters (the CRD) into a set of manifests
(the created resources).&lt;/p&gt;
&lt;p&gt;As the name suggests, operators are responsible for &lt;em&gt;operating&lt;/em&gt; applications.
This means a sufficiently sophisticated operator probably has the ability to
perform application-specific steps required to upgrade to a new app version.
This is done in response to the user (human operator) making a declarative
version update. Because they have an active reconciliation loop running on the
cluster, operators also naturally address config-drift.&lt;/p&gt;
&lt;p&gt;Operators can be seen as tools that move edge-case imperative operations towards
the ideal declarative approach that Kubernetes promises. For internally
developed applications, operators should be considered when there are advanced
lifecycle concerns (for example: stateful or legacy apps).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Naturally address configuration drift&lt;/li&gt;
&lt;li&gt;When running complex third party applications, sufficiently mature operators
should be favored over basic templating tools.&lt;/li&gt;
&lt;li&gt;Mature operators can act like cloud services, making it more simple to install
and update Kubernetes applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes API pollution, creating additional cognitive load on cluster users&lt;/li&gt;
&lt;li&gt;Rogue operators can be hard to debug&lt;/li&gt;
&lt;li&gt;Building an operator involves a large amount of effort&lt;/li&gt;
&lt;li&gt;Most cloud native workloads do not warrant the development of an operator&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Application Readiness Checklist</title>
      
      <link>/guides/kubernetes/app-enhancements-checklist/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-checklist/</guid>
      <description>

        
        &lt;p&gt;This list is a starting place for considerations about your application running
on Kubernetes. It is not exhaustive and should be expanded based on your
requirements.&lt;/p&gt;
&lt;h3 id=&#34;required&#34;&gt;Required&lt;/h3&gt;
&lt;p&gt;The following are items that must be completed before running on Kubernetes.&lt;/p&gt;

&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Application runs in a container&#34;&gt;
  &lt;label for=&#34;Application runs in a container&#34;&gt;
    &lt;h4&gt;Application runs in a container&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;For the workload to run in a Kubernetes Pod, it must be packaged in a
container.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Application / container is not dependent on host configuration&#34;&gt;
  &lt;label for=&#34;Application / container is not dependent on host configuration&#34;&gt;
    &lt;h4&gt;Application / container is not dependent on host configuration&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Pods are scheduled across multiple hosts and may be rescheduled based on
the needs of the system. Relying on a static host to run your workloads
may cause issues.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Logging occurs to stdout or stderr&#34;&gt;
  &lt;label for=&#34;Logging occurs to stdout or stderr&#34;&gt;
    &lt;h4&gt;Logging occurs to stdout or stderr&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;In Kubernetes, it&amp;rsquo;s considered an anti-pattern to concern the workload with
logging mechanisms beyond the formatting of the logs. Kubernetes-based
platforms almost always feature log shipping mechanisms. This means,
applications should log to stdout and/or stderr.&lt;/p&gt;
&lt;p&gt;For more details, see the &lt;a href=&#34;../app-enhancements-logging-practices/&#34;&gt;Logging Practices guide&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;recommended&#34;&gt;Recommended&lt;/h3&gt;
&lt;p&gt;The following are items that you should consider to ensure your application can run well on Kubernetes.&lt;/p&gt;

&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Does not run as root&#34;&gt;
  &lt;label for=&#34;Does not run as root&#34;&gt;
    &lt;h4&gt;Does not run as root&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Kubernetes is a multi-tenant environment where workloads may run side-by-side
on the same host. To mitigate privilege escalation allowing one container to
impact other on the host, applications should not run as a root user.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Does not require elevated privileges (added Linux capabilities).&#34;&gt;
  &lt;label for=&#34;Does not require elevated privileges (added Linux capabilities).&#34;&gt;
    &lt;h4&gt;Does not require elevated privileges (added Linux capabilities).&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Ideally your application does not require or add Linux capabilities to the
deployment. This better ensures isolation of the workload in
Kubernetes-based environments. For more detailed examples, see the &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Security
Context
documentation&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Handles the TERM Linux signal.&#34;&gt;
  &lt;label for=&#34;Handles the TERM Linux signal.&#34;&gt;
    &lt;h4&gt;Handles the TERM Linux signal.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;When a pod is being deleted, moved, or recreated each container&amp;rsquo;s PID 1
receives a SIG TERM. The process then has a grace-period to do what it needs
and exit. The default grace-period is 30 seconds; check with your cluster
administrator to understand what your cluster is set to. If the grace period
expires, a SIG KILL is sent. For more details, see the &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Termination of Pods
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If a process, script, or HTTP endpoints must be called to terminate
gracefully, you can also add a &lt;a href=&#34;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;preStop
hook&lt;/a&gt;
to your Kubernetes manifest.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Readiness is reported by application.&#34;&gt;
  &lt;label for=&#34;Readiness is reported by application.&#34;&gt;
    &lt;h4&gt;Readiness is reported by application.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Readiness probes allow your application to report when it should start
receiving traffic. This is always what marks a pod &amp;lsquo;Ready&amp;rsquo; in the cluster.
see the &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Probing Application
State&lt;/a&gt;
guide.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Configuration is externalized.&#34;&gt;
  &lt;label for=&#34;Configuration is externalized.&#34;&gt;
    &lt;h4&gt;Configuration is externalized.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;To support configuration of your application, it&amp;rsquo;s best to place it in the
cluster using constructs like configmaps and secrets. This empowers you to
make configuration changes to new and running applications using the
Kubernetes API. For more details, see the &lt;a href=&#34;../app-enhancements-externalizing-configuration&#34;&gt;Externalizing Configuration
guide&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Able to run with multiple replicas.&#34;&gt;
  &lt;label for=&#34;Able to run with multiple replicas.&#34;&gt;
    &lt;h4&gt;Able to run with multiple replicas.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;In a Kubernetes environment, workloads are moved around based on needs of
the platform. This means a workload could be deleted and recreated from time
to time. With this and general HA practices in mind, your workload should be
able to run with more than one replica.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Prevent replicas of your application from being co-located.&#34;&gt;
  &lt;label for=&#34;Prevent replicas of your application from being co-located.&#34;&gt;
    &lt;h4&gt;Prevent replicas of your application from being co-located.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;The Kubernetes scheduler does not guarantee application replicas run on
different hosts, VMs, or hypervisors. Ensure you have appropriate
anti-affinity setup based on the fault requirements of your application. For
more details, see the &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Affinity and anti-affinity
documentation&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Application resource requirements are known.&#34;&gt;
  &lt;label for=&#34;Application resource requirements are known.&#34;&gt;
    &lt;h4&gt;Application resource requirements are known.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Applications should claim the CPU, memory, and other resources they require.
This allows the scheduler to know the best place to run the application
based on resources available. Once your resource requirements are known,
visit &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Managing Compute Resources for
Containers&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Important state does not persist in container filesystem.&#34;&gt;
  &lt;label for=&#34;Important state does not persist in container filesystem.&#34;&gt;
    &lt;h4&gt;Important state does not persist in container filesystem.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Your application&amp;rsquo;s container filesystem is considered ephemeral. Meaning it
will not move with the workload. This ephemeral storage is typically
resource constrained and should not be used for anything more than small
write needs, where loss of data is not a concern. If you need data
persistence for your application, work with your platform team to understand
how to request a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;persistent volume&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Session affinity is not required.&#34;&gt;
  &lt;label for=&#34;Session affinity is not required.&#34;&gt;
    &lt;h4&gt;Session affinity is not required.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Requiring a request hits the same instance of an application each time is an
anti-pattern in Kubernetes. While it is possible to solve for this use case,
you should consider running or architecting your application in such a way
that affinity of sessions is a non-requirement.&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;checklist-item&#34;&gt;
  &lt;input type=&#34;checkbox&#34; id=&#34;Metrics are exposed using an exporter.&#34;&gt;
  &lt;label for=&#34;Metrics are exposed using an exporter.&#34;&gt;
    &lt;h4&gt;Metrics are exposed using an exporter.&lt;/h4&gt;
  &lt;/label&gt;
  &lt;p&gt;Most Kubernetes clusters use a metrics collector such as
&lt;a href=&#34;https://prometheus.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt;. Adding exporters to your application is
trivial and support many different programming languages. For more details, see
the &lt;a href=&#34;../app-observability/&#34;&gt;observability documentation&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;


      </description>
    </item>
    
    <item>
      
      <title>Guides: Exporting Application Metrics</title>
      
      <link>/guides/kubernetes/app-observability-exporting-metrics/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-observability-exporting-metrics/</guid>
      <description>

        
        &lt;p&gt;Exposing useful metrics is critical to understanding what is happening with your
software in production.  Without this quantifiable data, it is almost impossible
to manage and develop your application intelligently.  This guide covers how to
expose metrics from your app for collection by
&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-makes-a-good-metric&#34;&gt;What Makes a Good Metric&lt;/h2&gt;
&lt;p&gt;A good metric provides quantifiable measurements on a time series that helps you
understand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Application Performance&lt;/li&gt;
&lt;li&gt;Resource Consumption&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;application-performance&#34;&gt;Application Performance&lt;/h3&gt;
&lt;p&gt;This category is often expressed as &amp;ldquo;user experience&amp;rdquo; and encompasses
measurements that indicate if users or client apps are getting what they should
reasonably expect from the application.  This also includes metrics that can
affect the user experience indirectly and help identify the root cause of
problems.  Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apdex&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Apdex&lt;/a&gt; score&lt;/li&gt;
&lt;li&gt;Total request count&lt;/li&gt;
&lt;li&gt;Jobs processed (for batch-type workloads)&lt;/li&gt;
&lt;li&gt;Queue length and wait times (for batch-type workloads)&lt;/li&gt;
&lt;li&gt;Request durations&lt;/li&gt;
&lt;li&gt;Count on number 2xx responses sent back to clients&lt;/li&gt;
&lt;li&gt;Count on number 5xx responses sent back to clients&lt;/li&gt;
&lt;li&gt;DNS query time&lt;/li&gt;
&lt;li&gt;Garbage collection frequency and duration&lt;/li&gt;
&lt;li&gt;Payloads processed and their size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resource-consumption&#34;&gt;Resource Consumption&lt;/h3&gt;
&lt;p&gt;Resource consumption is important for two reasons:  Capacity planning and cost
management.  How utilized is my application?  In other words, how much more
traffic can my application handle without scaling vertically or horizontally?
How much infrastructure will need to be provisioned for increases in traffic or
availability?  How much does it cost the business to run a given workload?
These are questions that can be answered, at least in part, by metrics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU usage&lt;/li&gt;
&lt;li&gt;Memory consumption&lt;/li&gt;
&lt;li&gt;Disk I/O usage&lt;/li&gt;
&lt;li&gt;Network bandwidth usage&lt;/li&gt;
&lt;li&gt;Pod replica counts&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implementing-an-exporter&#34;&gt;Implementing an Exporter&lt;/h2&gt;
&lt;p&gt;There are two methods to expose metrics from the software you run:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Third-Party Exporters: These are distinct workloads that collect metrics from
your running application and expose them to Prometheus.  This is a good
solution when leveraging open-source software such as nginx or redis as a part
of your solution.  These can often be run as sidecar containers.&lt;/li&gt;
&lt;li&gt;Instrumented Metrics: This option involves instrumenting your apps using the
Prometheus &lt;a href=&#34;https://prometheus.io/docs/instrumenting/clientlibs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client libraries&lt;/a&gt;
or &lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/#other-third-party-utilities&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;utilities&lt;/a&gt;
so that exposing metrics is natively supported. This is a good solution if
you are developing apps that are designed for and intended to run on Kubernetes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus docs&lt;/a&gt; offer
an excellent source for finding third-party exporters as well as software that
natively exposes Prometheus metrics.&lt;/p&gt;
&lt;h3 id=&#34;implementation-in-java&#34;&gt;Implementation in Java&lt;/h3&gt;
&lt;p&gt;Prometheus officially maintains a &lt;a href=&#34;https://github.com/prometheus/jmx_exporter&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JMX
exporter&lt;/a&gt; which can be run as a Java
Agent for JVM-based applications.&lt;/p&gt;
&lt;p&gt;For instrumenting an application that runs on the JVM, the officially maintained
&lt;a href=&#34;https://github.com/prometheus/client_java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client_java&lt;/a&gt; library offers four
types of metrics with clear &lt;a href=&#34;https://github.com/prometheus/client_java#instrumenting&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;example
code&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;implementation-in-python&#34;&gt;Implementation in Python&lt;/h3&gt;
&lt;p&gt;If instrumenting a Python application, use the official
&lt;a href=&#34;https://github.com/prometheus/client_python&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client_python&lt;/a&gt; library.  It
supports the same four types of metrics and also provides clear
&lt;a href=&#34;https://github.com/prometheus/client_python#instrumenting&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;examples&lt;/a&gt; for how
to use each.&lt;/p&gt;
&lt;p&gt;If using the popular Django framework, consider the unofficial
&lt;a href=&#34;https://github.com/korfuri/django-prometheus&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;django-prometheus&lt;/a&gt; python
library.&lt;/p&gt;
&lt;h3 id=&#34;implementation-in-go&#34;&gt;Implementation in Go&lt;/h3&gt;
&lt;p&gt;For Go applications, the official
&lt;a href=&#34;https://github.com/prometheus/client_golang&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;client_golang&lt;/a&gt; library is highly
recommended.  It&amp;rsquo;s important to note that this project includes both an
instrumentation library as well as a client library for applications that need
to query metrics from a Prometheus server, which is a different concern.  The
repo includes
&lt;a href=&#34;https://github.com/prometheus/client_golang/tree/master/examples&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;examples&lt;/a&gt; for
instrumenting but other excellent examples exist in
&lt;a href=&#34;https://github.com/etcd-io/etcd/blob/master/etcdserver/metrics.go&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;etcd&lt;/a&gt; and in
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/component-base/metrics&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;implementation-in-nodejs&#34;&gt;Implementation in Node.js&lt;/h3&gt;
&lt;p&gt;There is not an official client library for node.js, however there is an
unofficial third-party &lt;a href=&#34;https://github.com/siimon/prom-client&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;prom-client&lt;/a&gt;
project that has attracted considerable community participation.  It supports
each of the metric types addressed below, includes &lt;a href=&#34;https://github.com/siimon/prom-client/tree/master/example&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;clear
examples&lt;/a&gt; and good
documentation.&lt;/p&gt;
&lt;h2 id=&#34;types-of-metrics&#34;&gt;Types of Metrics&lt;/h2&gt;
&lt;p&gt;Prometheus client libraries generally use four &lt;a href=&#34;https://prometheus.io/docs/concepts/metric_types/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;metric
types&lt;/a&gt;.  It is helpful to
understand how each is used when instrumenting an application to expose
Prometheus metrics.&lt;/p&gt;
&lt;h3 id=&#34;counter&#34;&gt;Counter&lt;/h3&gt;
&lt;p&gt;A counter is a metric that can only increase.  It is useful for things like
total number of requests, error counts or any accumulating events.&lt;/p&gt;
&lt;h3 id=&#34;gauge&#34;&gt;Gauge&lt;/h3&gt;
&lt;p&gt;A gauge is used for numerical values that can increase and decrease.  Current
resource usage and pod replica counts are examples of where you would use gauges.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Summaries track the size and number of events.  An example would be DNS queries
where the size would be the duration of the queries and the number would be
the count of DNS queries.  Another example would be for garbage collection where
size is the duration of garbage collection events and number would be the number of
times garbage collection occurred.&lt;/p&gt;
&lt;h3 id=&#34;histogram&#34;&gt;Histogram&lt;/h3&gt;
&lt;p&gt;Histograms track the size and number of events and organize them into buckets.
An Apdex score, for example, could be based on a histogram using buckets of
request durations.  These request durations should be defined according to the
service level objectives (SLO) for the application.  Define what is desired and
tolerable, then use histograms to readily determine if your objectives are being
met.  It also provides convenient mechanisms upon which to alert if values
violate tolerable thresholds.&lt;/p&gt;
&lt;h2 id=&#34;scraping-metrics-with-prometheus&#34;&gt;Scraping Metrics With Prometheus&lt;/h2&gt;
&lt;p&gt;As an application developer, you will preferably have a Prometheus monitoring
system available as a part of the platform.  If so, when you deploy your
application, you will have to tell Prometheus where to scrape your app&amp;rsquo;s metrics
from.&lt;/p&gt;
&lt;h3 id=&#34;scrape-config&#34;&gt;Scrape Config&lt;/h3&gt;
&lt;p&gt;Prometheus will need a &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;scrape
config&lt;/a&gt;
to find your app&amp;rsquo;s metrics.  Given this config Prometheus would scrape metrics
from https://samplehost:8000/metrics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# The job name assigned to scraped metrics by default.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;job_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sample-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of statically configured targets where metrics will be scraped.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;static_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;samplehost:8000&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The HTTP resource path on which to fetch metrics from targets.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/metrics&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Default to scraping over https. If required, just disable this or change to `http`.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Configures the scrape request&amp;#39;s TLS settings.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# CA certificate to validate API server certificate with.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ca_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/path/to/ca.crt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Certificate and key files for client cert authentication to the server.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cert_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/path/to/sample-app.crt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/path/to/sample-app.key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;service-monitor&#34;&gt;Service Monitor&lt;/h3&gt;
&lt;p&gt;While it&amp;rsquo;s helpful to understand what the scrape config for Prometheus consists
of, in a Kubernetes environment, it is highly recommended that you use the
&lt;a href=&#34;https://github.com/coreos/prometheus-operator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus Operator&lt;/a&gt;
to deploy the Prometheus instances and manage the scrape configs by way of the
ServiceMonitor resource.&lt;/p&gt;
&lt;p&gt;You may not be responsible for deploying the Prometheus server, but it&amp;rsquo;s helpful
to understand how it references the ServiceMonitor resource which will be used
by the operator to configure Prometheus on your behalf.  In the Prometheus
Operator&amp;rsquo;s Prometheus resource, the &lt;code&gt;serviceMonitorSelector&lt;/code&gt; is used to
associate Service Monitors with a Prometheus instance.&lt;/p&gt;
&lt;p&gt;Consider this example of a Prometheus resource used to deploy a Prometheus
server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;monitoring.coreos.com/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceMonitorSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;team&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;samples &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# references ServiceMonitor&amp;#39;s label&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is an example of a ServiceMonitor resource manifest you could deploy along
with the other resources for your app to get the metrics scraped by the
Prometheus server.  The Service Monitor uses a label selector to identify
Services and the associated Endpoint objects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;monitoring.coreos.com/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceMonitor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sample-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;team&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;samples &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# used by Prometheus resource to associate this ServiceMonitor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespeceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;sample-namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sample-app &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# this label must be on sample-app&amp;#39;s service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the named port on the Service from which to scrape&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/metrics&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      
      <title>Guides: Externalizing Configuration</title>
      
      <link>/guides/kubernetes/app-enhancements-externalizing-configuration/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-externalizing-configuration/</guid>
      <description>

        
        &lt;p&gt;Application &lt;em&gt;configuration&lt;/em&gt; is anything that varies between environments. For
example, stateful applications depend on different database endpoints in testing
and production environments. A best practice in cloud-native development is to
decouple configuration from code. This means keeping database endpoints and
credentials separate from the application&amp;rsquo;s source code. If your application has
environment-specific configuration hard-coded into its repository, VMware
recommends refactoring your application to decouple source code from
configuration.&lt;/p&gt;
&lt;h2 id=&#34;runtime-injection&#34;&gt;Runtime Injection&lt;/h2&gt;
&lt;p&gt;Once configuration has been decoupled from source code, configure your
application to consume it at runtime by presenting environment variables or
mounting a file in the container.&lt;/p&gt;
&lt;h3 id=&#34;environment-variables&#34;&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;Most programming languages support reading environment variables from the local
environment. The following is an example of this in Go.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DATABASE_ENDPOINT:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DATABASE_ENDPOINT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program produces the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DATABASE_ENDPOINT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;foo.example.com
$ go run environment-variables-example.go
DATABASE_ENDPOINT: foo.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once your application is configured to consume configuration from environment
variables, configure your container orchestrator to inject them at runtime. The
following example shows how to configure a Kubernetes pod with environment
variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;environment-variable-example&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;echo $DATABASE_ENDPOINT&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DATABASE_ENDPOINT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mounted-files&#34;&gt;Mounted Files&lt;/h3&gt;
&lt;p&gt;Another way to inject configuration is through a local file. Most programming
languages support reading from a local file. The following is an example of this
in Go.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/etc/example-configuration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program produces the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DATABASE_ENDPOINT=foo.example.com&amp;#34;&lt;/span&gt; &amp;gt; /etc/example-configuration
$ go run read-file-example.go
&lt;span class=&#34;nv&#34;&gt;DATABASE_ENDPOINT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;foo.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once your application is configured to consume configuration from a local file,
configure your container orchestrator to mount it at runtime. In Kubernetes, use
a
&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;ConfigMap&lt;/em&gt;&lt;/a&gt;
to mount a configuration file inside a pod. The following example shows how to
configure a Kubernetes pod with a ConfigMap mounted at &lt;code&gt;/etc/configuration&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DATABASE_ENDPOINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-configmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cat /etc/configuration&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restartPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Never&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These examples cover basic use cases within the context of Kubernetes. For more
details, refer to the Kubernetes documentation on &lt;a href=&#34;https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;environment
variables&lt;/a&gt;
and
&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ConfigMaps&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sensitive-information&#34;&gt;Sensitive Information&lt;/h2&gt;
&lt;p&gt;Some configuration, such as passwords and OAuth tokens, are sensitive
information and should be handled with extra care. This section shows how to
handle sensitive information in the context of Kubernetes using
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Secrets&lt;/em&gt;&lt;/a&gt;. The
biggest difference between a Secret and ConfigMap is that Secret data is stored
in &lt;code&gt;base64&lt;/code&gt; encoding, whereas ConfigMap data is stored in plain text.&lt;/p&gt;
&lt;h3 id=&#34;secret-creation&#34;&gt;Secret Creation&lt;/h3&gt;
&lt;p&gt;Create a secret using &lt;code&gt;kubectl&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret generic prod-db-secret --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;produser --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Y4nys7f11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces the following object in Kubernetes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;database-credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Opaque&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;YWRtaW4=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MWYyZDFlMmU2N2Rm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;environment-variables-1&#34;&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;Secrets may be mounted in a pod as an environment variable, just like
configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-secret-environment-variable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;echo $SECRET_USERNAME &amp;amp;&amp;amp; echo $SECRET_PASSWORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SECRET_USERNAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;database-credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SECRET_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;database-credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restartPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Never&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mounted-files-1&#34;&gt;Mounted Files&lt;/h3&gt;
&lt;p&gt;Similarly, secrets may also be mounted in a pod as a file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-secret-file&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cat /etc/credentials&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;credential-mount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/credentials&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;credential-mount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;database-credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;credential-managers&#34;&gt;Credential Managers&lt;/h2&gt;
&lt;p&gt;Your operations team may use a dedicated service to manage the lifecycle of
credentials, such as &lt;a href=&#34;https://www.vaultproject.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;HashiCorp&amp;rsquo;s Vault&lt;/a&gt;.
Consequently, credentials would not be sourced from Kubernetes. Your deployment
manifest would pull application credentials using an
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;initContainer&lt;/em&gt;&lt;/a&gt;.
An &lt;code&gt;initContainer&lt;/code&gt; is a job that runs in a container before your application is
deployed and uses the same underlying filesystem. This can be used to pull
credential information from outside your Kubernetes cluster and write it to a
location that will later be mounted and read by your application. The
&lt;a href=&#34;https://github.com/sethvargo/vault-kubernetes-authenticator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;vault-kubernetes-authenticator&lt;/em&gt;&lt;/a&gt;
project implements this idea by using an &lt;code&gt;initContainer&lt;/code&gt; to pull credentials
from an instance of HashiCorp&amp;rsquo;s Vault. Below is an example of how you can
configure your Deployment manifest with this tool to integrate your application
with Vault. This example is modified from the project&amp;rsquo;s GitHub page to align
with examples in this document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-secret-vault&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-auth&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;medium&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;medium&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;initContainers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-authenticator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sethvargo/vault-kubernetes-authenticator:0.2.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-auth&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/run/secrets/vaultproject.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VAULT_ROLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp-role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ls /home/vault &amp;amp;&amp;amp; cat /var/run/secrets/vaultproject.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-auth&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/home/vault&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vault-secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/run/secrets/vaultproject.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HOME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/home/vault&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This manifest describes a deployment in which the &lt;code&gt;vault-authenticator&lt;/code&gt;
container runs as an &lt;code&gt;initContainer&lt;/code&gt;, pulls a credential from vault and writes
it to &lt;code&gt;/var/run/secrets/vaultproject.io&lt;/code&gt;. The &lt;code&gt;stateful-application&lt;/code&gt; container
then mounts this directory and consumes its contents for use as credentials.&lt;/p&gt;
&lt;h2 id=&#34;gitops-credential-management&#34;&gt;GitOps Credential Management&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;GitOps&lt;/em&gt; refers to the practice of using a &lt;code&gt;git&lt;/code&gt; repository as a single source
of truth for application source code and configuration. Although storing
application source code and configuration in version control is a best practice,
you should avoid storing sensitive information in version control as plain text.
Bitnami&amp;rsquo;s &lt;a href=&#34;https://github.com/bitnami-labs/sealed-secrets&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Sealed Secrets&lt;/em&gt;&lt;/a&gt; and
Soluto&amp;rsquo;s &lt;a href=&#34;https://github.com/Soluto/kamus&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Kamus&lt;/em&gt;&lt;/a&gt; projects are two GitOps
solutions for encrypting sensitive information, storing it in version control
and making it available to your application. The best path forward will depend
on your specific requirements. VMware recommends application developers and
platform operators work together to discuss the best solution given their
business requirements and constraints.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Graceful Shutdown</title>
      
      <link>/guides/kubernetes/app-enhancements-graceful-shutdown/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-graceful-shutdown/</guid>
      <description>

        
        &lt;p&gt;Throughout the lifecycle of an application, running pods are terminated due to
multiple reasons. In some cases, Kubernetes terminates pods due to user input
(when updating or deleting a deployment, for example). In others, Kubernetes
terminates pods because it needs to free resources on a given node. Regardless
of the scenario, Kubernetes allows the containers running in a pod to shutdown
gracefully within a configurable period.&lt;/p&gt;
&lt;h2 id=&#34;pod-shutdown-scenarios&#34;&gt;Pod Shutdown Scenarios&lt;/h2&gt;
&lt;p&gt;The following diagrams depict the possible pod shutdown scenarios.&lt;/p&gt;
&lt;h3 id=&#34;graceful-shutdown&#34;&gt;Graceful Shutdown&lt;/h3&gt;
&lt;p&gt;In this scenario, the containers within the pod shut down gracefully within the
grace period. The &amp;ldquo;graceful shutdown&amp;rdquo; state for the containers represents the
execution of an optional pre-stop hook and PID 1 responding to the SIGTERM
signal. Once the containers exit successfully, the Kubelet deletes the pod from
the API server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/diagrams/graceful_shutdown_success.png&#34; alt=&#34;Graceful Shutdown Success&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;forceful-shutdown&#34;&gt;Forceful Shutdown&lt;/h3&gt;
&lt;p&gt;In this scenario, the containers fail to shutdown within the grace period.
Failure to shutdown could be due to multiple reasons, including 1) the
application ignoring the SIGTERM signal, 2) the pre-stop hook taking longer than
the grace period, 3) the application taking longer than the grace period to
clean up resources, or 4) a combination of the above.&lt;/p&gt;
&lt;p&gt;When the application fails to shutdown within the grace period, the Kubelet
sends a SIGKILL signal to forcefully shutdown the processes running in the pod.
Depending on the application, this can result in data loss and user-facing
errors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/diagrams/graceful_shutdown_failure.png&#34; alt=&#34;Graceful Shutdown Failure&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;forceful-deletion-using-kubectl&#34;&gt;Forceful Deletion Using Kubectl&lt;/h2&gt;
&lt;p&gt;Pod deletion involves coordination between the API server and the Kubelet. When
a pod deletion is requested, the pod is marked for deletion in the API and the
Kubelet stops the pod. Once stopped, the Kubelet deletes the pod object from the
cluster state.&lt;/p&gt;
&lt;p&gt;In addition to the above flow, Kubernetes exposes a mechanism to forcefully
delete a pod from the cluster via the API. The forceful deletion is typically
achieved using the &lt;code&gt;kubectl delete pod --force --grace-period=0&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Forceful deletion should be avoided, as there is no guarantee that the pod will
be terminated. Furthermore. the user has no visibility of this problem via the
API server (using &lt;code&gt;kubectl&lt;/code&gt; commands) and would have to log into the node to
manually clean up the process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/diagrams/graceful_shutdown_zombie.png&#34; alt=&#34;Graceful Shutdown Zombie&#34;  /&gt;&lt;/p&gt;


&lt;div class=&#34;aside aside-info&#34;&gt;
    &lt;div class=&#34;aside aside-title&#34;&gt;
        &lt;i class=&#34;fas fa-exclamation-circle&#34;&gt;&lt;/i&gt;
        &lt;div&gt;Note&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;aside aside-content&#34;&gt;
    &lt;p&gt;While technically possible, it is unlikely you will end up with a zombie process
after forcefully deleting a pod.&lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;shutting-down-gracefully&#34;&gt;Shutting Down Gracefully&lt;/h2&gt;
&lt;h3 id=&#34;handle-the-sigterm-signal&#34;&gt;Handle the SIGTERM Signal&lt;/h3&gt;
&lt;p&gt;The top-most process, or PID 1 process, must configure signal handlers to handle
the SIGTERM signal. By doing so, the application can perform any necessary
cleanup before shutting down.&lt;/p&gt;
&lt;p&gt;The following code snippet shows how to handle the SIGTERM signal in a Go process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// App initialization code here...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Make a channel to listen for an interrupt or terminate signal from the OS.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Use a buffered channel because the signal package requires it.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Interrupt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SIGTERM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Start the application and listen for errors
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Wait for a server error or shutdown signal
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How you capture and handle Linux signals depends on your language and runtime.&lt;/p&gt;
&lt;h3 id=&#34;configure-the-graceful-shutdown-period&#34;&gt;Configure the Graceful Shutdown Period&lt;/h3&gt;
&lt;p&gt;The graceful shutdown period is defined at the pod level using the
&lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt; field. If not specified, the period defaults to
30 seconds.&lt;/p&gt;
&lt;p&gt;The following YAML snippet shows how to set the grace period to 60 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;implement-a-pre-stop-hook&#34;&gt;Implement a Pre-stop Hook&lt;/h3&gt;
&lt;p&gt;If your application requires a separate process or script to be run, or an HTTP
endpoint to be called, you can configure a pre-stop hook in your pod manifest.
The Kubelet executes the pre-stop hook within the container&amp;rsquo;s namespace before
sending the SIGTERM signal to the application.&lt;/p&gt;
&lt;p&gt;The following YAML snippet shows how to configure a pre-stop hook that runs a
script called &lt;code&gt;pre-stop.sh&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lifecycle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preStop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/pre-stop.sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      
      <title>Guides: Label Best Practices</title>
      
      <link>/guides/kubernetes/app-enhancements-label-design/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-label-design/</guid>
      <description>

        
        &lt;p&gt;Labels are a means for describing and identifying components that make up an
application with arbitrary key/value pairs. Labels are attached to Kubernetes
API objects at time of creation or can also be added/modified/removed at a later
time. Labels are simple pieces of metadata that can help with organization and
administration of an application&amp;rsquo;s lifecycle.&lt;/p&gt;
&lt;p&gt;Labels are &lt;strong&gt;&lt;em&gt;not always&lt;/em&gt;&lt;/strong&gt; arbitrary, and are sometimes applied automatically to
some API objects by Kubernetes, typically via the
&lt;a href=&#34;https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;kubelet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-labels&#34;&gt;Using Labels&lt;/h2&gt;
&lt;h3 id=&#34;label-example&#34;&gt;Label Example&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s an example of some labels attached to a pod manifest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;labels-with-selectors&#34;&gt;Labels with Selectors&lt;/h3&gt;
&lt;p&gt;Selectors enable you to select Kubernetes API objects based on the labels
applied to them. This is useful when defining what workloads should be routed
to or from a service and their underlying components, such as what pods should
be managed by a replica set. A selector achieves this by specifying which
key/value pairs to search for within API object metadata (typically, but not
limited to pod specifications) to be able to properly perform these tasks, and
is one of the main purposes for labels.&lt;/p&gt;
&lt;h4 id=&#34;selector-example&#34;&gt;Selector Example&lt;/h4&gt;
&lt;p&gt;Here&amp;rsquo;s an example of using a service to expose pods identified by their applied
labels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp_db_svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app_db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_app_db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;identifying-application-components-with-labels&#34;&gt;Identifying Application Components with Labels&lt;/h3&gt;
&lt;p&gt;The Kubernetes API can be queried with the &lt;code&gt;kubectl&lt;/code&gt; client to list specific
components with specific labels. There are three operators that can be used to
perform these queries: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, and &lt;code&gt;!=&lt;/code&gt;.&lt;/p&gt;





&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;equal to or is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;equal to or is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;not equal to or is not&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;label-query-examples&#34;&gt;Label Query Examples&lt;/h4&gt;
&lt;p&gt;Find all components in Kubernetes that are related to running MySQL
(&lt;code&gt;app: mysql&lt;/code&gt;) and not production (&lt;code&gt;environment: production&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get all -l &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;mysql,environment!&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;production -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the command above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;: lists the API objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt;: is equivalent to all component/API object types&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: label(s) to query/filter on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name==mysql&lt;/code&gt;: label with key &lt;code&gt;name&lt;/code&gt; is/equals &lt;code&gt;mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt;: comma separator for multiple label queries&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment!=production&lt;/code&gt;: label with key &lt;code&gt;environment&lt;/code&gt; is not/not equal to
&lt;code&gt;production&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-A&lt;/code&gt;: from all namespaces in Kubernetes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;considerations-when-creating-labeling-standards&#34;&gt;Considerations when Creating Labeling Standards&lt;/h2&gt;
&lt;p&gt;As you can see from the prior sections, labels have a fairly important place in
successful application deployment within Kubernetes. It is important
to standardize labels in every component within a Kubernetes environment.
These design decisions will make
locating and managing components easier in the long run.&lt;/p&gt;
&lt;p&gt;Some recommended labels per the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/&#34;&gt;Kubernetes documentation&lt;/a&gt;
include:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of the application&lt;/td&gt;
&lt;td&gt;mysql&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;instance&lt;/td&gt;
&lt;td&gt;A unique name identifying the instance of an application&lt;/td&gt;
&lt;td&gt;frontend-green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;The current version of the application (e.g., a semantic version, revision hash, etc.)&lt;/td&gt;
&lt;td&gt;1.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;component&lt;/td&gt;
&lt;td&gt;The component within the architecture&lt;/td&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;part-of&lt;/td&gt;
&lt;td&gt;The name of a parent application this application is part of&lt;/td&gt;
&lt;td&gt;wordpress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;managed-by&lt;/td&gt;
&lt;td&gt;The tool being used to manage the operation of an application&lt;/td&gt;
&lt;td&gt;app-manager&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;VMware recommends you extend the above labels with the following, where relevant.&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;tier&lt;/td&gt;
&lt;td&gt;The tier in the overall application architecture&lt;/td&gt;
&lt;td&gt;frontend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;environment&lt;/td&gt;
&lt;td&gt;The environment in reference to the systems development lifecycle&lt;/td&gt;
&lt;td&gt;dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;purpose&lt;/td&gt;
&lt;td&gt;The purpose of this particular application component&lt;/td&gt;
&lt;td&gt;queue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;The team or individual responsible for deploying or maintaining the application component&lt;/td&gt;
&lt;td&gt;&amp;ldquo;John Doe&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner-email&lt;/td&gt;
&lt;td&gt;The email address of the responsible team or individual for deploying or maintaining the application component&lt;/td&gt;
&lt;td&gt;&amp;ldquo;&lt;a href=&#34;mailto:app-dev-team@company.com&#34;&gt;app-dev-team@company.com&lt;/a&gt;&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repository&lt;/td&gt;
&lt;td&gt;A URL to the repository that contains this application&amp;rsquo;s source code&lt;/td&gt;
&lt;td&gt;&amp;ldquo;github.com/kubernetes/kubernetes&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;managed-by&lt;/td&gt;
&lt;td&gt;The tool being used to manage the operation of an application&lt;/td&gt;
&lt;td&gt;helm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;business-unit&lt;/td&gt;
&lt;td&gt;The business unit who owns this application&lt;/td&gt;
&lt;td&gt;&amp;ldquo;finance&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


      </description>
    </item>
    
    <item>
      
      <title>Guides: Logging Best Practices</title>
      
      <link>/guides/kubernetes/app-enhancements-logging-practices/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-logging-practices/</guid>
      <description>

        
        &lt;p&gt;Logs help you monitor events and debug problems in an application. As complexity
of a cloud-native environment grows with the number of deployed applications,
debugging and monitoring become more difficult. Organizations can maintain
observability and the ability to troubleshoot by adhering to the following
guidelines.&lt;/p&gt;
&lt;h2 id=&#34;logging-types&#34;&gt;Logging Types&lt;/h2&gt;
&lt;p&gt;Cloud-native platforms handle application logging in three primary ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Centralized Logging - An external system pulls logs from &lt;code&gt;stdout&lt;/code&gt;
of your application. You do not need to configure anything.&lt;/li&gt;
&lt;li&gt;Centralized Logging with Sidecar - An external system pulls logs
from &lt;code&gt;stdout&lt;/code&gt; of a sidecar container. You must redirect logs from your
application&amp;rsquo;s output location to &lt;code&gt;stdout&lt;/code&gt; of a sidecar container.&lt;/li&gt;
&lt;li&gt;Logs Pushed from Application - Your application pushes logs directly to a
centralized log aggregation service.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following diagram illustrates these concepts in the context of a Kubernetes
cluster. In this example, a centralized logging tool is deployed as a DaemonSet
and sidecars are deployed as containers within application pods.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/logging-types.png&#34; alt=&#34;logging-type&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;This document focuses on the first and second approaches outlined above. In
general, VMware advises against the third option as it requires the application
logic to also be responsible for logging.&lt;/p&gt;
&lt;h2 id=&#34;output-location&#34;&gt;Output Location&lt;/h2&gt;
&lt;p&gt;Since changes made to disk are lost on a container restart, applications should
not log to a file within the container. A best practice in container-based
environments is to log to &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;, and allow a separate logging
agent to handle logs for the application. This simplifies implementation of
logging for a developer because logging to &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; is easy to
implement. Furthermore, cluster operators may deploy tooling which can easily
consume and analyze these logs.&lt;/p&gt;
&lt;h2 id=&#34;output-redirection&#34;&gt;Output Redirection&lt;/h2&gt;
&lt;p&gt;Not all existing applications follow best practice by logging to &lt;code&gt;stdout&lt;/code&gt; and
&lt;code&gt;stderr&lt;/code&gt;, as some are configured store to logs on one or more locations on disk.
If you cannot modify the application, deploy a sidecar container to redirect
application logs to &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; as a workaround.&lt;/p&gt;
&lt;p&gt;Consider the following example of a Kubernetes pod where a container writes to
two files on disk. The second and third pods &lt;code&gt;tail&lt;/code&gt; the files on disk, which
allows logging utilities to consume log events as they are redirected to
&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/bin/sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      i=0;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      while true;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      do
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;        echo &amp;#34;$i: $(date)&amp;#34; &amp;gt;&amp;gt; /var/log/1.log;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;        echo &amp;#34;$(date) INFO $i&amp;#34; &amp;gt;&amp;gt; /var/log/2.log;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;        i=$((i+1));
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;        sleep 1;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      done&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;varlog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;count-log-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/bin/sh, -c, &amp;#39;tail -n+1 -f /var/log/1.log&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;varlog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;count-log-2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/bin/sh, -c, &amp;#39;tail -n+1 -f /var/log/2.log&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;varlog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;varlog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows you to abide by logging best practices in a cloud-native environment
without making changes to application code. However, VMware recommends logging
to &lt;code&gt;stdout&lt;/code&gt; in the application layer when possible to minimize resource
overhead.&lt;/p&gt;
&lt;p&gt;For more details on logging in Kubernetes, refer to the &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/logging/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;official reference
documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;structured-vs-unstructured-logs&#34;&gt;Structured vs. Unstructured Logs&lt;/h2&gt;
&lt;p&gt;Logging application events in a structured format makes consumption and querying
of logs easier. Logs are normally presented as strings with information such as
log level, timestamp and a description of the event. These are considered
&lt;em&gt;unstructured logs&lt;/em&gt; because they do not conform to a data format such as JSON.
Automation &lt;em&gt;can&lt;/em&gt; parse &lt;em&gt;Structured logs&lt;/em&gt; on the other hand, because they are
organized into a machine-readable data format. This allows you to construct
queries that reference specific parts of the logs. For example, structured logs
allow a user to easily construct a query to filter all events based on their
timestamp, log level or other user-defined metadata.&lt;/p&gt;
&lt;h3 id=&#34;language-support-for-structured-logging&#34;&gt;Language Support for Structured Logging&lt;/h3&gt;
&lt;p&gt;A best practice for structured logging is to implement it directly in
application code with a logging library. This results in logs conforming to a
data format by the time another tool consumes them, which prevents CPU cycles
from being spent on parsing. Most languages have a native logging library that
supports structured logging.&lt;/p&gt;
&lt;p&gt;Consider the following example implementation of structured logging in
&lt;a href=&#34;https://github.com/sirupsen/logrus/tree/v1.4.2&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Logrus&lt;/em&gt;&lt;/a&gt;, a logging library
for Go. This example is modified from Logrus&#39; GitHub page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Log as JSON
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetFormatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSONFormatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Output to stdout
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;animal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;walrus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A group of walrus emerges from the ocean&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;omg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;122&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Warn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The group&amp;#39;s number increased tremendously!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;omg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The ice breaks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code referenced above produces the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;animal&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;walrus&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;A group of walrus emerges from the
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ocean&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;:10,&lt;span class=&#34;s2&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-03-10 19:57:38.562264131 -0400 EDT&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;warning&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;The group&amp;#39;s number increased tremendously!&amp;#34;&lt;/span&gt;,
&lt;span class=&#34;s2&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;:122,&lt;span class=&#34;s2&#34;&gt;&amp;#34;omg&amp;#34;&lt;/span&gt;:true,&lt;span class=&#34;s2&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-03-10 19:57:38.562471297 -0400 EDT&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;fatal&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;The ice breaks!&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;:100,&lt;span class=&#34;s2&#34;&gt;&amp;#34;omg&amp;#34;&lt;/span&gt;:true,
&lt;span class=&#34;s2&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-03-10 19:57:38.562543128 -0400 EDT&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the trade-off between human and machine readability with, with structured
logs being more difficult for humans to read and easier for machines to parse.
Carefully consider who the consumers of logs are and take this into account when
you implement logging.&lt;/p&gt;
&lt;h3 id=&#34;consuming-structured-logs-in-elastic&#34;&gt;Consuming Structured Logs in Elastic&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Elasticsearch&lt;/em&gt; is a log aggregation and search tool used by operations teams to
aggregate and query logs in a cloud-native environment. By adhering to a
pre-defined logging structure at the application layer expressed as a
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping.html#CO157-1&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;mapping&lt;/em&gt;&lt;/a&gt;
object to Elasticsearch, logs are ingested without Elasticsearch having to parse
the raw input. This allows both developers and operators to effectively
troubleshoot as a cloud environment becomes more complex.&lt;/p&gt;
&lt;p&gt;Elasticsearch could use the following mapping configuration to parse the
previous section&amp;rsquo;s logs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;animal&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;, 
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;:     &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;, 
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;:       &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,  
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:   &lt;span class=&#34;s2&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, 
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;strict_date_optional_time||epoch_millis&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;age&lt;/code&gt; properties each have an assigned data
type, and the &lt;code&gt;created&lt;/code&gt; property has both an assigned data type and defined
format.&lt;/p&gt;
&lt;h3 id=&#34;structured-logging-sidecar&#34;&gt;Structured-Logging Sidecar&lt;/h3&gt;
&lt;p&gt;If an application does not implement structured logging and you cannot modify
the application, parsing may occur after the application has emitted log events.
Use &lt;a href=&#34;https://fluentbit.io/documentation/0.12/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Fluentbit&lt;/em&gt;&lt;/a&gt;, a log shipper that
VMware recommends, to deploy a sidecar (as described in the previous section)
which parses logs before shipping them.&lt;/p&gt;
&lt;p&gt;Consider the following example from the Fluentbit documentation. Fluentbit may
take the following as input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;192.168.2.20 - - &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;28/Jul/2006:10:27:10 -0300&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET /cgi-bin/try/ HTTP/1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3395&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And produce the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.2.20&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;:  &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;s2&#34;&gt;&amp;#34;/cgi-bin/try/&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;s2&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;:    &lt;span class=&#34;s2&#34;&gt;&amp;#34;3395&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;referer&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;agent&amp;#34;&lt;/span&gt;:   &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although this sidecar implements simple logic and its overhead is low, VMware
recommends that your application print structured logs to avoid the overhead
introduced by additional containers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Probing Application State</title>
      
      <link>/guides/kubernetes/app-enhancements-probing-app-state/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/app-enhancements-probing-app-state/</guid>
      <description>

        
        &lt;p&gt;Adding probes to your application provides two critical pieces of information to the system running
it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the application ready to receive traffic?&lt;/li&gt;
&lt;li&gt;Is the application healthy?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cloud Native platforms have methods to probe the application and answer the above questions. In
the case of Kubernetes, the kubelet (Kubernetes agent that runs on every host) can execute a
command inside the container, make an HTTP request, or make a TCP request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/kubelet-probe.png&#34; alt=&#34;kubelet-probe&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-probes-to-your-applications&#34;&gt;Adding Probes to your Applications&lt;/h2&gt;
&lt;p&gt;Two approaches for adding probes to your applications are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an endpoint that responds based on the state of the application.&lt;/li&gt;
&lt;li&gt;Run a command (process) in the container and validate condition or output.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option &lt;strong&gt;1&lt;/strong&gt; is preferred. Since the endpoint is implemented in the application, it can perform an
in-depth check before responding to the requester. However, this option does require code
modification.&lt;/p&gt;
&lt;p&gt;Option &lt;strong&gt;2&lt;/strong&gt; requires no application modification. It is ideal for legacy applications where
adding an endpoint is non-trivial. It does assume there is a command that can be run to validate
something about your application. For example, a configuration file that is only created once the
application is up and running. An example command that could validate this is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat /etc/alive.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the file &lt;code&gt;/etc/alive.conf&lt;/code&gt; does not exist, &lt;code&gt;cat&lt;/code&gt; will return an error code. This indicates
the application is not ready.&lt;/p&gt;
&lt;h2 id=&#34;choosing-probes&#34;&gt;Choosing Probes&lt;/h2&gt;
&lt;p&gt;Kubernetes provides three different types of probes to test
whether applications are up and running and ready to receive
traffic:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Readiness - The &lt;code&gt;Pod&lt;/code&gt; is ready (if not true, don&amp;rsquo;t send
traffic to it)&lt;/li&gt;
&lt;li&gt;Liveness - The &lt;code&gt;Pod&lt;/code&gt; is alive (if not true, restart it)&lt;/li&gt;
&lt;li&gt;Startup - The &lt;code&gt;Pod&lt;/code&gt; has finished initialization (proceed with
Liveness and Readiness probes)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We highly recommend applications always have Readiness probes.
Liveness probes are recommended, but it&amp;rsquo;s important that their
check does not rely on external dependencies. Meaning you need
to be mindful that your application doesn&amp;rsquo;t get restarted due
to external services or dependencies being unavailable.&lt;/p&gt;
&lt;p&gt;Startup probes are generally not recommended as you can almost
always achieve the same results with liveness/readiness.
At the time of writing, &lt;code&gt;startupProbe&lt;/code&gt;&amp;rsquo;s are expected to be
promoted to Beta in Kubernetes 1.18.&lt;/p&gt;
&lt;h2 id=&#34;determining-application-readiness&#34;&gt;Determining Application Readiness&lt;/h2&gt;
&lt;p&gt;Readiness represents whether the application is ready to receive traffic. This is helpful when your
application process(s) start but require some amount of initialization before being active. It
is best practice to define a readiness check in your application.&lt;/p&gt;
&lt;p&gt;In Kubernetes, readiness probes are configured in &lt;code&gt;spec.containers[i].readinessProbe&lt;/code&gt;. An example
configuration is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;readinessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/ready&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failureThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following diagram demonstrates the impact of this &lt;code&gt;readinessProbe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/readiness-probe.png&#34; alt=&#34;readiness probe&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;determining-application-liveness&#34;&gt;Determining Application Liveness&lt;/h2&gt;
&lt;p&gt;Liveness represents whether the application is healthy. If it is determined unhealthy, the
container failing the check is restarted. As applications run for a long duration, it is essential
these checks are in place.&lt;/p&gt;
&lt;p&gt;In Kubernetes, readiness probes are configured in &lt;code&gt;spec.containers[i].livenessProbe&lt;/code&gt;. They are
nearly identical to &lt;code&gt;readinessProbe&lt;/code&gt;s, but upon failure restart the container rather than just
halting traffic. An example configuration is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;livenessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/healthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failureThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following diagram demonstrates the impact of this &lt;code&gt;livenessProbe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/liveness-probe.png&#34; alt=&#34;liveness-probe&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;startup-probes---protecting-slow-container-initialization&#34;&gt;Startup Probes - Protecting Slow Container Initialization&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Startup Probes are not enabled by default until Kubernetes 1.18.
Until then, they need to be enabled via &lt;code&gt;--feature-gates&lt;/code&gt; on the
&lt;code&gt;kube-apiserver&lt;/code&gt; and the &lt;code&gt;kubelet&lt;/code&gt; in each node.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes a &lt;code&gt;livenessProbe&lt;/code&gt; might be ideal as an ongoing check,
but not necessarily for initialization time.&lt;/p&gt;
&lt;p&gt;Some applications might require additional time during startup,
for example when warming up a cache or preparing their
data store for the first time. In these cases, the
&lt;code&gt;livenessProbe&lt;/code&gt;&amp;rsquo;s &lt;code&gt;failureThreshold&lt;/code&gt; and &lt;code&gt;periodSeconds&lt;/code&gt; settings
might turn out to be too short, and increasing them could
diminish the value of the checks through the container&amp;rsquo;s lifetime.&lt;/p&gt;
&lt;p&gt;The need for an initialization-only check is covered with
a &lt;code&gt;startupProbe&lt;/code&gt;. It can be configured with the same or a different
command, TCP, or HTTP check as your &lt;code&gt;livenessProbe&lt;/code&gt; and with longer
thresholds, long enough to cover the worst-case
scenario startup time.&lt;/p&gt;
&lt;p&gt;Our previous example could be modified to look as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;livenessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/healthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failureThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;startupProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/cache/healthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failureThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;initialDelaySeconds&lt;/code&gt; can be removed from the
&lt;code&gt;livenessProbe&lt;/code&gt; as we&amp;rsquo;re using &lt;code&gt;startupProbe&lt;/code&gt; to cover our
Pod initialization checks. In the example above, the &lt;code&gt;startupProbe&lt;/code&gt;
is allowing the container 300 seconds (&lt;code&gt;periodSeconds&lt;/code&gt; * &lt;code&gt;failureThreshold&lt;/code&gt;)
to finish its startup. It is also validating against a different
endpoint than the &lt;code&gt;livenessProbe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/app-enhancements/diagrams/startup-probe.png&#34; alt=&#34;startup probe&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;When a &lt;code&gt;startupProbe&lt;/code&gt; is defined, all other checks are disabled until it succeeds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Getting Started with Tilt</title>
      
      <link>/guides/kubernetes/dev-workflow-tilt/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/dev-workflow-tilt/</guid>
      <description>

        
        &lt;p&gt;When developing applications to be deployed on Kubernetes, additional steps are
needed during the development workflow. Source code must be packaged into a
container and deployed to a respective test environment. A common workflow is
outlined below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Save changes in code editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build and tag Docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t &amp;lt;repository_name&amp;gt;/&amp;lt;image_name&amp;gt;:&amp;lt;tag&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push Docker image to registry&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker push &amp;lt;repository_name&amp;gt;/&amp;lt;image_name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-deploy Kubernetes manifests&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl delete -f deployment.yaml
kubectl apply -f deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run commands to observe changes in test environment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl describe pod &amp;lt;pod_name&amp;gt;
kubectl logs &amp;lt;pod_name&amp;gt;
kubectl port-forward deployment/&amp;lt;deployment_name&amp;gt; 8080:8080
curl localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This workflow represents the &amp;ldquo;inner-loop&amp;rdquo; of development in a cloud-native
application. More specifically, these are actions performed many times by a
developer in between committing, merging, and testing code in a CI/CD pipeline.
The goal of Tilt is to automate the inner-loop and make the development and
debugging of cloud-native applications seamless. With Tilt configured, the
developer&amp;rsquo;s inner-loop is simplified to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save changes in code editor&lt;/li&gt;
&lt;li&gt;View logs and errors of deployed code in UI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This guide walks you through getting started with Tilt in your development
environment.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.tilt.dev/install.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tilt&lt;/a&gt; is the only binary required on your
local machine for this guide. You will also need access to a running Kubernetes
cluster. If you would like to run Kubernetes locally, VMware recommends using
&lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kind&lt;/a&gt; and
&lt;a href=&#34;https://docs.docker.com/install/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Below is an example directory structure for a &amp;ldquo;Hello World&amp;rdquo; application written
in Go. If you wish to follow along in your own environment, replicate the
following directory structure and copy the respective code to each file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hello-world/
â”‚   main.go
â”‚   Dockerfile
â”‚   deployment.yaml
â”‚   imagePullSecret.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NOTE: The following Go application is modified from the Ardanlabs &lt;a href=&#34;https://github.com/ardanlabs/service-training/tree/master/03-json&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;public
repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Source: main.go
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os/signal&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;syscall&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// ===================================================================
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// App Starting
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main : Started&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main : Completed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ===================================================================
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Start HTTP server
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;         &lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;ReadTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;WriteTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Make a channel to listen for errors coming from the listener. 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Use a buffered channel so the goroutine can exit if we don&amp;#39;t 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// collect this error.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Start the service listening for requests.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main : API listening on %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Make a channel to listen for an interrupt or terminate signal 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// from the OS. Use a buffered channel because the signal package 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// requires it.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Interrupt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SIGTERM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ===================================================================
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Shutdown
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Blocking main thread and waiting for shutdown.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serverErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error: listening and serving: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main : Start shutdown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Give outstanding requests a deadline for completion.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cancel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Asking listener to shutdown and load shed.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;s&#34;&gt;&amp;#34;main : Graceful shutdown did not complete in %v : %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;s&#34;&gt;&amp;#34;main : could not stop server gracefully : %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;message&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ResponseHandler is an HTTP Handler for returning a message.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ResponseHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;responseJson&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Marshal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error marshalling result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WriteHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusInternalServerError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;application/json; charset=utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WriteHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusOK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error writing result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Source: Dockerfile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ================&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# BUILD STAGE&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ================&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; docker.io/library/golang:1.13.5 as build&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . /app/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; go build -o /go/bin/hello-world main.go&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ================&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# RUNTIME STAGE&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ================&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; gcr.io/distroless/static&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; --from&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;build --chown&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nonroot:nonroot /go/bin/hello-world /app/hello-world&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; nonroot:nonroot&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/app/hello-world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Source: deployment.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Reference the Secret described in the .yaml found below&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;regcred &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hub.docker.com/example_repository/hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During development, you will likely use a personal or shared image repository
that Kubernetes pulls images from. The following &lt;code&gt;.yaml&lt;/code&gt; object describes an
&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;image pull secret&lt;/em&gt;&lt;/a&gt;,
which is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Secret&lt;/a&gt;
object that Kubernetes relies on to authenticate with a Docker image registry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Source: imagePullSecret.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;.dockerconfigjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;B64_ENCODED_CREDENTIALS&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;regcred&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/dockerconfigjson&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This secret object can be automatically created in Kubernetes with the following
command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl create secret docker-registry regcred &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        --docker-server&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;your-registry-server&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        --docker-username&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;your-name&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        --docker-password&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;your-pword&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        --docker-email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;your-email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;basic-tilt-configuration&#34;&gt;Basic Tilt Configuration&lt;/h2&gt;
&lt;p&gt;Configure tilt by adding the following two files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;tilt_option.json&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;default_registry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hub.docker.com/example_repository&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Tiltfile&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Import options from .json file&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tilt_option.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Configure Tilt registry from imported settings&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;default_registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default_registry&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Specify which Kubernetes object manages the in-development container image&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;k8s_yaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deployment.yaml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Specify name of the in-development container image and its build directory&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;docker_build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello-world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Specify name of k8s resource for Tilt to be aware of, and which ports should&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# be forwarded to local machine&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;k8s_resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello-world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port_forwards&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible to configure your &lt;code&gt;default_registry&lt;/code&gt; in your Tiltfile, but
VMware recommends keeping configuration in a separate file to simplify
on-boarding for developers.&lt;/p&gt;
&lt;p&gt;Your directory structure should now look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hello-world/
â”‚   main.go
â”‚   Dockerfile
â”‚   deployment.yaml
â”‚   imagePullSecret.yaml
â”‚   Tiltfile
â”‚   tilt_option.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inner-loop-after-configuring-tilt&#34;&gt;Inner-Loop After Configuring Tilt&lt;/h2&gt;
&lt;p&gt;With tilt configuration in place, run &lt;code&gt;tilt up&lt;/code&gt; to start Tilt. Once Tilt begins
running, the following will happen.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The specified Docker image will be built and tagged.&lt;/li&gt;
&lt;li&gt;The specified Kubernetes &lt;code&gt;.yaml&lt;/code&gt; file will be deployed to whichever cluster
your $KUBECONFIG specifies.&lt;/li&gt;
&lt;li&gt;The specified port-forwards will be set up on your local machine and managed
by Tilt.&lt;/li&gt;
&lt;li&gt;A text user-interface will take over the terminal in which &lt;code&gt;tilt up&lt;/code&gt; was run.
This UI will display information regarding the build and deploy processes,
logs related to your in-development container image, and relevant errors.&lt;/li&gt;
&lt;li&gt;A tab in your web browser will open with the same information described in
step 4. Use whichever display you prefer.&lt;/li&gt;
&lt;li&gt;Any changes made to files that Tilt is aware of will trigger steps 2-5 to be
performed. This is how Tilt keeps your development environment in-sync with
changes made in your local development environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For advanced usage of Tilt, refer to the &lt;a href=&#34;https://docs.tilt.dev/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;documentation.&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Troubleshooting Applications on Kubernetes</title>
      
      <link>/guides/kubernetes/dev-workflow-troubleshooting/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/dev-workflow-troubleshooting/</guid>
      <description>

        
        &lt;p&gt;This guide lists common commands and approaches to troubleshoot applications on
Kubernetes. In this guide we assume that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are familiar with &lt;code&gt;kubectl&lt;/code&gt;, the Kubernetes command-line client.&lt;/li&gt;
&lt;li&gt;You have access to the Kubernetes cluster you want to troubleshoot&lt;/li&gt;
&lt;li&gt;You are familiar with the common Kubernetes resources, such as Deployments,
Services, Pods, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a list covering some common issues and how to troubleshoot them in a Kubernetes environment.&lt;/p&gt;
&lt;h2 id=&#34;pods-showing-crashloopbackoff-status&#34;&gt;Pods showing &amp;lsquo;CrashLoopBackOff&amp;rsquo; status&lt;/h2&gt;
&lt;p&gt;This usually indicates an issue with the application. Use the &lt;code&gt;kubectl logs&lt;/code&gt;
command to get logs from the pod.&lt;/p&gt;
&lt;p&gt;If the pod has multiple containers, you first have to find the container that is
crashing.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;kubectl describe&lt;/code&gt; command on the pod to figure out which container is
crashing. The following example shows the list of containers in the &lt;code&gt;kubectl describe&lt;/code&gt; output. Notice how the &lt;code&gt;bad&lt;/code&gt; container&amp;rsquo;s last state is &lt;code&gt;Terminated&lt;/code&gt;.
This is the container that keeps crashing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Containers:
  bad:
    Container ID:  containerd://dd42e41890e04253915445...
    Image:         busybox
    Image ID:      docker.io/library/busybox@sha256:83...
    Port:          &amp;lt;none&amp;gt;
    Host Port:     &amp;lt;none&amp;gt;
    Args:
      sleep
      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
      Started:      Mon, &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 10:47:03 -0400
      Finished:     Mon, &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 10:47:04 -0400
    Ready:          False
    Restart Count:  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from 
      default-token-dfl9d &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ro&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  good:
    Container ID:   containerd://8a8ce59842cce4d8c98f...
    Image:          nginx
    Image ID:       docker.io/library/nginx@sha256:30...
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Mon, &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 10:46:14 -0400
    Ready:          True
    Restart Count:  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from 
      default-token-dfl9d &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ro&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;services-are-unreachable-or-not-available&#34;&gt;Services are unreachable or not available&lt;/h2&gt;
&lt;p&gt;As a sanity check, it is always useful to verify that the service has endpoints.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;kubectl get endpoints&lt;/code&gt; command to verify that a service has at least
one endpoint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get endpoints example
NAME      ENDPOINTS                       AGE
example   10.244.0.21:80,10.244.0.22:80   27s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the service does not have endpoints, verify the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The service&amp;rsquo;s pod selector matches the labels on the desired pods.&lt;/li&gt;
&lt;li&gt;The pods backing the service are passing their readiness probe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more in depth troubleshooting, you can utilize a dnsutil pod described &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pods-showing-pending-status&#34;&gt;Pods showing &amp;lsquo;Pending&amp;rsquo; status&lt;/h2&gt;
&lt;p&gt;If the pod is stuck in Pending state, this means that the pod cannot be
scheduled to a node. The most common cause of this issue is that there is no
node with enough resources to satisfy the pod&amp;rsquo;s resource requests.&lt;/p&gt;
&lt;p&gt;To diagnose this issue, use &lt;code&gt;kubectl describe&lt;/code&gt; and look at the events at the
bottom of the output. The following is an example that shows what to look for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe pod example
&lt;span class=&#34;c1&#34;&gt;### Output truncated for brevity&lt;/span&gt;
Events:
  Type     Reason            Age                From               Message
  ----     ------            ----               ----               -------
  Warning  FailedScheduling  17s &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x2 over 17s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  default-scheduler  0/1 nodes are available: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; Insufficient memory.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pods-showing-containercreating-status&#34;&gt;Pods showing &amp;lsquo;ContainerCreating&amp;rsquo; status&lt;/h2&gt;
&lt;p&gt;The most common causes for this issue are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Missing configmaps referenced in volume mounts&lt;/li&gt;
&lt;li&gt;Missing secrets referenced in volume mounts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To diagnose this issue, use &lt;code&gt;kubectl describe&lt;/code&gt; on the pod and look at the events
at the bottom of the output. The following is an example that shows what to look
for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe pod example
&lt;span class=&#34;c1&#34;&gt;### Output truncated for brevity&lt;/span&gt;
Events:
  Type     Reason       Age               From                         Message
  ----     ------       ----              ----                         -------
  Normal   Scheduled    10s               default-scheduler            Successfully assigned kube-system/example-796885bff7-cf7nc to kind-control-plane
  Warning  FailedMount  3s &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x5 over 10s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  kubelet, kind-control-plane  MountVolume.SetUp failed &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; volume &lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; : secret &lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pods-showing-errimagepull-pod-status&#34;&gt;Pods showing &amp;lsquo;ErrImagePull&amp;rsquo; Pod status&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;ErrImagePull&lt;/code&gt; condition means that the node is unable to pull the container
image from the container image registry (e.g. Harbor). Some potential causes of
this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The registry is unavailable or inaccessible from the node&lt;/li&gt;
&lt;li&gt;The container image does not exist in the registry&lt;/li&gt;
&lt;li&gt;The container image specified in the deployment manifest is incorrect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use the &lt;code&gt;kubectl describe&lt;/code&gt; command on the pod to troubleshoot this issue. The
events section at the bottom of the output should have useful context. The
following example shows what to look for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe pod example
&lt;span class=&#34;c1&#34;&gt;### Output truncated for brevity&lt;/span&gt;
Events:
  Type     Reason     Age   From                         Message
  ----     ------     ----  ----                         -------
  Normal   Scheduled  11s   default-scheduler            Successfully assigned kube-system/example-7cc7c59cbb-4h6cv to kind-control-plane
  Normal   Pulling    11s   kubelet, kind-control-plane  Pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;non-existent&amp;#34;&lt;/span&gt;
  Warning  Failed     10s   kubelet, kind-control-plane  Failed to pull image &lt;span class=&#34;s2&#34;&gt;&amp;#34;non-existent&amp;#34;&lt;/span&gt;: rpc error: &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Unknown &lt;span class=&#34;nv&#34;&gt;desc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; failed to pull and unpack image &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker.io/library/non-existent:latest&amp;#34;&lt;/span&gt;: failed to resolve reference &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker.io/library/non-existent:latest&amp;#34;&lt;/span&gt;: pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed
  Warning  Failed     10s   kubelet, kind-control-plane  Error: ErrImagePull
  Normal   BackOff    10s   kubelet, kind-control-plane  Back-off pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;non-existent&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;useful-commands&#34;&gt;Useful Commands&lt;/h2&gt;
&lt;p&gt;This section lists commands that are useful in day-to-day interactions with
Kubernetes:&lt;/p&gt;
&lt;h3 id=&#34;listing-resources&#34;&gt;Listing resources&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;kubectl get&lt;/code&gt; command to list resources of one or more types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get deployments,pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Specify the &lt;code&gt;wide&lt;/code&gt; output format for additional information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods -o wide
NAME                     READY   STATUS              RESTARTS   AGE   IP           NODE                 NOMINATED NODE   READINESS GATES
cassandra-0              0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          47s   &amp;lt;none&amp;gt;       kind-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
redis-5c7c978f78-wlbkn   1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          27s   10.244.0.6   kind-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the &lt;code&gt;--show-labels&lt;/code&gt; to display the labels of resources&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods --show-labels
NAME                     READY   STATUS              RESTARTS   AGE   LABELS
cassandra-0              0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          98s   &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cassandra,chart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cassandra-5.4.2,controller-revision-hash&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cassandra-6d7b4575f6,heritage&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Helm,release&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cassandra,statefulset.kubernetes.io/pod-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cassandra-0
redis-5c7c978f78-wlbkn   1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          78s   pod-template-hash&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;5c7c978f78,run&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the &lt;code&gt;yaml&lt;/code&gt; output format if you want to get the entire YAML definition of a
resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n bow get deployment vendor-abstraction -o yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;getting-application-logs&#34;&gt;Getting application logs&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;kubectl logs&lt;/code&gt; command to get application logs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n bow logs &amp;lt;pod name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To specify the container within the pod using the &lt;code&gt;-c&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n bow logs vendor-abstraction -c tag-blink-servce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--follow&lt;/code&gt; flag to follow/tail the logs.&lt;/p&gt;
&lt;h3 id=&#34;forward-local-ports-into-a-pod&#34;&gt;Forward local ports into a Pod&lt;/h3&gt;
&lt;p&gt;You can open forward local ports into the pod&amp;rsquo;s network using &lt;code&gt;kubectl port-forward&lt;/code&gt;. With this command, you essentially open a network tunnel into the
pod.&lt;/p&gt;
&lt;p&gt;For example, if you have a pod that listens on port 9090, you can forward your
local machines 8080 into the pod&amp;rsquo;s port 9090 using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n bow port-forward zuul-gateway 8080:9090
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this command is running, you can access the pod&amp;rsquo;s 9090 port via
&lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;exec-into-a-running-pod&#34;&gt;Exec into a running Pod&lt;/h3&gt;
&lt;p&gt;You can run commands within the context of your pod using &lt;code&gt;kubectl exec&lt;/code&gt;. &lt;strong&gt;Do
not use this to configure or modify application behavior at run time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, to run &lt;code&gt;ps -ef&lt;/code&gt; in a container, you would run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it example-pod -- ps -ef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;
Keep in mind that the container must have the binary you are trying to execute
(&lt;code&gt;ps&lt;/code&gt; in the above example). Otherwise, you will get an error.&lt;/p&gt;
&lt;p&gt;Use &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ephemeral Containers (alpha)&lt;/a&gt; if the binary is not available.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;get-the-documentation-of-a-specific-resource-kind&#34;&gt;Get the documentation of a specific resource kind&lt;/h3&gt;
&lt;p&gt;You can get the documentation of a specific resource kind (e.g. &lt;code&gt;Deployment&lt;/code&gt; or
&lt;code&gt;Pod&lt;/code&gt;) using &lt;code&gt;kubectl explain&lt;/code&gt;. This command will fetch the API documentation of
the resource and display it in the terminal.&lt;/p&gt;
&lt;p&gt;For example, to get the &lt;code&gt;Pod&lt;/code&gt; documentation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl explain pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can drill into specific fields within the resource. For example, to the get
pod&amp;rsquo;s &lt;code&gt;spec&lt;/code&gt; field documentation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl explain pod.spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
