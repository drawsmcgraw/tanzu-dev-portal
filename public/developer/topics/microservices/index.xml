<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VMware Tanzu Developer Center – Microservices</title>
    <link>/topics/microservices/</link>
    <description>Recent content in Microservices on VMware Tanzu Developer Center</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/topics/microservices/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      
      <title>Guides: Kubernetes Monitoring Overview</title>
      
      <link>/guides/kubernetes/observability-kubernetes-monitoring-overview/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/observability-kubernetes-monitoring-overview/</guid>
      <description>

        
        &lt;p&gt;Observability is a key element of cloud native application architectures. Most modern applications are distributed in nature, with a collection of multiple modules that communicate with each other via APIs. Anytime a problem occurs you need to be able to see when and where failures happened. And you need to measure failures to establish a profile or baseline against which deviations from normal operation can be identified and addressed. As such, monitoring, feature-rich metrics, alerting tools, and data visualization frameworks are a key element of successful cloud native applications.&lt;/p&gt;
&lt;p&gt;This guide provides an overview of monitoring tools for Kubernetes environments.&lt;/p&gt;
&lt;h2 id=&#34;how-is-monitoring-apps-on-kubernetes-different&#34;&gt;How Is Monitoring Apps on Kubernetes Different?&lt;/h2&gt;
&lt;p&gt;Containerized systems such as Kubernetes present new monitoring challenges versus virtual-machine-based compute environments. These differences include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ephemeral nature of containers&lt;/li&gt;
&lt;li&gt;An increased density of objects, services, and metrics within a given node&lt;/li&gt;
&lt;li&gt;A focus on services, rather than machines&lt;/li&gt;
&lt;li&gt;More diverse consumers of monitoring data&lt;/li&gt;
&lt;li&gt;Changes in the software development lifecycle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As monolithic apps are refactored into microservices and orchestrated with Kubernetes, requirements for monitoring those apps change. To start, instrumentation to capture application data needs to be at a container level, at scale, across thousands of endpoints. Because Kubernetes workloads are ephemeral by default and can start or stop at any time, application monitoring must be dynamic and aware of Kubernetes labels and namespaces. A consistent set of rules or alerts must be applied to all pods, new and old.&lt;/p&gt;
&lt;p&gt;Observability should always be a consideration when you’re developing new apps or refactoring existing ones. Maintaining a common layer of baseline metrics that applies to all apps and infrastructure while incorporating custom metrics is extremely desirable. Adding a new metric based on user feedback should NOT trigger a major replumb of your monitoring stack.&lt;/p&gt;
&lt;h2 id=&#34;monitoring-resource-consumption-and-preventing-infiltration&#34;&gt;Monitoring Resource Consumption and Preventing Infiltration&lt;/h2&gt;
&lt;p&gt;How can you protect your Kubernetes system from hijackers and infiltrators? Here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor cluster and network utilization&lt;/li&gt;
&lt;li&gt;Monitor for suspicious activity and analyze failed login and RBAC events&lt;/li&gt;
&lt;li&gt;Monitor configurations, such as dashboard access, for risks and vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The NIST document, &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/ir/2017/NIST.IR.8176.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Security Assurance Requirements for Linux Application Container Deployments&lt;/a&gt; sets forth security requirements and countermeasures to help meet the recommendations of the &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-190/final&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;NIST Application Container Security Guide&lt;/a&gt; when containerized applications are deployed in production environments. According to NIST, you should log and monitor resource consumption of containers to ensure availability of critical resources.&lt;/p&gt;
&lt;h3 id=&#34;security-monitoring-and-auditing&#34;&gt;Security monitoring and auditing&lt;/h3&gt;
&lt;p&gt;The proper security monitoring for your cluster depends largely on the amount of time and staffing you have to respond to alerts and keep an eye on things. As a general rule, you shouldn&amp;rsquo;t spend time building security monitoring systems that you don&amp;rsquo;t have the time to maintain and tune. Start with the real-time (alert-based) and periodic (audit review) analyst or operator workflows you want to enable, and build the monitoring platform you need to enable those workflows.&lt;/p&gt;
&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;
&lt;p&gt;The bedrock of security monitoring is logging. You should generally capture application logs, host-level logs, Kubernetes API audit logs, and cloud-provider logs (if applicable). There are well-established patterns for implementing log aggregation on common cluster configurations.&lt;/p&gt;
&lt;p&gt;Centralized logging is an essential part of any enterprise Kubernetes deployment. Configuring and maintaining a real-time high-performance central repository for log collection can ease the day-to-day operations of tracking what went wrong and its impact. Effective central logging also helps development teams quickly observe application logs to characterize application performance. Security compliance and auditing often require a company to maintain digital trails of who did what and when. In most cases, a robust logging solution is the most efficient way to satisfy these requirements&lt;/p&gt;
&lt;p&gt;For security auditing purposes, consider streaming your logs to an external location with append-only access from within your cluster. For example, on AWS, you can create an S3 bucket in an isolated AWS account and give append-only access to your cluster log aggregator. This ensures your logs cannot be tampered with, even in the case of a total cluster compromise.&lt;/p&gt;
&lt;h5 id=&#34;log-aggregation&#34;&gt;Log Aggregation&lt;/h5&gt;
&lt;p&gt;An effective log aggregator must support the processing of events from thousands of endpoints, the ability to accommodate real-time queries, and a superior analytics engine to provide intelligent metrics to solve complex technical and business problems. You have the option to implement log aggregation using a number of popular open source or commercial logging analytics solutions, such as Elasticsearch, Fluentd, Kibana, or Splunk. Each solution has a set of strengths and weaknesses.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.fluentd.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Fluentd&lt;/a&gt; is an open-source data collector for unified logging. &lt;a href=&#34;https://fluentbit.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Fluent Bit&lt;/a&gt; is a lightweight data forwarder for Fluentd. Fluentd is used to create a unified logging layer to collect and process data. Fluent Bit is for forwarding data from the edge to Fluentd aggregators. Fluentd and Fluent Bit can collect logging data and push it to an output destination, such as &lt;a href=&#34;https://www.elastic.co&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Elasticsearch&lt;/a&gt;, which is a distributed search and analytics engine that lets data engineers query unstructured, structured, and time-series data.&lt;/p&gt;
&lt;h3 id=&#34;network-monitoring&#34;&gt;Network monitoring&lt;/h3&gt;
&lt;p&gt;Network-based security monitoring tools, such as a network intrusion detection system (IDS) and web application firewalls, may work nearly out of the box, but making them work well takes some effort. The biggest hurdle is that many tools expect IP addresses to be a useful context for events. To integrate these tools with Kubernetes, consider enriching the collected events with Kubernetes &lt;code&gt;namespace&lt;/code&gt;, &lt;code&gt;pod name&lt;/code&gt;, and &lt;code&gt;pod label&lt;/code&gt; metadata. This adds valuable context to the event that you can use for alerting or manual review and can make these traditional tools even more powerful in a Kubernetes cluster than in a traditional environment. Some monitoring tools can collect Kubernetes metadata, but you can also write custom event enrichment code to add this kind of metadata integration to those that don&amp;rsquo;t.&lt;/p&gt;
&lt;h3 id=&#34;host-event-monitoring&#34;&gt;Host event monitoring&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s also possible to run a host-based IDS, such as file integrity monitoring and Linux system call logging (for example, auditd), directly with Kubernetes, but the results are hard to manage because the workload running on any particular node varies from hour to hour as applications deploy and Kubernetes orchestrates pods.&lt;/p&gt;
&lt;p&gt;To make sense of host-based events, you&amp;rsquo;ll again want to consider extending your existing tools to include Kubernetes pod or container metadata in the context of captured events. Systems such as &lt;a href=&#34;https://sysdig.com/opensource/falco/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Sysdig Falco&lt;/a&gt; include this context out of the box.&lt;/p&gt;
&lt;h3 id=&#34;prometheus-and-grafana&#34;&gt;Prometheus and Grafana&lt;/h3&gt;
&lt;p&gt;The open-source community is converging on &lt;a href=&#34;https://prometheus.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Prometheus&lt;/a&gt; as a preferred solution for Kubernetes monitoring. The ability to address evolving requirements of Kubernetes while including a rich set of language-specific client libraries gives Prometheus an advantage.&lt;/p&gt;
&lt;p&gt;Prometheus excels at monitoring multidimensional data, including time-series data, and it is hosted by the Cloud Native Computing Foundation, of which VMware is a member. &lt;a href=&#34;https://grafana.com&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Grafana&lt;/a&gt; is an open-source metrics dashboard commonly used with Prometheus to display data.&lt;/p&gt;
&lt;h3 id=&#34;wavefront&#34;&gt;Wavefront&lt;/h3&gt;
&lt;p&gt;Kubernetes can be integrated with Wavefront (VMware Tanzu Observability) to efficiently monitor containers at enterprise scale. Wavefront delivers monitoring and analytics throughout a cloud native stack for always-on metrics as a service.Wavefront gives developers and DevOps real-time visibility into the operations and performance of containerized workloads and Kubernetes clusters.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;KubeAcademy offers a course on &lt;a href=&#34;https://kube.academy/courses/introduction-to-observability&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes observability&lt;/a&gt; where you can learn more about many of the topics mentioned above. For a practical guide on how to get started with Prometheus and Grafana, be sure to read &lt;a href=&#34;/guides/kubernetes/prometheus-grafana-p1/&#34;&gt;Prometheus and Grafana: Gathering Metrics from Kubernetes&lt;/a&gt;. Spring Boot users will also want to check out &lt;a href=&#34;/guides/spring/spring-prometheus/&#34;&gt;Prometheus and Grafana: Gathering Metrics from Spring Boot on Kubernetes&lt;/a&gt; to learn how to gather metrics from Spring applications. The guides &lt;a href=&#34;/guides/microservices/distributed-tracing&#34;&gt;Implementing Distributed Tracing&lt;/a&gt; and &lt;a href=&#34;/guides/spring/spring-zipkin/&#34;&gt;Getting Started with Zipkin and Spring Boot&lt;/a&gt; can help you improve observability for microservices applications.&lt;/p&gt;
&lt;p&gt;If you’re considering Wavefront, be sure and read &lt;a href=&#34;/guides/kubernetes/monitoring-at-scale-wavefront&#34;&gt;Monitoring Containers at Scale with Wavefront&lt;/a&gt; and &lt;a href=&#34;/guides/spring/spring-wavefront-gs/&#34;&gt;Wavefront for Spring Boot: Getting Started&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Microservices Architecture?</title>
      
      <link>/guides/microservices/what-is-microservices-architecture/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/what-is-microservices-architecture/</guid>
      <description>

        
        &lt;p&gt;Microservices are a modern architectural pattern for building an application. A microservices architecture breaks up the functions of an application into a set of small, discrete, decentralized, goal-oriented processes, each of which can be independently developed, tested, deployed, replaced, and scaled.&lt;/p&gt;
&lt;h2 id=&#34;the-value-of-microservices&#34;&gt;The Value of Microservices&lt;/h2&gt;
&lt;p&gt;Because microservices are small, discrete application components linked together through lightweight, well-defined APIs, they can be linked together in various ways to create modern applications with independently scalable modules. A major advantage of this application architecture is that discrete components can be updated independently, which enables developers to efficiently deliver new features and fix issues with existing ones. The business value of this approach is clear; you can deliver new digital applications and services with greater speed and efficiency.&lt;/p&gt;
&lt;h3 id=&#34;simple-microservices-example&#34;&gt;Simple Microservices Example&lt;/h3&gt;
&lt;p&gt;Consider a three-tier app that has a front end, a middle app tier, and a database. Traditionally, this app might be deployed in three different virtual machines. In a microservices architecture, the same app is broken into multiple components. For example, the front end could be broken into separate &lt;code&gt;services&lt;/code&gt; that individually handle &lt;em&gt;login, catalog, services, feedback,&lt;/em&gt; etc.&lt;/p&gt;
&lt;p&gt;The middle tier might be broken into &lt;code&gt;services&lt;/code&gt; that handle &lt;em&gt;authorization, database connections, metering,&lt;/em&gt; etc.&lt;/p&gt;
&lt;p&gt;With this modular approach, you can push an update to the &lt;em&gt;Catalog Page&lt;/em&gt;  without having to touch or update any of the login or database functionality.&lt;/p&gt;
&lt;h3 id=&#34;key-characteristics-of-microservices&#34;&gt;Key Characteristics of Microservices&lt;/h3&gt;
&lt;p&gt;Here are some of the key technical aspects of microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Strong and clear interfaces&lt;/strong&gt; – Tight coupling between services should be avoided. Documented and versioned interfaces provide a certain degree of freedom for both the consumers and producers of services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Independently deployed and managed&lt;/strong&gt; – It should be possible for a single microservice to be updated without synchronizing with all the other services. It is also desirable to be able to roll back a version of a microservice easily. This means the binaries that are deployed must be forward and backward compatible both in terms of API and any data schemas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Built-in resilience&lt;/strong&gt; – Microservices should be built and tested to be independently resilient. If one microservice requires a response from another, it  should strive to continue working and do something reasonable in the event the other microservice is down or misbehaving. Similarly, every microservice should have defenses with respect to unanticipated load and bad inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dividing a new or existing application into the right set of microservices can be a tricky thing to get right. Natural boundaries such as languages, async queues, and scaling requirements can serve as useful dividers.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Microservices, coupled with containers, are becoming the architectural pattern of choice for developing new applications. The architecture breaks up the functions of an application into a set of small, discrete, decentralized, goal-oriented processes, each of which can be independently developed, tested, deployed, replaced, and scaled.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a video by a former Netflix architect that gives you the lowdown on using a microservices architecture for building next-generation applications.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/4ClmJxVz1SM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The guide &lt;a href=&#34;/guides/microservices/deconstructing-the-monolith/&#34;&gt;Deconstructing the Monolith&lt;/a&gt; discusses how to break a monolithic application down into microservices. After you are comfortable with the concepts, our &lt;a href=&#34;/workshops/lab-microservice/&#34;&gt;microservices workshop&lt;/a&gt; can help you get started building microservices using &lt;a href=&#34;/topics/spring&#34;&gt;Spring&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Kubernetes?</title>
      
      <link>/guides/kubernetes/what-is-kubernetes/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/what-is-kubernetes/</guid>
      <description>

        
        &lt;p&gt;Containers accelerate development pipelines by removing the need to build, test and validate application code across multiple operating systems. They also help simplify application operations by being portable across multiple hosts and cloud platforms. However, an application running in a container still needs management. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What happens if a running container has a problem or dies?&lt;/li&gt;
&lt;li&gt;How do you expose containers running on host to external/ingress traffic?&lt;/li&gt;
&lt;li&gt;How do you determine AND scale the number of containers when application workloads increase?&lt;/li&gt;
&lt;li&gt;How can you isolate two containers on the same host such that they cannot talk to each other?&lt;/li&gt;
&lt;li&gt;How do you migrate containers from one host to another for host maintenance?&lt;/li&gt;
&lt;li&gt;How can containers share common config data?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A microservices application may be spread across multiple services backed by multiple containers, increasing complexity. A platform that can orchestrate, manage and define dependencies and configs for containerized applications becomes necessary for production systems.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-kubernetes&#34;&gt;Introduction to Kubernetes&lt;/h2&gt;
&lt;p&gt;Kubernetes helps orchestrate containerized applications to run on a cluster of hosts. It&amp;rsquo;s a system that automates the deployment and management of containerized applications on a given cloud platform or on-premises infrastructure. Kubernetes manages workload distribution for containerized applications across a cluster of hosts and will dynamically roll out the container networking, routing and ingress needed for applications running in containers. It can also allocate storage and persistent volumes to running containers, provides a way to inject global config variables, implements auto-scaling, and maintains the desired state for applications.&lt;/p&gt;
&lt;p&gt;The Kubernetes API lets users define the desired end state of their applications via logical constructs like deployments, replicasets, config-maps, services etc. Kubernetes is highly extensible and portable, meaning it can run in a wide range of environments and can be used in conjunction with other technologies. There is a rapidly expanding Kubernetes ecosystem with projects that provide a wide range of different functionality.&lt;/p&gt;
&lt;p&gt;The Cloud Native Computing Foundation (CNCF) maintains an &lt;a href=&#34;https://landscape.cncf.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Interactive Landscape&lt;/a&gt; to keep track of everything going on. VMware Tanzu is an active sponsor and contributor for many &lt;a href=&#34;https://tanzu.vmware.com/open-source&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;open source projects&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;solving-container-challenges&#34;&gt;Solving Container Challenges&lt;/h2&gt;
&lt;p&gt;Kubernetes solves these challenges by automating the deployment and management of containerized applications. It manages everything necessary to optimize the use of computing resources and scales containers on demand.&lt;/p&gt;
&lt;p&gt;Kubernetes coordinates clusters of nodes to provide integration, orchestration, scaling, fault tolerance, and communications for running containers. It operates using the concept of pods, which are scheduling units that can include one or more containers and are distributed among nodes to provide high availability.&lt;/p&gt;
&lt;p&gt;In addition to scheduling deployment and automating the management of containerized applications, a key benefit of Kubernetes is that it maintains the desired state of an application as specified by an administrator. It does this using a declarative text file (YAML) that defines the desired state for a containerized application. If a container/pod dies it is automatically restarted, providing a built in level of resilience.&lt;/p&gt;
&lt;p&gt;Kubernetes uses various resource constructs to work with containers. These resources help define simple tasks such as how many instances of a container to run at all times, how to trigger auto-scaling, how to route ingress traffic to a set of container images, or how to define a &lt;a href=&#34;https://tanzu.vmware.com/content/blog/exploring-kube-apiserver-load-balancers-for-on-premises-kubernetes-clusters&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;load balancer&lt;/a&gt; to distribute traffic between multiple container images.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;If you haven’t already, check out our &lt;a href=&#34;/guides/containers/what-are-containers&#34;&gt;introduction to containers&lt;/a&gt;, and refer to the guides and resources on our &lt;a href=&#34;/topics/kubernetes/&#34;&gt;Kubernetes topic page&lt;/a&gt; to go deeper. The &lt;a href=&#34;/workshops/lab-k8s-fundamentals/&#34;&gt;Kubernetes Fundamentals workshop&lt;/a&gt; provides a quick, hands-on introduction, as well as the &lt;a href=&#34;https://kube.academy/courses/getting-started&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Getting Started with Kubernetes&lt;/a&gt; course on &lt;a href=&#34;https://kube.academy/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;KubeAcademy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After you feel comfortable with Kubernetes concepts, you can also learn about combining the Docker container platform with Kubernetes to develop &lt;a href=&#34;/topics/microservices&#34;&gt;microservices&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Creating Batch Microservices with Spring Batch</title>
      
      <link>/guides/spring/spring-batch/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-batch/</guid>
      <description>

        
        &lt;p&gt;A batch microservice is a short-lived process that launches as the result of some trigger (typically a clock), or that is executed on demand. While &lt;em&gt;batch processing&lt;/em&gt; may seem like a holdover from another era, it is still used widely for all kinds of asynchronous transaction and file processing workloads such as extract, transform, and load (ETL). Data science makes use of batch processing for the training of AI models and other asynchronous tasks.&lt;/p&gt;
&lt;p&gt;This article highlights how three Spring projects (along with Spring Boot) support building batch microservices: Spring Batch, Spring Cloud Task, and Spring Cloud Data Flow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring Batch&lt;/strong&gt; is a minimalistic framework to run batch processing applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt; Task is a wrapper allowing you to run short-lived microservices using Spring Cloud along with Spring Boot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Data Flow&lt;/strong&gt; allows you to build composed tasks orchestrating Spring Batch jobs as Spring Cloud Tasks. This allows the decomposition of a batch job into reusable parts that can be independently tested, deployed, and orchestrated at a level higher than a single job and reused in different workflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three frameworks are complementary.&lt;/p&gt;
&lt;h2 id=&#34;spring-batch&#34;&gt;Spring Batch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-batch&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Batch&lt;/a&gt; provides reusable functions that are essential in processing large volumes of records, including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management. It also provides more advanced technical services and features that will enable extremely high-volume and high-performance batch jobs through optimization and partitioning techniques. Simple as well as complex, high-volume batch jobs can leverage the framework in a highly scalable manner to process significant volumes of information.&lt;/p&gt;
&lt;p&gt;For more details, see also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/tv/spring-live/0007/&#34;&gt;Cloud Native Batch Processing&lt;/a&gt; (video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-batch/docs/current/reference/html/domain.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Domain Language of Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-cloud-task&#34;&gt;Spring Cloud Task&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-cloud-task/docs/2.3.0-M1/reference/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Task&lt;/a&gt;  supports the development of short-lived microservices. In general, these perform simple tasks on demand and then terminate. Batch applications are one example where short-lived processes are useful.&lt;/p&gt;
&lt;p&gt;Spring Cloud Task allows a user to develop and run short-lived microservices using Spring Cloud and run them locally, in the cloud, or with Spring Cloud Data Flow. Just add &lt;code&gt;@EnableTask&lt;/code&gt; and run your app as a Spring Boot app (single application context).&lt;/p&gt;
&lt;p&gt;Spring Cloud Task records the lifecycle events of a given task. The lifecycle consists of a single task execution. This is a physical execution of a Spring Boot application configured to be a task (annotated with the &lt;code&gt;@EnableTask&lt;/code&gt; annotation).&lt;/p&gt;
&lt;p&gt;Spring Cloud Task requires a SQL database, for a &lt;code&gt;TaskRepository&lt;/code&gt;, similar to the Spring Batch &lt;code&gt;JobRepository&lt;/code&gt;. The following databases are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;HSQLDB&lt;/li&gt;
&lt;li&gt;MySql&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;SqlServer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are new to Spring Cloud Task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://docs.spring.io/spring-cloud-task/docs/current/reference/#getting-started&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Getting Started&lt;/a&gt; docs.&lt;/li&gt;
&lt;li&gt;Review &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-task/tree/master/spring-cloud-task-samples&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Code Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-cloud-data-flow&#34;&gt;Spring Cloud Data Flow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-dataflow&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Data Flow&lt;/a&gt; (SCDF) supports microservice-based Streaming and Batch data processing for Cloud Foundry and Kubernetes. It provides tools to create complex topologies for streaming and batch data pipelines. The data pipelines consist of Spring Boot apps, built using the Spring Cloud Stream or Spring Cloud Task microservice frameworks. Spring Cloud Data Flow supports a range of data processing use cases, from ETL to import/export, event streaming, and predictive analytics. SCDF’s &lt;a href=&#34;https://dataflow.spring.io/docs/feature-guides/batch/scheduling/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;BatchScheduler&lt;/a&gt; supports scheduling batch jobs at a set time or in response to an event.&lt;/p&gt;
&lt;h2 id=&#34;learn-more&#34;&gt;Learn More&lt;/h2&gt;
&lt;p&gt;Along with the links in this guide, the following videos provide a good introduction to batch processing and related topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/tv/spring-live/0007/&#34;&gt;Cloud Native Batch Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/tv/springone-tour/0007/&#34;&gt;Data Processing With Spring - Day 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/tv/springone-tour/0008/&#34;&gt;Data Processing With Spring - Day 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Under the Microscope: Software Observability in a Distributed Architecture</title>
      
      <link>/blog/under-the-microscope-software-observability-in-a-distributed-architecture/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/under-the-microscope-software-observability-in-a-distributed-architecture/</guid>
      <description>

        
        &lt;p&gt;It’s the day and age of mountains of microservices, running on various platforms, consuming multiple services from multiple providers. As applications become more and more distributed, they become more complex. Even splitting a monolith into multiple smaller microservices introduces several points of failure. What happens when the two services can’t reach each other over the network? What if one service relies on the other and it crashes? What about if the application slows to a crawl; where would you start looking to figure out why?&lt;/p&gt;
&lt;p&gt;Rather than guessing and hoping, you can lean on properly instrumented &lt;a href=&#34;/patterns/observability&#34;&gt;observability&lt;/a&gt;. Being able to aggregate logs and metrics, as well as trace a request as it flows through various applications and services, is as achievable as ever. No matter your language, framework, or platform of choice, chances are you have some great options.&lt;/p&gt;
&lt;p&gt;But first, let’s talk about why you should care about observability.&lt;/p&gt;
&lt;h2 id=&#34;what-is-observability&#34;&gt;What Is Observability?&lt;/h2&gt;
&lt;p&gt;I think of observability as the ability to infer the correlation between (seemingly) disparate systems. That means bringing together metrics from many systems in a way that allows us to find answers to questions that speed up both MTTD (the mean time to detect an issue) and MTTR (the mean time to resolve an issue). By themselves, metrics such as CPU, memory, response time, error rates, and latency are valuable, but they will not pinpoint the cause of a service degradation. Bringing these metrics together, where we can quickly understand how they relate to one another, is the beginning of observability.&lt;/p&gt;
&lt;h2 id=&#34;why-is-observability-important&#34;&gt;Why Is Observability Important?&lt;/h2&gt;
&lt;p&gt;The interaction between software components is becoming more complex as infrastructure as code continues to mature. Containers, service meshes, and the use of orchestration make it increasingly difficult to troubleshoot performance issues. Being able to quickly understand how these systems are interacting without first having to define those relationships is the essence of observability.&lt;/p&gt;
&lt;p&gt;Observability also moves the understanding of performance closer to the time of deployment. Observability is central to the ideas of DevOps, SREs, declarative [insert link here] deployments, etc. With observability, we see the performance of the service in real time, at the time of deployment.&lt;/p&gt;
&lt;h2 id=&#34;how-does-observability-differ-from-traditional-monitoring&#34;&gt;How Does Observability Differ from Traditional Monitoring?&lt;/h2&gt;
&lt;p&gt;First, let’s look back to when we had the mantra of “monitor everything.” While that sounded like a good idea, without correlation, monitoring everything doesn’t increase understanding, and in fact can make it more challenging to identify what’s impacting performance.&lt;/p&gt;
&lt;p&gt;I used to lead incident response for a high-volume website. This was before containers, however, so whenever we launched a new architecture, it had a tiered architecture with web, app, and DB servers. We had everything monitored, but it wasn’t well correlated.&lt;/p&gt;
&lt;p&gt;An issue once occurred in which we noticed that the web tier was responding slowly. Historically when the web tier slowed down, a rolling restart of the app servers would resolve it. However, on this day, as the automated script kicked off the rolling restart, we watched as response time slowed to the point that the site became unresponsive. When we dove into the slew of monitoring tools, we found that our database servers were all I/O-bound. We subsequently determined that when the app servers were starting up, they were opening several pooled connections to the database and executing certain queries to cache information at the app layer. The rolling restart of the app layer was leading to resource exhaustion on the DB layer. So we DoS’d our site.&lt;/p&gt;
&lt;p&gt;Without observability, we were limited in our understanding of the underlying issue, which meant that we responded to the signal we best understood even though it was not causing the underlying problem. So, the steps we took to resolve the issue ultimately made it worse. True observability would have let us ask the question, “Where else in the system are we seeing anomalies?” That’s because while monitoring can help speed MTTD, observability can speed MTTR, by quickly correlating the signals with minimal effort.&lt;/p&gt;
&lt;p&gt;Now that we have an idea of what observability is and why it is essential, let’s walk through how to achieve it.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-achieve-observability&#34;&gt;How Do You Achieve Observability?&lt;/h2&gt;
&lt;p&gt;To achieve observability, start by instrumenting services as much as possible. Doing so is easier today than ever before. Not only are there myriad commercial products available, there are handy open source products like Prometheus, Grafana, Zipkin, and others. There is no excuse for not instrumenting your systems.&lt;/p&gt;
&lt;p&gt;Understanding the measurements in context is also critical, and requires a central place to ingest all of that telemetry, where correlation can occur. Correlating can mean different things, but at minimum you should be able to visualize data from other systems in a standard format.&lt;/p&gt;
&lt;p&gt;Finally, you need to be able to quickly interrogate this mountain of data in order to identify the cause of performance issues. This capability is central to true observability. You need to be able to ask questions and get answers in real time. If you have to define the problems ahead of time and build indices, your questions may not be relevant to the specific issue at hand.&lt;/p&gt;
&lt;p&gt;These steps assume the telemetry is flowing into a common platform, and that platform can visualize and make queries in real time. In my earlier example, all of the systems involved had some form of monitoring in place. Still, the correlation did not happen because they all flowed data to different destinations, which meant there was no one single place to discover what else might also be having an issue.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-get-started&#34;&gt;How Do You Get Started?&lt;/h2&gt;
&lt;p&gt;You have a lot of options, both open source and commercial, that you can use to achieve observability. If you’re leaning toward the open source solutions, we’ve created guides for some of our favorites. If you’re looking to get started with gathering metrics, for example, make sure to check out &lt;a href=&#34;/guides/kubernetes/observability-prometheus-grafana-p1/&#34;&gt;Prometheus and Grafana: Gathering Metrics from Kubernetes&lt;/a&gt; as well as &lt;a href=&#34;/guides/spring/spring-prometheus/&#34;&gt;Prometheus and Grafana: Gathering Metrics from Spring Boot on Kubernetes&lt;/a&gt;. If you’re more interested in tracing, we’ve published &lt;a href=&#34;/guides/spring/spring-zipkin/&#34;&gt;Getting Started with Zipkin and Spring Boot&lt;/a&gt;. While many of these guides assume you’re working with Spring Boot, they also provide a lot of great context and lay the groundwork for transferring these ideas to other languages.&lt;/p&gt;
&lt;p&gt;Finally, if you’re looking for a more all-in-one solution, check out how to &lt;a href=&#34;/blog/debugging-a-kubernetes-workload-with-octant&#34;&gt;debug Kubernetes workloads with Octant&lt;/a&gt; and learn about how you can use the free tier of &lt;a href=&#34;/guides/spring/spring-zipkin/&#34;&gt;Wavefront for Spring Boot: Getting Started&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Develop a REST API with Bitnami&#39;s Node.js and MongoDB Containers</title>
      
      <link>/guides/microservices/develop-rest-api-nodejs-mongodb-containers/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/develop-rest-api-nodejs-mongodb-containers/</guid>
      <description>

        
        &lt;p&gt;For developers building cloud-native applications and APIs for Kubernetes, Bitnami offers a variety of &lt;a href=&#34;https://bitnami.com/stacks/containers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;containers&lt;/a&gt; and &lt;a href=&#34;https://github.com/bitnami/charts/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm charts&lt;/a&gt; to ease the process. These ready-to-use assets make it easier to develop and deploy applications consistently, follow best practices and focus on code rather than infrastructure configuration. Bitnami containers and charts are also always secure, optimized and up-to-date, so you can rest assured that your applications always have access to the latest language features and security fixes.&lt;/p&gt;
&lt;p&gt;To illustrate these benefits, this two-part series will walk you through the process of developing and deploying a sample Node.js REST API locally using Bitnami containers. Then, once your API is reasonably stable or ready, it will show you how to make it available to a wider group of reviewers or users by deploying it on Kubernetes using Bitnami Helm charts.&lt;/p&gt;
&lt;p&gt;In this first part, you will create and run a sample REST API locally on your development system using the Sails framework. You will also create a local MongoDB service for API data storage, and integrate and test your REST API with this MongoDB service. To perform these tasks, you can either use your existing Node.js development environment or, if you don&amp;rsquo;t have one, you can use the following Bitnami container images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js container image&lt;/a&gt; contains the Node.js runtime together with all required dependencies and development tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/bitnami-docker-mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s MongoDB container image&lt;/a&gt; contains the official MongoDB Community binaries together with support for persistence, SSL and replica sets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assumptions-and-prerequisites&#34;&gt;Assumptions and prerequisites&lt;/h2&gt;
&lt;p&gt;This guide assumes that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have Docker installed and configured. &lt;a href=&#34;https://docs.docker.com/engine/installation/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about installing Docker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a basic understanding of Node.js and REST API concepts. Learn more about &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;REST&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-create-a-skeleton-nodejs-application&#34;&gt;Step 1: Create a skeleton Node.js application&lt;/h2&gt;
&lt;p&gt;The first step is to create a skeleton Node.js application. This article will use the Bitnami Node.js container image and the popular &lt;a href=&#34;https://sailsjs.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Sails MVC framework&lt;/a&gt;; however, there are multiple tools and methods to do this and you should feel free to use a different approach or a different framework. For example, if you already have a Node.js development environment, you can use that instead and skip the Docker commands below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Begin by creating a directory for your application and making it the current working directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir myapp
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the following Docker commands to create and start a &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Node.js container&lt;/a&gt; on your host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker create -v &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;:/app -t --net&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt; --name node bitnami/node:13
docker start node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;-v&lt;/em&gt; argument to the first command tells Docker to mount the host&amp;rsquo;s current directory into the container&amp;rsquo;s &lt;em&gt;/app&lt;/em&gt; path, so that the effects of commands run in the container are seen on the host. The &lt;em&gt;&amp;ndash;net=&amp;ldquo;host&amp;rdquo;&lt;/em&gt; parameter tells Docker to use the host&amp;rsquo;s network stack for the container. The container is named &lt;em&gt;node&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once the container is running, connect to the container console with the command below. This will give you a command shell and allow you to use the Node.js tools available in the image for subsequent tasks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it node /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Sails and then use the Sails CLI to create the scaffolding for a skeleton application. When prompted for the application type, choose an &amp;ldquo;Empty&amp;rdquo; application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm install -g sails
sails new .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the application scaffolding has been generated, start the application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sails lift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, a Sails application starts in development mode and runs at port 1337. Browse to http://DOCKER-HOST-ADDRESS:1337, where DOCKER-HOST-ADDRESS is the IP address of your host, and confirm that you see the Sails welcome page shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/sails-welcome.png&#34; alt=&#34;Sails default page&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exit the container console. This will terminate the Sails application process, although the container will continue to run in the background.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-2-create-and-start-a-local-mongodb-service&#34;&gt;Step 2: Create and start a local MongoDB service&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mongodb.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MongoDB&lt;/a&gt; is a scalable and popular data storage accompaniment for Node.js applications. &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s MongoDB image&lt;/a&gt; makes it easy to create a local MongoDB service which can be used to store, retrieve and modify data related to your REST API. Alternatively, if you already have the MongoDB server and a MongoDB database on your host, you can use that instead and skip the Docker commands below.&lt;/p&gt;
&lt;p&gt;Create and start a MongoDB database service using the &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami MongoDB container&lt;/a&gt; on your host.  If you wish, you can replace the database credentials and other variables shown below with your own values, but make a note of them as you will need them in the next step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker create -e &lt;span class=&#34;nv&#34;&gt;MONGODB_USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp -e &lt;span class=&#34;nv&#34;&gt;MONGODB_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp -e &lt;span class=&#34;nv&#34;&gt;MONGODB_DATABASE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mydb -e &lt;span class=&#34;nv&#34;&gt;MONGODB_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root --net&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt; --name mongodb bitnami/mongodb
docker start mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The environment variables passed to the first command set the administrator password for the MongoDB instance and also create a new database named &lt;em&gt;mydb&lt;/em&gt; with corresponding user credentials. This database will be used to store data for the REST API. As before, the &lt;em&gt;&amp;ndash;net=&amp;ldquo;host&amp;rdquo;&lt;/em&gt; parameter tells Docker to use the host&amp;rsquo;s network stack for this container as well. The container is named &lt;em&gt;mongodb&lt;/em&gt; and, once started, the MongoDB service will be available on the Docker host at port 27017.&lt;/p&gt;
&lt;h2 id=&#34;step-3-create-and-configure-a-rest-api-endpoint&#34;&gt;Step 3: Create and configure a REST API endpoint&lt;/h2&gt;
&lt;p&gt;At this point, you have a skeleton Node.js application and a MongoDB database service. You can now start creating your REST API. As before, if you&amp;rsquo;re using an existing Node.js development environment, skip the Docker commands below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Connect to the container console again with the command below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it node /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sails comes with a built-in &lt;a href=&#34;https://sailsjs.com/documentation/concepts/extending-sails/generators/available-generators&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;generator for API endpoints&lt;/a&gt;. Use this to generate the scaffolding for a new sample REST API endpoint for Item objects. By default, this endpoint will be exposed at the &lt;em&gt;/item&lt;/em&gt; URI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sails generate api item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the MongoDB adapter for Sails:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm install sails-mongo --save  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Exit the Docker container once the installation is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the &lt;a href=&#34;https://sailsjs.com/documentation/tutorials/using-mongo-db&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;steps outlined in the Sails documentation to configure the generated application to use MongoDB&lt;/a&gt; for data storage. First, edit the &lt;em&gt;myapp/config/datastores.js&lt;/em&gt; file and modify the default data store entry as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;adapter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sails-mongo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mongodb://myapp:myapp@localhost/mydb&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you used different values when creating the MongoDB container, or if you&amp;rsquo;re using a different MongoDB installation, remember to replace the values shown above as needed.&lt;/p&gt;
&lt;p&gt;Then, update the &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;migrate&lt;/em&gt; attributes in the &lt;em&gt;myapp/config/models.js&lt;/em&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;migrate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;alter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;columnName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a data model for the REST API Item object. For this article, use a simple model with just two attributes: a &lt;em&gt;name&lt;/em&gt; and a &lt;em&gt;quantity&lt;/em&gt;. Edit the &lt;em&gt;myapp/api/models/Item.js&lt;/em&gt; and update it to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;attributes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;quantity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect to the container console again. Start the application and put it in the background:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it node /bin/bash
sails lift &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Exit the Docker container once the application starts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As before, the application will start in development mode and become available at port 1337 of the host.&lt;/p&gt;
&lt;h2 id=&#34;step-4-test-the-rest-api&#34;&gt;Step 4: Test the REST API&lt;/h2&gt;
&lt;p&gt;Your REST API is now active and configured to use MongoDB. You can now proceed to test it from your host, by sending it various types of HTTP requests and inspecting the responses. If you&amp;rsquo;re using the Bitnami containers, remember that they are using the host&amp;rsquo;s network stack and so will be available at ports 1337 (Node.js) and 27017 (MongoDB) respectively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At the host console, send a POST request to the API using &lt;em&gt;curl&lt;/em&gt; to create a new item record:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -X POST -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;milk&amp;#34;,&amp;#34;quantity&amp;#34;:&amp;#34;10&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:1337/item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/api-post.png&#34; alt=&#34;POST request&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the item record was created with a GET request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://localhost:1337/item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/api-get.png&#34; alt=&#34;GET request&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;You can also connect to the running MongoDB container and use the &lt;em&gt;mongo&lt;/em&gt; CLI to see the data in the MongoDB database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it mongodb /bin/bash
mongo --authenticationDatabase mydb -u myapp -p myapp mydb --eval &lt;span class=&#34;s2&#34;&gt;&amp;#34;db.item.find()&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/db-get.png&#34; alt=&#34;Database check&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the item record with a PUT request. Replace the ID placeholder in the command below with the document&amp;rsquo;s unique identifier from the previous commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -X PUT -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;milk&amp;#34;,&amp;#34;quantity&amp;#34;:&amp;#34;5&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:1337/item/ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/api-put.png&#34; alt=&#34;PUT request&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the item record with a DELETE request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -X DELETE http://localhost:1337/item/ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/api-delete.png&#34; alt=&#34;DELETE request&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;You can also connect to the running MongoDB container and use the &lt;em&gt;mongo&lt;/em&gt; CLI to confirm that the data has been deleted from the MongoDB database:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it mongodb /bin/bash
mongo --authenticationDatabase mydb -u myapp -p myapp mydb --eval &lt;span class=&#34;s2&#34;&gt;&amp;#34;db.item.count()&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/develop-rest-api-nodejs-mongodb-containers/db-delete.png&#34; alt=&#34;Database check&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, you have a working Node.js REST API integrated with a MongoDB database. However, it&amp;rsquo;s currently only available on your local machine and only while the containers are running. This is fine for local development, but becomes a bottleneck when you want to make it available to others for review and testing.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s where the &lt;a href=&#34;/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/&#34;&gt;second part of this series&lt;/a&gt; comes in. Continue adding features to your API and once you&amp;rsquo;re happy with it, proceed to the concluding article and learn how to make your REST API available to a larger group by containerizing it, deploying it on Kubernetes and connecting it to a MongoDB service also running on Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful links&lt;/h2&gt;
&lt;p&gt;To learn more about the topics discussed in this article, use the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js container image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/bitnami-docker-mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s MongoDB container image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sailsjs.com/documentation/reference&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Sails documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MongoDB documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Basics of REST</title>
      
      <link>/guides/microservices/basics-of-rest/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/basics-of-rest/</guid>
      <description>

        
        &lt;p&gt;So what is &lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;REST&lt;/a&gt;? At a high level REST, or REpresentational State Transfer, is an architectural style for distributed hypermedia systems. It was created from a combination of other architectural styles and enlists several constraints. Roy Fielding, its creator, said that &amp;ldquo;REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This guide will cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST HTTP requests&lt;/li&gt;
&lt;li&gt;REST HTTP responses&lt;/li&gt;
&lt;li&gt;Constraints needed for an API to be RESTful&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;requests&#34;&gt;Requests&lt;/h2&gt;
&lt;p&gt;The client has to make a request to the server to get or modify data on the server. A request contains the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP verb&lt;/li&gt;
&lt;li&gt;headers&lt;/li&gt;
&lt;li&gt;path: to a resource&lt;/li&gt;
&lt;li&gt;[optional] message body: data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider the example of a todo list. An example request could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /todos
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;http-methodsverbs&#34;&gt;HTTP Methods/Verbs&lt;/h3&gt;
&lt;p&gt;HTTP methods, or verbs, define what kind of operation to perform on a resource. Some of the primary ones used with RESTful APIs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;: get a resource or collection of resources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;: create a new resource&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;: update a resource&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;: partially modify a resource&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;: delete a resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-headers&#34;&gt;HTTP Headers&lt;/h3&gt;
&lt;p&gt;The client uses headers to pass along request information to the server. Requests can have an &lt;code&gt;Accept&lt;/code&gt; request HTTP header which specifies what content type the client can accept from the server. The values are of the media, or &lt;a href=&#34;https://www.iana.org/assignments/media-types/media-types.xhtml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MIME type&lt;/a&gt;. The simplest MIME types are of the format &lt;code&gt;type/subtype&lt;/code&gt;. For example, this could be &lt;code&gt;text/html&lt;/code&gt; which is for a text file containing HTML. Or &lt;code&gt;application/json&lt;/code&gt; for a JSON file. To see a list of common &lt;code&gt;Accept&lt;/code&gt; values check out the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;path&#34;&gt;Path&lt;/h3&gt;
&lt;p&gt;Requests need to contain a path to the resource it is trying to perform the HTTP request on. In the above example, that is &lt;code&gt;/todos&lt;/code&gt;. This is the resource that you are looking to read from or write to.&lt;/p&gt;
&lt;p&gt;One important thing to note is the difference between addressing a collection and an individual item in that collection. The path &lt;code&gt;/todos&lt;/code&gt; would be addressing all of the items on the todo list. A &lt;code&gt;POST&lt;/code&gt; to this path could create a new item on that list, and a request to &lt;code&gt;GET /todos&lt;/code&gt; would return all items. On the other hand, &lt;code&gt;GET /todos/2&lt;/code&gt; would return just the second item on the todo list.&lt;/p&gt;
&lt;h2 id=&#34;response&#34;&gt;Response&lt;/h2&gt;
&lt;p&gt;After the client sends a request to the server, the server sends a response back to the client. This response consists of a:
status code
headers
message body: data&lt;/p&gt;
&lt;p&gt;For the previous request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /todos
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The response could contain the following for a successful request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pay rent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;due&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1589031653&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get groceries&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;due&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1588869295&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;http-headers-1&#34;&gt;HTTP Headers&lt;/h3&gt;
&lt;p&gt;The responses have a &lt;code&gt;Content-Type&lt;/code&gt; entity header which specifies the MIME type of the resource. Its value should match one of the &lt;code&gt;Accept&lt;/code&gt; types sent by the client. In the above example, both the &lt;code&gt;Content-Type&lt;/code&gt; and &lt;code&gt;Accept&lt;/code&gt; header values are &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Headers can contain information on a wide array of topics including how to handle the TCP connection, authentication, caching, and more. Some REST APIs may have headers specific to them, but there’s also some headers that have a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;universal definition&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;response-status-code&#34;&gt;Response Status Code&lt;/h3&gt;
&lt;p&gt;One of the return values in a response is a response status code. Each code has a specific designation; for example, &lt;code&gt;200&lt;/code&gt; is &lt;code&gt;OK&lt;/code&gt; and means the request was successful. The response code categories are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1XX&lt;/code&gt;: Informational&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2XX&lt;/code&gt;: Successful&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3XX&lt;/code&gt;: Redirects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4XX&lt;/code&gt;: Client Errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5XX&lt;/code&gt;: Server Errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see the detailed list of response codes and their meaning, check out the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;body&#34;&gt;Body&lt;/h3&gt;
&lt;p&gt;The body contains the data the client requested in the MIME type specified in the &lt;code&gt;Content-Type&lt;/code&gt; header. In the example above, the body of the response is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pay rent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;due&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1589031653&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get groceries&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;due&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1588869295&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;completed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;p&gt;In order to create RESTful APIs, they need to adhere to six style constraints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client-Server Separation&lt;/li&gt;
&lt;li&gt;Stateless&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Uniform Interface&lt;/li&gt;
&lt;li&gt;Layered System&lt;/li&gt;
&lt;li&gt;[Optional] Code-On-Demand&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;client-server&#34;&gt;Client-Server&lt;/h3&gt;
&lt;p&gt;First, there needs to be a separation of client and server. This means that the client and server each need to work independent of each other. Their only form of interaction is when a client makes requests and a server sends a response whenever it receives a request. One of the benefits is that the client and server can each be updated or modified independently without affecting the other.&lt;/p&gt;
&lt;p&gt;For example, if you make a call to a restaurant to place a takeout order, the only interaction is you asking for a specific item and them responding with an ok or saying they don’t have it.&lt;/p&gt;
&lt;h3 id=&#34;stateless&#34;&gt;Stateless&lt;/h3&gt;
&lt;p&gt;Next, the client and server communication needs to be stateless: the server and client don&amp;rsquo;t need to know the state of the other. The server doesn&amp;rsquo;t store state from the client and therefore the client can&amp;rsquo;t depend on it. Therefore the client needs to send everything the server would need to process a request every time and any storing needs to happen client-side.&lt;/p&gt;
&lt;p&gt;To continue with the analogy, when you make your call, you don’t need to know what the restaurant has in stock, and they don’t need to know what you want until you order. Additionally, you’re responsible for keeping track of what you like to order, not the restaurant.&lt;/p&gt;
&lt;h3 id=&#34;cache&#34;&gt;Cache&lt;/h3&gt;
&lt;p&gt;Cache constraints require that the response be labeled as cacheable or non-cacheable. If it&amp;rsquo;s cacheable, then the client can choose to use this data for future requests that are equivalent. For instance, if the data is valid for a set time, the cached data will be used instead of making a request to the server.&lt;/p&gt;
&lt;p&gt;For your takeout call, the restaurant may tell you that a specific item is not available until a certain date. You can then remember to not order it again if you make another request before that date.&lt;/p&gt;
&lt;h3 id=&#34;uniform-interface&#34;&gt;Uniform Interface&lt;/h3&gt;
&lt;p&gt;As mentioned, the client and server are independent of each other, meaning they evolve and change independently. For this reason, it’s imperative that the interface between the client and server expect some commonality in their communication. This constraint can actually be broken down even further:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Resource-Based&lt;/strong&gt;: This is two-fold: First, individual resources should be identifiable in the request. Often this is done in the path of the URI of the request. For example, &lt;code&gt;/todos/2&lt;/code&gt; would directly address the &lt;code&gt;todo&lt;/code&gt; item with the ID of &lt;code&gt;2&lt;/code&gt;. Second, the presentation of the resource does not necessarily need to match the internal representation by the server. The &lt;code&gt;todo&lt;/code&gt; item may be returned as JSON, but more realistically the server is storing this in a database in another format.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manipulate Resources Through Representations&lt;/strong&gt;: When the client receives a resource, the representation of that resource contains enough information to update or delete it. This could be seen as the flip-side of the “stateless” constraint. Using the same example of a todo list, if a client requests all items in a todo list, each of those items would likely include an ID so that it could be individually addressed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-Descriptive Messages&lt;/strong&gt;: Each message or resource should include enough information so that the client knows how to process that message. For example, if a client has requested a resource that’s returned as JSON, the response should also include a &lt;code&gt;Content-Type&lt;/code&gt; header with the value &lt;code&gt;application/json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hypermedia as the Engine of Application Sate&lt;/strong&gt;: AKA &lt;a href=&#34;https://en.wikipedia.org/wiki/HATEOAS&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;“HATEOAS”&lt;/a&gt;. This could be a whole conversation on it’s own, and it’s encouraged to read on this topic as well, but in short each response should include related links that the client can use to discover other actions and resources. Continuing the ToDo example, requesting an individual todo item may include links to the list that it is a part of.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;layered-system&#34;&gt;Layered System&lt;/h3&gt;
&lt;p&gt;Layered system constraints are used to scope hierarchical layers based on behavior and have each layer be unable to have visibility past the layer it is interacting with. That’s to say, a client may send a request to a server, which in turn may send a request to a data service, which sends a request to an authentication service. All of this is invisible to the client and the client can not and should not distinguish between a direct request to the data or one that has multiple requests server-side. This is also true for infrastructure and operational components such as proxies and load balancers. Introducing these components to the server architecture should require no updates from the client.&lt;/p&gt;
&lt;h2 id=&#34;optional-code-on-demand&#34;&gt;[Optional] Code-On-Demand&lt;/h2&gt;
&lt;p&gt;This constraint states that a server can extend the functionality of a client by providing it executable code. Probably the most common example of this is client-side scripting with JavaScript, but this can take many forms. While this keeps clients simpler and smaller, it also reduces visibility of features and can introduce ambiguity. Because of this, while the absence of other constraints may mean a service isn’t actually RESTful, this constraint is optional.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, this is the end of this coverage of the basics of REST. Reading Roy Fielding&amp;rsquo;s REST &lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;dissertation&lt;/a&gt; is a great place to start if you haven&amp;rsquo;t already. If you’d like to start building your own REST APIs and are a Spring developer, be sure to check out &lt;a href=&#34;/guides/spring/spring-build-api&#34;&gt;Building a REST API with Spring Boot&lt;/a&gt; to see these principles in action!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Building an API with Spring Boot</title>
      
      <link>/guides/spring/spring-build-api/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-build-api/</guid>
      <description>

        
        &lt;p&gt;Spring Boot is a framework built on top of Spring that focuses on allowing developers to quickly but safely build applications and microservices. It focuses on minimal configuration and “out-of-the-box” functionality. In just a few lines of code, a developer can have an application running on its own embedded web server. This guide will demonstrate how you can quickly build a microservice by building a REST API from scratch. You can also see the completed code &lt;a href=&#34;https://github.com/BrianMMcClain/spring-boot-api-demo&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-design&#34;&gt;The Design&lt;/h2&gt;
&lt;p&gt;For this example, you’ll build an API to interact with an inventory system. The inventory tracks every item in a fictitious shop, along with the price and count of each item. Before writing the code, take a few moments to consider the design of the API. The design is, after all, the user experience for the developer, and ensuring it’s clear and simple is just as important as it is when building a frontend user interface.&lt;/p&gt;
&lt;p&gt;If you’re familiar with the basics of REST, much of this should look pretty much as you would expect. If you’re a bit newer, or just want a refresher, make sure to check out &lt;a href=&#34;/guides/microservices/basics-of-rest&#34;&gt;Basics of REST&lt;/a&gt;, which discusses different aspects of REST such as verbs, status codes, and more. For this API, there will be just a handful of endpoints and verbs supported.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /items/{id}&lt;/code&gt;:  The endpoint that likely first comes to mind is getting information about an item in the inventory. This endpoint will take in an item ID (for example, &lt;code&gt;/items/1&lt;/code&gt;), look it up by that ID, and return all the relevant information about that specific item.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /items&lt;/code&gt;: If providing an ID returns one item, explicitly omitting an ID could return &lt;em&gt;all&lt;/em&gt; items. In a production application, a lot of care should be taken when implementing operations that return an entire database worth of content. It’s expensive to both gather that information from the database as well as transmit it to the requester. In this case, the database will only contain a few items, so it’s not too expensive to perform.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /items&lt;/code&gt;: If you can get items from the inventory, you should probably also be able to create new items in the inventory. Here’s where proper and clear documentation really helps your developer,.as the existence of this endpoint alone does not tell them what they need to provide. In this case, the endpoint will take in a JSON object, and expect an item’s  name, price, and count. The API will handle generating an ID for the new item.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /items/{id}&lt;/code&gt;: An inventory system would be pretty useless if you couldn’t change the price or count of any of the items. In this case, the endpoint expects a JSON object containing either the price, count, or both.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /items/{id}&lt;/code&gt;: Not every product is carried forever. You could simply keep the count at zero, but to keep the inventory clean, deleting it from the database will prove to be useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all of the endpoints planned out, we can now begin implementation!&lt;/p&gt;
&lt;h2 id=&#34;building-the-application&#34;&gt;Building the Application&lt;/h2&gt;
&lt;p&gt;One of the easiest ways to start a Spring Boot application is to use &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;start.spring.io&lt;/a&gt;. It will allow you to define the configuration and choose the dependencies specific to your application, then generate all of the boilerplate that surrounds a Spring application. This application assumes that it will be built and run with &lt;a href=&#34;http://maven.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Maven&lt;/a&gt; as well as the default choice of Java and Spring Boot version. What you choose for the group, artifact, name, and description fields doesn’t matter; what does matter is that you add the &lt;strong&gt;Spring Web&lt;/strong&gt; dependency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/screenshots/spring-build-api-01.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Once everything is configured, click &lt;strong&gt;Generate&lt;/strong&gt; to download a ZIP file containing all of the code for your new project. Extract it and open it with your editor of choice, and you’ll find a handful of files. Most of these will be untouched since all of the code will be added to new files, but it’s important to see what’s generated out of the box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/screenshots/spring-build-api-02.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Notably, the &lt;code&gt;pom.xml&lt;/code&gt; file contains all of the configuration on what dependencies your code requires, as well as configuration on how to build it. &lt;code&gt;SpringBootApiDemo.java&lt;/code&gt; is where your application will start; it contains the code to start everything a Spring application needs. In this example, you’ll be creating two files: one to define the Item object, and one to build the REST API.&lt;/p&gt;
&lt;h3 id=&#34;the-item-object&#34;&gt;The Item Object&lt;/h3&gt;
&lt;p&gt;The best place to start is by defining what an Item is. In the same directory as the &lt;code&gt;SpringBootApiDemo.java&lt;/code&gt; file, create a new file named &lt;code&gt;Item.java&lt;/code&gt;. Consider the code below for what this definition looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
 
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getPrice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setPrice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
 
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;None of this code is specific to Spring, and in fact if you’re a Java developer, this is probably even routine. This code creates a new class with four fields (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;price&lt;/code&gt;, and &lt;code&gt;count&lt;/code&gt;), a constructor, and a handful of getters and setters. Since the item ID and name will never be changed, only the price and count have setters.&lt;/p&gt;
&lt;h3 id=&#34;the-rest-api&#34;&gt;The REST API&lt;/h3&gt;
&lt;p&gt;Now it’s time to build the API. In the same directory you’ve created the &lt;code&gt;Item.java&lt;/code&gt; file, create one more file named &lt;code&gt;InventoryController.java&lt;/code&gt;. This is the class that will be what’s referred to in Spring as a &lt;code&gt;RestController&lt;/code&gt;. In fact, that’s the exact annotation you’ll add to your class to tell Spring that this is a &lt;code&gt;RestController&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InventoryController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before you can get into the API code, there’s one last thing you need to handle, and that’s how all of the items in the inventory are tracked. In a real application, this would mean connecting to a database as well as writing code to write to and read from that database. There are actually some great solutions provided by Spring for this as well, and if you’re interested in learning more, one great place to start is to read about &lt;a href=&#34;https://spring.io/projects/spring-data-jpa&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring JPA&lt;/a&gt;. But, for the sake of simplicity, with this example the inventory is managed in-memory in an &lt;code&gt;ArrayList&lt;/code&gt; collection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Keyboard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Mouse&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Monitor&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;79&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;PC&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;749&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Headphones&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To prevent writing the same code to look up items by ID over and over, there’s one helper method you can put together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Search the list of items for the item of interest.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// If the item does not exist, return null;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()))&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findAny&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orElse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code uses the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Java Stream interface&lt;/a&gt; to iterate over all the items in the &lt;code&gt;ArrayList&lt;/code&gt;, returning the &lt;code&gt;Item&lt;/code&gt; that it matches by the ID. If no item with the given ID is found, it instead returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-all-of-the-items&#34;&gt;Get All Of The Items&lt;/h3&gt;
&lt;p&gt;With this helper code complete, it’s time to start building the actual API! Since there’s already a collection of items in an inventory, why not start by implementing the &lt;code&gt;GET /items&lt;/code&gt; endpoint to get all of the items?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getInventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Spring Boot will handle the serialization of the ArrayList
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// to a JSON array, so we can return the list directly.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two things to note here.. First, this code explicitly tells Spring that it’s the code to run when a &lt;code&gt;GET&lt;/code&gt; request is sent to &lt;code&gt;/items&lt;/code&gt; by annotating this method with &lt;code&gt;@GetMapping(“/items”)&lt;/code&gt;. Second, you’ll notice there’s no code to serialize the &lt;code&gt;ArrayList&lt;/code&gt; that is our inventory. Spring will see that it’s an &lt;code&gt;ArrayList&lt;/code&gt; of &lt;code&gt;Item&lt;/code&gt; object, inspect all of the fields that are defined in an &lt;code&gt;Item&lt;/code&gt;, and then send a response containing a JSON array. This code alone is enough to start sending requests and getting responses if you’d like to see it in action for yourself. Since this code was generated with Maven in mind, it can be run with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./mvnw spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a few moments, the application will be up and running, and you can try out the new endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:8080/items

[{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Keyboard&amp;quot;,&amp;quot;price&amp;quot;:29.99,&amp;quot;count&amp;quot;:76},{&amp;quot;id&amp;quot;:2,&amp;quot;name&amp;quot;:&amp;quot;Mouse&amp;quot;,&amp;quot;price&amp;quot;:19.99,&amp;quot;count&amp;quot;:43},{&amp;quot;id&amp;quot;:3,&amp;quot;name&amp;quot;:&amp;quot;Monitor&amp;quot;,&amp;quot;price&amp;quot;:79.99,&amp;quot;count&amp;quot;:7},{&amp;quot;id&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;PC&amp;quot;,&amp;quot;price&amp;quot;:749.99,&amp;quot;count&amp;quot;:2},{&amp;quot;id&amp;quot;:5,&amp;quot;name&amp;quot;:&amp;quot;Headphones&amp;quot;,&amp;quot;price&amp;quot;:19.99,&amp;quot;count&amp;quot;:14}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Congratulations! You’ve just built your first REST endpoint using Spring Boot! There’s a few more to implement, but luckily you’ll see the more complicated endpoints aren’t much harder than this one.&lt;/p&gt;
&lt;h3 id=&#34;get-an-individual-item&#34;&gt;Get An Individual Item&lt;/h3&gt;
&lt;p&gt;Next, take a look at the &lt;code&gt;GET /items/{id}&lt;/code&gt; endpoint. This endpoint will return a single item if it exists, or a &lt;code&gt;404&lt;/code&gt; if it does not exist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If the item does not exist, return 404
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResponseStatusException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Item Not Found&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much like the previous endpoint, note the &lt;code&gt;@GetMapping&lt;/code&gt; annotation, this time with a templated piece in the path (&lt;code&gt;{id}&lt;/code&gt;). This is mapped to an argument in the Java method using one more annotation, &lt;code&gt;@PathVariable(“id”) Long id&lt;/code&gt;, which is how Spring will match up the variable data in the request path to the variable in the code. After that, it will call the handy &lt;code&gt;findItem&lt;/code&gt; helper method defined previously to look up the ID that the user provides. If the item that’s returned is &lt;code&gt;null&lt;/code&gt;, then the code will return &lt;code&gt;404&lt;/code&gt; by throwing a &lt;code&gt;ResponseStatusException&lt;/code&gt;. Otherwise, the code returns an &lt;code&gt;Item&lt;/code&gt; object directly. Much like in the previous endpoint, Spring will observe the fields of the &lt;code&gt;Item&lt;/code&gt; class to figure out how to serialize it and send the response as a JSON object. Try restarting your code and trying the request out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:8080/items/1

{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Keyboard&amp;quot;,&amp;quot;price&amp;quot;:29.99,&amp;quot;count&amp;quot;:76}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;creating-a-new-item&#34;&gt;Creating A New Item&lt;/h3&gt;
&lt;p&gt;So, now you can get the items from the inventory. But what if you want to add a new item? You’ll need some information from the developer, such as the item name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@PostMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;CREATED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@RequestBody&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Since item IDs cannot be changed, generated a new ID, create a new item, add it to the
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// inventory, and then return the new item.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPrice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a &lt;code&gt;GET&lt;/code&gt; request uses the &lt;code&gt;@GetMapping&lt;/code&gt; annotation, then a &lt;code&gt;POST&lt;/code&gt; request uses the &lt;code&gt;@PostMappint&lt;/code&gt; annotation. Since this is responding to a different HTTP verb, there’s no issue mapping to the same path that was mapped to earlier. There’s one new annotation for the method arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RequestBody Item req
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;@RequestBody&lt;/code&gt; annotation tells Spring that we want to load the body of the &lt;code&gt;POST&lt;/code&gt; request into the &lt;code&gt;req&lt;/code&gt; variable, and that it should expect an object that can be deserialized to an &lt;code&gt;Item&lt;/code&gt; object. This is another nice feature of Spring, where this translation between JSON and Java objects is automatically handled for you. The rest of the code creates a new &lt;code&gt;Item&lt;/code&gt; (since IDs cannot be changed), saves it to the inventory, and returns the newly created object. Once again, restart your application and give it a try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -XPOST http://localhost:8080/items -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;Speakers&amp;quot;, &amp;quot;price&amp;quot;: 49.99, &amp;quot;count&amp;quot;: 30}&#39;

{&amp;quot;id&amp;quot;:6,&amp;quot;name&amp;quot;:&amp;quot;Speakers&amp;quot;,&amp;quot;price&amp;quot;:49.99,&amp;quot;count&amp;quot;:30}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This &lt;code&gt;cURL&lt;/code&gt; request specifically sets the &lt;code&gt;Content-Type&lt;/code&gt; header to let our application know that it’s being sent JSON, so make sure your client of choice is doing the same.&lt;/p&gt;
&lt;h3 id=&#34;update-an-existing-item&#34;&gt;Update An Existing Item&lt;/h3&gt;
&lt;p&gt;What good is an inventory system that can’t update the count of an item in an inventory? Take a look at the &lt;code&gt;PUT /items/{id}&lt;/code&gt; method. Unlike the &lt;code&gt;POST&lt;/code&gt; request, this &lt;code&gt;PUT&lt;/code&gt; request tells our REST API that we want to update an existing item:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@PutMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;updateItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@RequestBody&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If the item does not exist, return 404
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResponseStatusException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Item Not Found&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Item exists, so update an existing one
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// Iterate over the POSTed JSON fields
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// Update the items price if a price field is provided
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPrice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parseDouble&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// Update the items count if a count field is provided
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Return the updated item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you might have guessed, since this is responding to a &lt;code&gt;PUT&lt;/code&gt; call, this method has the &lt;code&gt;@PutMapping(“/items/{id}&lt;/code&gt; annotation. The arguments for this method also combine what we’ve seen in two different endpoints, with the &lt;code&gt;@PathVariable&lt;/code&gt; annotation pulling the &lt;code&gt;id&lt;/code&gt; from the request path, and the &lt;code&gt;@RequestBody&lt;/code&gt; annotation pulling the request body. You’ll also notice that the request body is being read as a &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; this time. You could also read this as an &lt;code&gt;Item&lt;/code&gt; object, but remember that you don’t know if the request will define a price, a count, or both. Instead, Spring will read in the JSON as a &lt;code&gt;Map&lt;/code&gt;, with both keys and values of type &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with the item lookup, if the item doesn’t even exist, a &lt;code&gt;404&lt;/code&gt; is returned. Otherwise, the code will inspect each key of the &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; object, and if it finds a key of either &lt;code&gt;price&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt;, it will update the item that it looked up using the &lt;code&gt;id&lt;/code&gt; provided in the request path. Finally, the newly updated item is returned back to the requester. Give it a try for yourself by getting an item, updating, and getting it again to make sure the changes took place:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8080/items/1
{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Keyboard&amp;quot;,&amp;quot;price&amp;quot;:29.99,&amp;quot;count&amp;quot;:76}

$ curl -XPUT http://localhost:8080/items/1 -d &#39;{&amp;quot;count&amp;quot;: 175, &amp;quot;price&amp;quot;: 27.99}&#39; -H &amp;quot;Content-Type: application/json&amp;quot;
{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Keyboard&amp;quot;,&amp;quot;price&amp;quot;:27.99,&amp;quot;count&amp;quot;:175}

$ curl http://localhost:8080/items/1
{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;Keyboard&amp;quot;,&amp;quot;price&amp;quot;:27.99,&amp;quot;count&amp;quot;:175}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;deleting-an-item&#34;&gt;Deleting An Item&lt;/h3&gt;
&lt;p&gt;All that remains is the &lt;code&gt;DELETE /items/{id}&lt;/code&gt; endpoint. This code is actually a bit simpler, as you’ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@DeleteMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deleteItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PathVariable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If the item does not exist, return 404
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResponseStatusException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Item Not Found&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If the item exists, delete it from the list
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Continuing the trend, this method has the &lt;code&gt;@DeleteMapping(“/items/{id}”)&lt;/code&gt; annotation, and maps the &lt;code&gt;id&lt;/code&gt; variable in the request path to the &lt;code&gt;id&lt;/code&gt; variable in the method arguments. It looks up the item and returns &lt;code&gt;404&lt;/code&gt; if it doesn’t exist, and if it does, it deletes it from the inventory. One slight difference is that this method doesn’t return anything. By default, if a method in a &lt;code&gt;RestController&lt;/code&gt; doesn’t have a return type, the HTTP request will return a &lt;code&gt;200&lt;/code&gt; status code and an empty body. Give this a shot and see the two different responses you get if you send the same request twice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -XDELETE http://localhost:8080/items/1
...
&amp;lt; HTTP/1.1 200
...

$ curl -v -XDELETE http://localhost:8080/items/1
...
&amp;lt; HTTP/1.1 404
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output has been truncated to be easier to read, but as expected, the first request returned &lt;code&gt;200&lt;/code&gt; and the second returned &lt;code&gt;404&lt;/code&gt; since the item had already been deleted.&lt;/p&gt;
&lt;h2 id=&#34;testing-the-application&#34;&gt;Testing The Application&lt;/h2&gt;
&lt;p&gt;You should also be able to test your code, right? Luckily, Spring Boot provides a great way to test the REST APIs that you build. Take a look at the &lt;code&gt;HttpRequestsTest.java&lt;/code&gt; file. In this example it’s located in the &lt;code&gt;/src/test/java/com/github/brianmmcclain/springbootapidemo&lt;/code&gt; directory, but that will depend on what values you used when generating your code.&lt;/p&gt;
&lt;p&gt;The first thing to do is to tell Spring that this class contains tests, as well as to set up &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MockMvc&lt;/a&gt; to mock the HTTP requests and bypass the need to set up the actual web tier to run the tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HttpRequestsTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
 
   &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;MockMvc&lt;/code&gt; is used to perform the actual tests. Take a look at the test for the &lt;code&gt;GET /items&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getInventoryShouldReturnAllItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$.length()&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These tests are fairly verbose, which helps make clear exactly what the tests are checking. This one sends a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/items&lt;/code&gt; and ensures that the response is a JSON Array with a length of 5. Consider another one that’s more complicated and take a look at the test for &lt;code&gt;POST /items&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;postWithoutIdShouldCreate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/items&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contentType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MediaType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{\&amp;#34;name\&amp;#34;: \&amp;#34;Speakers\&amp;#34;, \&amp;#34;price\&amp;#34;: 39.99, \&amp;#34;count\&amp;#34;: 33}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isCreated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$.id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$.name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Speakers&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$.price&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$.count&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;       
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test will send a &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;/items&lt;/code&gt; with the data &lt;code&gt;&amp;quot;{&amp;quot;name&amp;quot;: &amp;quot;Speakers&amp;quot;, &amp;quot;price&amp;quot;: 39.99, &amp;quot;count&amp;quot;: 33}&amp;quot;&lt;/code&gt;, setting the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/json&lt;/code&gt;. It will then ensure that the response has a status code of &lt;code&gt;201&lt;/code&gt; (with &lt;code&gt;status().isCreated()&lt;/code&gt;, which is equal to &lt;code&gt;201&lt;/code&gt;), as well as check that all the fields that are returned are what you would expect.&lt;/p&gt;
&lt;h2 id=&#34;learn-more&#34;&gt;Learn More&lt;/h2&gt;
&lt;p&gt;The Spring website has some great guides on writing &lt;a href=&#34;https://spring.io/guides/gs/rest-service/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;RESTful APIs with Spring Boot&lt;/a&gt; as well as a more in-depth look at &lt;a href=&#34;https://spring.io/guides/gs/testing-web/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Testing the Web Layer&lt;/a&gt;, which are wonderful next steps. If you’re new to REST APIs, make sure to check out the &lt;a href=&#34;/guides/microservices/basics-of-rest&#34;&gt;Basics of REST&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Deploy a REST API on Kubernetes with Bitnami&#39;s Helm Charts</title>
      
      <link>/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/</guid>
      <description>

        
        &lt;p&gt;In the &lt;a href=&#34;/guides/microservices/develop-rest-api-nodejs-mongodb-containers/&#34;&gt;first part of this series&lt;/a&gt;, you developed and integrated a sample REST API with a MongoDB database running on your local system. In this second and concluding part, you will transition your API from your local system to a Kubernetes environment, thereby making it available to a wider audience for review, test and usage.&lt;/p&gt;
&lt;p&gt;To achieve this, you will use the following Helm charts and containers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/node&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js Helm chart&lt;/a&gt;, which lets you quickly deploy a Node.js application on Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s MongoDB Helm chart&lt;/a&gt;, which gives you a fully-functional, secure and replicated MongoDB database cluster on Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As with container images, &lt;a href=&#34;https://github.com/bitnami/charts/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Helm charts&lt;/a&gt; are secure and packaged according to current best practices, so you can use them immediately with your preferred Kubernetes provider or environment.&lt;/p&gt;
&lt;h2 id=&#34;assumptions-and-prerequisites&#34;&gt;Assumptions and Prerequisites&lt;/h2&gt;
&lt;p&gt;This guide makes the following assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a Docker environment installed and configured. &lt;a href=&#34;https://docs.docker.com/engine/installation/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about installing Docker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a Docker Hub account. &lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Register for a free account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a Kubernetes cluster running with Helm v3.x and &lt;em&gt;kubectl&lt;/em&gt; installed. &lt;a href=&#34;https://docs.bitnami.com/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about getting started with Kubernetes and Helm using different cloud providers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a basic understanding of Node.js and REST API concepts. Learn more about &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;REST APIs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-deploy-a-mongodb-service-on-kubernetes&#34;&gt;Step 1: Deploy a MongoDB service on Kubernetes&lt;/h2&gt;
&lt;p&gt;The first step is to deploy MongoDB on your Kubernetes cluster. The easiest way to do this is with &lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s MongoDB Helm chart&lt;/a&gt;, which gives you a ready-to-use deployment with minimal effort and within a few minutes.&lt;/p&gt;
&lt;p&gt;Use the commands below to deploy MongoDB on your Kubernetes cluster. If you wish, you can also replace the database name and credentials shown below with your own values, but make a note of them as you will need them in subsequent steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm repo add bitnami https://charts.bitnami.com/bitnami
helm install mongodb bitnami/mongodb --set &lt;span class=&#34;nv&#34;&gt;mongodbRootPassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root --set &lt;span class=&#34;nv&#34;&gt;mongodbUsername&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp --set &lt;span class=&#34;nv&#34;&gt;mongodbPassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp --set &lt;span class=&#34;nv&#34;&gt;mongodbDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mydb --set replicaSet.enabled&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The parameters passed to the chart define the MongoDB administrator password and also create a new database named &lt;em&gt;mydb&lt;/em&gt; with corresponding user credentials.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;complete list of parameters supported by the Bitnami MongoDB Helm chart&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait for the deployment to complete before proceeding to the next step.&lt;/p&gt;
&lt;h2 id=&#34;step-2-adapt-the-application-source-code&#34;&gt;Step 2: Adapt the application source code&lt;/h2&gt;
&lt;p&gt;Next, you must adapt your application&amp;rsquo;s source code to read MongoDB connection parameters from the Kubernetes environment. This is a necessary prelude to deploying the application with Bitnami&amp;rsquo;s Node.js Helm chart.&lt;/p&gt;
&lt;p&gt;Edit the &lt;em&gt;myapp/config/datastores.js&lt;/em&gt; file and modify the default data store entry to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;adapter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sails-mongo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mongodb://&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DATABASE_USER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DATABASE_PASSWORD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DATABASE_HOST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DATABASE_NAME&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These values will be injected into the application&amp;rsquo;s environment by the Helm chart at deployment time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/node&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js Helm chart&lt;/a&gt; starts the application using the &lt;em&gt;npm start&lt;/em&gt; command. By default, this will start the Sails application in production mode. Since this is a development deployment, modify the application&amp;rsquo;s &lt;em&gt;package.json&lt;/em&gt; file so that the &lt;em&gt;start&lt;/em&gt; command looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node app.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-create-and-publish-a-docker-image-of-the-application&#34;&gt;Step 3: Create and publish a Docker image of the application&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/node&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js Helm chart&lt;/a&gt; has the ability to pull a container image of your Node.js application from a registry such as Docker Hub. Therefore, before you can use the chart, you must create and publish a Docker image of the application by following these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a file named &lt;em&gt;Dockerfile&lt;/em&gt; in the application&amp;rsquo;s working directory, and fill it with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM bitnami/node:13

&lt;span class=&#34;c1&#34;&gt;# Copy the application code&lt;/span&gt;
COPY . /app

&lt;span class=&#34;c1&#34;&gt;# Set working directory&lt;/span&gt;
WORKDIR /app

&lt;span class=&#34;c1&#34;&gt;# Create a non-root user&lt;/span&gt;
RUN useradd -r -u &lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt; -g root nonroot
RUN chown -R nonroot /app
USER nonroot

&lt;span class=&#34;c1&#34;&gt;# Set the application port to 3000&lt;/span&gt;
ENV &lt;span class=&#34;nv&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Start the application&lt;/span&gt;
CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;app.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;em&gt;Dockerfile&lt;/em&gt; uses the &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/tree/master/13/debian-10&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Node.js 13.x development image&lt;/a&gt; to copy the application files from the current directory. It also creates a non-root user account that the application will run under. For security reasons, it&amp;rsquo;s recommended to always run your application using a non-root user account. Finally, it sets the application to run on port 3000 (the default port expected by the Bitnami Node.js Helm chart) and starts the Node.js server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Dockerfile used above produces a development image which contains additional development tools and dependencies. For production scenarios, you should instead use &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/tree/master/13-prod/debian-10&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js 13.x production image&lt;/a&gt; with a multi-stage build process, as described in this &lt;a href=&#34;https://docs.bitnami.com/tutorials/deploy-custom-nodejs-app-bitnami-containers/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;tutorial on creating a production-ready image of a Node.js application&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the image using the command below. Replace the DOCKER-USERNAME placeholder in the command below with your Docker account username.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t DOCKER-USERNAME/myapp:1.0 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of this command is a development image containing the application, the Node.js runtime and all the related dependencies and development tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log in to Docker Hub and publish the image. Replace the DOCKER-USERNAME placeholder in the command below with your Docker account username.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker login
docker push DOCKER-USERNAME/myapp:1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-4-deploy-the-rest-api-on-kubernetes&#34;&gt;Step 4: Deploy the REST API on Kubernetes&lt;/h2&gt;
&lt;p&gt;By default, Bitnami&amp;rsquo;s Node.js Helm chart installs its own preconfigured MongoDB service. While this is useful in some scenarios, it must be disabled in this case, as you will be connecting your Node.js application to the MongoDB deployment created in &lt;a href=&#34;#step-1-deploy-a-mongodb-service-on-kubernetes&#34;&gt;Step 1&lt;/a&gt;. When disabling this default behavior, it is mandatory to pass the chart, as alternative, a Kubernetes secret containing the details of the MongoDB deployment it should use.&lt;/p&gt;
&lt;p&gt;Follow the steps below to create the Kubernetes secret.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Obtain the cluster IP address of the MongoDB deployment created in &lt;a href=&#34;#step-1-deploy-a-mongodb-service-on-kubernetes&#34;&gt;Step 1&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get svc &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Kubernetes secret containing the MongoDB service&amp;rsquo;s IP address, port, database name and access credentials. Replace the MONGODB-IP-ADDRESS placeholder with the cluster IP address obtained from the previous command. If you used different database credentials or values when deploying the chart in &lt;a href=&#34;#step-1-deploy-a-mongodb-service-on-kubernetes&#34;&gt;Step 1&lt;/a&gt;, replace the values shown below appropriately.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create secret generic my-mongodb --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;MONGODB-IP-ADDRESS --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myapp --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mydb --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;27017&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a Kubernetes secret named &lt;em&gt;my-mongodb&lt;/em&gt; with the values needed for the Helm chart to successfully integrate with the MongoDB deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the REST API using Bitnami&amp;rsquo;s Node.js Helm chart and the MongoDB secret. Replace the DOCKER-USERNAME placeholder in the command below with your Docker account username.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm install node bitnami/node &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set image.repository&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DOCKER-USERNAME/myapp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set image.tag&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set &lt;span class=&#34;nv&#34;&gt;getAppFromExternalRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set mongodb.install&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set externaldb.secretName&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-mongodb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --set service.type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LoadBalancer 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take a closer look at this command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;service.type=LoadBalancer&lt;/em&gt; parameter makes the application available at a public IP address.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;getAppFromExternalRepository=false&lt;/em&gt; parameter controls whether the chart will retrieve the application from an external repository. In this case, since the application is already published as a container image, such retrieval is not necessary.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;image.repository&lt;/em&gt; and &lt;em&gt;image.tag&lt;/em&gt; parameters tell the chart which container image and version to pull from the registry. The values assigned to these parameters should match the image published in &lt;a href=&#34;#step-3-create-and-publish-a-docker-image-of-the-application&#34;&gt;Step 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;mongodb.install=false&lt;/em&gt; parameter disables the built-in MongoDB chart, and the &lt;em&gt;externaldb.secretName&lt;/em&gt; parameter names the secret holding details of the alternate MongoDB deployment to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/node#parameters&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;complete list of parameters supported by the Bitnami Node.js Helm chart&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait for the deployment to complete. Obtain the public IP address of the load balancer service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get svc &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-5-test-the-rest-api&#34;&gt;Step 5: Test the REST API&lt;/h2&gt;
&lt;p&gt;Your REST API is now deployed on Kubernetes. You can proceed to test it by sending it various types of HTTP requests and inspecting the responses. Replace the SERVICE-IP-ADDRESS placeholder in the commands below with the public IP address of the load balancer service obtained at the end of the previous step.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Send a POST request to the API to create a new item record:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -X POST -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;eggs&amp;#34;,&amp;#34;quantity&amp;#34;:&amp;#34;12&amp;#34;}&amp;#39;&lt;/span&gt; http://SERVICE-IP-ADDRESS/item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/api-post.png&#34; alt=&#34;POST request&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the item record was created with a GET request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://SERVICE-IP-ADDRESS/item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/api-get.png&#34; alt=&#34;GET request&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;You can also connect to the MongoDB deployment on Kubernetes to confirm that the record exists. If you used different database credentials or values when deploying the chart in &lt;a href=&#34;#step-1-deploy-a-mongodb-service-on-kubernetes&#34;&gt;Step 1&lt;/a&gt;, replace the values shown below appropriately.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl run --namespace default mongodb-client --rm --tty -i --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Never&amp;#39;&lt;/span&gt; --image docker.io/bitnami/mongodb:4.2.3-debian-10-r31 --command -- mongo mydb --host mongodb --authenticationDatabase mydb -u myapp -p myapp --eval &lt;span class=&#34;s2&#34;&gt;&amp;#34;db.item.find()&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see output similar to that shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/deploy-rest-api-nodejs-mongodb-charts/db-get.png&#34; alt=&#34;Database check&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your Node.js REST API is now running on Kubernetes and available for public review. You can now continue adding features to your API, upgrading the application and scaling out the database using normal Kubernetes procedures, which you can learn more about in our tutorial on &lt;a href=&#34;https://docs.bitnami.com/kubernetes/how-to/deploy-application-kubernetes-helm/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;deploying, scaling and upgrading applications on Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As you continue developing and deploying your REST API, consider using a tool like Skaffold, which continuously monitors your application source code and deploys the latest version automatically on Kubernetes. &lt;a href=&#34;https://docs.bitnami.com/tutorials/continuously-develop-express-application-kubernetes-bitnami-skaffold-octant/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about building a continuous development pipeline for a Node.js application with Skaffold&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/node&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Node.js Helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami/mongodb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami MongoDB Helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/bitnami-docker-node/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami&amp;rsquo;s Node.js container image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Monitoring Containers at Scale with Wavefront</title>
      
      <link>/guides/kubernetes/monitoring-at-scale-wavefront/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/monitoring-at-scale-wavefront/</guid>
      <description>

        
        &lt;p&gt;&lt;a href=&#34;https://tanzu.vmware.com/observability&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Observability by Wavefront&lt;/a&gt; efficiently monitors cloud native operations at scale. It is a high-performance streaming analytics platform that supports 3D observability (metrics, histograms, traces/spans) and can scale to very high data ingestion rates and query loads. You can collect data from many services and sources across your entire application stack, and can look at details for earlier data collected by Wavefront.&lt;/p&gt;
&lt;p&gt;The Wavefront platform includes dashboards that give DevOps teams real-time visibility into the operation and performance of containerized applications and Kubernetes clusters. The dashboard displays data on the performance of microservices and resource utilization to help you identify issues, troubleshoot problems, and optimize applications. The data can, for example, help you make decisions about how and when to scale a container environment. In short, Wavefront is an observability platform with automated service discovery and full-stack analytics.&lt;/p&gt;
&lt;h2 id=&#34;monitoring-kubernetes&#34;&gt;Monitoring Kubernetes&lt;/h2&gt;
&lt;p&gt;The Wavefront service can measure, correlate, and analyze data across containers and Kubernetes clusters and can display various information, including metrics, histograms, span logs, traces and distributed tracing analysis.
Because Wavefront can correlate Kubernetes performance with the performance of applications, it can help you scale faster while maintaining high quality. With Wavefront you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See a real-time, full-stack picture of your Kubernetes environment&lt;/li&gt;
&lt;li&gt;Find out about incidents earlier and solve them faster by drilling down into the data&lt;/li&gt;
&lt;li&gt;Understand and assess long-term trends&lt;/li&gt;
&lt;li&gt;Improve collaboration and visibility across teams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wavefront can also help you evaluate and tune the performance of microservices running on Kubernetes. For example, Wavefront can help you isolate and resolve microservices rate, error, and duration problems.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Wavefront helps monitor and manage container deployments. It offers so much functionality that it’s often best to begin by investigating specific areas you are interested in. The video &lt;a href=&#34;https://tanzu.vmware.com/content/vmware-tanzu-observability-by-wavefront-videos/introduction-to-wavefront&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to Wavefront&lt;/a&gt; explains more about where and how Wavefront is being used. Watch &lt;a href=&#34;https://tanzu.vmware.com/content/vmware-tanzu-observability-by-wavefront-videos/wavefront-and-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Wavefront and Kubernetes&lt;/a&gt; to understand Kubernetes specifics. You can check out the &lt;a href=&#34;https://tanzu.vmware.com/content/vmware-tanzu-observability-by-wavefront-videos&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;complete library of Wavefront videos&lt;/a&gt; to find topics of interest. &lt;a href=&#34;https://docs.wavefront.com/index.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Wavefront docs&lt;/a&gt; also provide an exceptionally thorough introduction to the solution, with in-depth sections on Kubernetes, dashboards, alerts, tracing and more, including lots of video content for visual learners.&lt;/p&gt;
&lt;p&gt;If you are a Spring Boot developer &lt;a href=&#34;/guides/spring/spring-wavefront-gs/&#34;&gt;Wavefront for Spring Boot: Getting Started&lt;/a&gt; is a great starting point and explains how to take advantage of our free tier offer.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Bootifying Java Applications</title>
      
      <link>/guides/spring/bootifying-java-apps/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/bootifying-java-apps/</guid>
      <description>

        
        &lt;p&gt;Spring Boot is a convention-over-configuration solution to create standalone, production-grade Spring-based applications that you can &amp;ldquo;just run&amp;rdquo;. It is pre-configured with an opinionated view of the best configuration of the Spring platform, including third-party libraries, so that you can get started with minimum fuss. The Spring framework provides hundreds of features and modules, but knowing where to start and configure them can be challenging.&lt;/p&gt;
&lt;p&gt;Not every existing Java application can be deployed and operated as a Spring Boot application without modification. In particular, Java applications that leverage Java EE APIs (see &lt;a href=&#34;https://github.com/javaee-samples&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;examples&lt;/a&gt;) or vendor-specific APIs may require some effort to migrate to Spring Boot.&lt;/p&gt;
&lt;h2 id=&#34;guide&#34;&gt;Guide&lt;/h2&gt;
&lt;p&gt;Bootification is the process of changing the code and configuration of an application to transform it into a full-fledged &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot&lt;/a&gt; application. Several factors impact the bootification journey that your applications should follow. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency and build management tools (i.e., Ant, Maven, Gradle)&lt;/li&gt;
&lt;li&gt;Desired packaging (executable JAR/WAR or standalone WAR)&lt;/li&gt;
&lt;li&gt;The acceptable amount of configuration refactoring (XML versus Java configuration)&lt;/li&gt;
&lt;li&gt;Library version upgrade strategy&lt;/li&gt;
&lt;li&gt;Nature of the application (frontend/backend/monolithic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This step-by-step guide walks you through the process of transforming existing Java applications into first-class Spring Boot citizens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/diagrams/spring-bootification-process.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-learn-about-spring-boot&#34;&gt;1. Learn about Spring Boot&lt;/h3&gt;
&lt;p&gt;To learn more about what Spring Boot is and what you can do with it, see the official &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot home page&lt;/a&gt; and &lt;a href=&#34;https://spring.io/guides#getting-started-guides&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Getting Started Guides&lt;/a&gt;. The &lt;a href=&#34;#references&#34;&gt;references&lt;/a&gt; section provides more learning resources.&lt;/p&gt;
&lt;h3 id=&#34;2-setup-your-local-development-environment&#34;&gt;2. Setup your local development environment&lt;/h3&gt;
&lt;p&gt;Spring Boot can be used with a classic Java development toolset or installed as a command-line tool. Either way, you need the &lt;a href=&#34;https://www.java.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Java SDK&lt;/a&gt; v1.8 or higher.&lt;/p&gt;
&lt;p&gt;If you want to experiment with Spring Boot or are new to Java development, you might want to try the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-installing-the-cli&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot CLI&lt;/a&gt; (Command Line Interface) first. Otherwise, follow the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-installation-instructions-for-java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;traditional installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For seamless integration and native support in your favorite coding environment, try the latest &lt;a href=&#34;https://spring.io/tools&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Tools&lt;/a&gt; distribution for Eclipse, Visual Studio Code, or Theia. Some &lt;a href=&#34;https://www.jetbrains.com/help/idea/spring-boot.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;plugins&lt;/a&gt; are also available for IntelliJ IDEA.&lt;/p&gt;
&lt;h3 id=&#34;3-check-out-build-and-back-up-your-project&#34;&gt;3. Check out, build, and back up your project&lt;/h3&gt;
&lt;p&gt;You can now check out your application from its source control system and make sure that you can build and run it without any change. Back up this project locally to be able to run the initial application at any later point in the process and validate its behavior.&lt;/p&gt;
&lt;p&gt;Before changing anything in your application, you should also create a separate bootification branch within your version control system (e.g., Git). This way, you will be capable of tracking and viewing differences between the original application and the bootified one and rolling back your changes if necessary.&lt;/p&gt;
&lt;h3 id=&#34;4-adjust-application-dependencies-packaging-and-code-structure&#34;&gt;4. Adjust application dependencies, packaging, and code structure&lt;/h3&gt;
&lt;p&gt;Now it is time to update your application dependencies, packaging and create a Spring Boot application class.&lt;/p&gt;
&lt;p&gt;If you want to use either Maven or Gradle, &lt;a href=&#34;http://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Initializr&lt;/a&gt; is the recommended approach for generating a new Spring Boot application. Spring Initializr is like a shopping cart for all of the dependencies you might need for your application. It offers a fast way to pull in all of the dependencies you need for an application and does a lot of the setup for you. Just Navigate to &lt;a href=&#34;http://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Initializr&lt;/a&gt;, fill in the metadata, add the dependencies relevant to your application, and generate the new project. Make sure to carefully pick the right Spring Boot starters for your application.&lt;/p&gt;
&lt;p&gt;Initializr will automatically generate the main Spring Boot application class for you. Feel free to adjust it to your needs.&lt;/p&gt;
&lt;p&gt;At this stage, make sure you understand Spring Boot auto-configuration and &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;how to adjust it&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;5-optional-configure-remote-deployment&#34;&gt;5. (Optional) Configure remote deployment&lt;/h3&gt;
&lt;p&gt;It typically makes sense to start working locally on your developer machine. Once you want to connect your application to external resources (e.g., database, messaging middleware, external services) or test it in a more realistic environment, deploying your Spring Boot application to a remote runtime environment or server is an excellent idea.&lt;/p&gt;
&lt;p&gt;For this reason, from this point on you can consider deploying the application on &lt;a href=&#34;https://tanzu.vmware.com/application-service&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Application Service&lt;/a&gt; (TAS) or a remote testing server. TAS is based on the Cloud Foundry open-source project. It is built to be the best runtime for Spring and Spring Boot applications, providing a lean, integrated, and efficient user experience. If you want to deploy your application there, follow the corresponding &amp;ldquo;&lt;a href=&#34;https://docs.cloudfoundry.org/buildpacks/java/getting-started-deploying-apps/gsg-spring.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;getting started&lt;/a&gt;&amp;rdquo; deployment guide.&lt;/p&gt;
&lt;h3 id=&#34;6-prepare-your-application-to-work-with-spring-boot&#34;&gt;6. Prepare your application to work with Spring Boot&lt;/h3&gt;
&lt;p&gt;Now, you can begin modifying your application code and configuration. From here on, you want to make as few changes as possible &amp;ndash; just enough to get your application running as a standalone Spring Boot application. We recommend that you do &lt;em&gt;not&lt;/em&gt; combine this work with any other changes to your application&amp;rsquo;s inner workings or business logic for better visibility.&lt;/p&gt;
&lt;p&gt;The majority of the changes required to get your application running are tied to the usage of Java EE APIs. You will have to remove and replace dependencies to Java EE and the application server in use. (e.g., &lt;a href=&#34;https://javaee.github.io/glassfish/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;GlassFish&lt;/a&gt;, &lt;a href=&#34;https://tomee.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Apache TomEE&lt;/a&gt;, &lt;a href=&#34;https://www.ibm.com/cloud/websphere-application-server&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;IBM WebSphere Application Server&lt;/a&gt;, &lt;a href=&#34;https://github.com/wildfly&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Red Hat JBoss Application Server / Wildfly&lt;/a&gt;, &lt;a href=&#34;https://www.oracle.com/middleware/technologies/weblogic.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Oracle WebLogic Server&lt;/a&gt;, &lt;a href=&#34;https://www.sap.com/germany/products/netweaver-platform.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;SAP NetWeaver Application Server&lt;/a&gt;&amp;hellip;).&lt;/p&gt;
&lt;p&gt;You will need to modify the application depending on the Java EE specification it currently uses: annotations, EJBs, JAX-WS, JAX-RS, JAXB, JMS, JSF, JPA&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Expect detailed future guides covering what needs to be done for each specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-modify-and-deploy-your-application-iteratively-until-it-runs&#34;&gt;7. Modify and deploy your application iteratively until it runs&lt;/h3&gt;
&lt;p&gt;After making the preparatory adjustments identified in the previous step, you can try to run your application. The chances are that the deployment will not work correctly the first time and that you will encounter problems while starting the application.&lt;/p&gt;
&lt;p&gt;If it is not working as expected, keep a cool head. Examine the application log to understand the root cause of the &lt;em&gt;first&lt;/em&gt; issue that pops up. Start checking existing solutions documented as recipes in your local cookbook or on the Internet before digging deeper into the issue.&lt;/p&gt;
&lt;p&gt;You might have to adjust log levels or further instrument and debug your Spring Boot application to gain deeper insights into what is wrong. Reaching out to a colleague or Spring Boot expert early can help you to adopt a different perspective, see the obvious, and save yourself time. If you spend significant time resolving an issue, document what you have done to help your peers in similar situations, and consider writing a cookbook article about it.&lt;/p&gt;
&lt;p&gt;From here on, continue to progress step by step, making as few changes as possible, and fixing and documenting any issues encountered. It may take several iterations for your application to start without error and provide the same functionality as the one you started with.&lt;/p&gt;
&lt;h3 id=&#34;8-optional-optimize-your-application-for-spring-boot&#34;&gt;8. (Optional) Optimize your application for Spring Boot&lt;/h3&gt;
&lt;p&gt;At this point, your application should be running as a standalone Spring Boot application. Ensure that this stable state is properly persisted and flagged in your version control system, for example, using a tag or an additional branch.&lt;/p&gt;
&lt;p&gt;Moving forward, you might want to consider additional optimizations to your codebase to transform your application into a first-class Spring Boot citizen. These may encompass some of the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Externalizing environment variables&lt;/li&gt;
&lt;li&gt;Optimizing logging with Spring Boot&lt;/li&gt;
&lt;li&gt;Configuring actuator endpoints&lt;/li&gt;
&lt;li&gt;Externalizing and caching state&lt;/li&gt;
&lt;li&gt;Moving from Maven to Gradle&lt;/li&gt;
&lt;li&gt;Removing Spring XML configuration&lt;/li&gt;
&lt;li&gt;Converting legacy classes to Spring stereotypes&lt;/li&gt;
&lt;li&gt;Integrating with Spring Cloud Data Flow (SCDF)&lt;/li&gt;
&lt;li&gt;Removing boilerplate code using &lt;a href=&#34;https://projectlombok.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Project Lombok&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tidying up unused components and dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of the options are relevant to your application, perform them one at a time. Validate that your application is running appropriately after each change.&lt;/p&gt;
&lt;h3 id=&#34;9-finalize-the-bootification-process&#34;&gt;9. Finalize the Bootification Process&lt;/h3&gt;
&lt;p&gt;After your application is working and thoroughly tested, commit your code changes and put the application through the formal testing procedures along the (automated) path to production. You might have to collaborate with operations engineers to adjust your application&amp;rsquo;s configuration and CI/CD pipelines.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;The Tanzu Developer Portal has a &lt;a href=&#34;/topics/spring/&#34;&gt;series of guides&lt;/a&gt; on topics related to Spring and Spring Boot development that can help you learn more and address a variety of needs.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;p&gt;In addition to the links included in the text, the list below provides additional useful guides and tutorials related to the topics discussed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot&lt;/a&gt; &amp;mdash; official landing page for Spring Boot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot Reference Guide&lt;/a&gt; &amp;mdash; complete Spring Boot reference documentation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/guides&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Guides&lt;/a&gt; &amp;mdash; designed to get you productive as quickly as possible using the latest Spring project releases and techniques as recommended by the Spring team&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-traditional-deployment.html#howto-convert-an-existing-application-to-spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Bootification Guide&lt;/a&gt; &amp;mdash; how to convert an existing application to Spring Boot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baeldung.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Baeldung | Java, Spring and Web Development tutorials&lt;/a&gt; &amp;mdash; useful tutorials, including many Spring and Spring Boot topics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mkyong.com/tutorials/spring-boot-tutorials/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Mkyong Spring Boot Tutorials&lt;/a&gt; &amp;mdash; tutorials covering many aspects of Spring Boot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/spring/&#34;&gt;VMware Tanzu Developer Spring guides&lt;/a&gt; &amp;mdash; hands-on guides from the VMware Tanzu Developer site&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/SpringSourceDev&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Developer YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanzu.vmware.com/spring-app-framework&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Accelerates Cloud-Native Java Application Development | Tanzu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/building-microservices-with/9780134192468/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Building Microservices with Spring Boot LiveLessons (Video Training)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;books&#34;&gt;Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/B01LPRN0Z8&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Learning Spring Boot 2.0&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/spring-boot-in/9781617292545/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Spring Boot in Action&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/cloud-native-java/9781449374631/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;Cloud Native Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Initializr&lt;/a&gt; &amp;mdash; generate a Spring Boot project with just what you need to start quickly&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot Starters&lt;/a&gt; &amp;mdash; one-stop-shop for convenient dependency descriptors that include all of the Spring and related technology that you need in your application&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/tools&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Tools&lt;/a&gt; &amp;mdash; next-generation Spring tooling for your favorite coding environment&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Spring Boot Testing Best Practices</title>
      
      <link>/guides/spring/spring-boot-testing/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-boot-testing/</guid>
      <description>

        
        &lt;p&gt;Proper testing is critical to the successful development of applications that use a microservices architecture. This guide provides some important recommendations for writing tests for Spring Boot applications, using &lt;a href=&#34;https://www.appsdeveloperblog.com/the-first-principle-in-unit-testing/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;F.I.R.S.T. principles&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;F - Fast&lt;/li&gt;
&lt;li&gt;I - Independent&lt;/li&gt;
&lt;li&gt;R - Repeatable&lt;/li&gt;
&lt;li&gt;S - Self-Validating&lt;/li&gt;
&lt;li&gt;T - Timely&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isolate-the-functionality-to-be-tested&#34;&gt;Isolate the functionality to be tested&lt;/h2&gt;
&lt;p&gt;You can better isolate the functionality you want to test by limiting the context of loaded frameworks/components. Often, it is sufficient to use the &lt;a href=&#34;https://junit.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JUnit&lt;/a&gt; unit testing framework. without loading any additional frameworks.  &lt;strong&gt;To accomplish this, you only need to annotate your test with &lt;code&gt;@Test&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the very naive code snippet below, there are no database interactions, and MapRepository loads data from the classpath.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Assert.assertEquals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MapRepositoryTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MapRepository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mapRepository&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MapRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shouldReturnJurisdictionForZip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expectedJurisdiction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;NJ&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expectedJurisdiction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mapRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findByZip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;07677&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a next step up in complexity, consider adding mock frameworks, like those generated by the &lt;a href=&#34;https://site.mockito.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Mockito&lt;/a&gt; mocking framework, if you have interactions with external resources. Using mock frameworks eliminates the need to access real instances of external resources.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.Mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.runners.MockitoJUnitRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.Matchers.any&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.Mockito.times&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.Mockito.verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CarServiceTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Mock&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RateFinder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rateFinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rateFinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shouldInteractWithRateFinderToFindBestRate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;schedulePickup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rateFinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findBestRate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;only-load-slices-of-functionality&#34;&gt;Only load slices of functionality&lt;/h2&gt;
&lt;h3 id=&#34;springboottest-annotation&#34;&gt;@SpringBootTest Annotation&lt;/h3&gt;
&lt;p&gt;When testing spring boot applications, the &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation loads the whole application, but it is often better to limit the application context to just the set of Spring components that participate in the test scenario. This is accomplished by listing them in the annotation declaration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Assert.assertTrue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MapRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CarServiceWithRepoTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shouldReturnValidDateInTheFuture&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;schedulePickup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;datajpatest-annotation&#34;&gt;@DataJpaTest Annotation&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;@DataJpaTest&lt;/code&gt; only loads &lt;code&gt;@Repository&lt;/code&gt; spring components, and will greatly improve performance by not loading &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@DataJpaTest&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MapTests&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MapRepository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findByUsernameShouldReturnUser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;NJ&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;actual&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findByZip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;07677&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

    	&lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isEqualTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actual&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;running-database-related-tests&#34;&gt;Running database-related tests&lt;/h2&gt;
&lt;p&gt;Sometimes, the &lt;code&gt;Table Already Exists&lt;/code&gt; exception is thrown when testing with an &lt;a href=&#34;http://www.h2database.com/html/main.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;H2 database&lt;/a&gt;. This is an indication that H2 was not cleared between test invocations. This behavior has been observed when combining database tests with initialization of the API mocking tool &lt;a href=&#34;http://wiremock.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;WireMock&lt;/a&gt;. It could also occur if multiple qualifying schema-.sql files are located in the classpath.&lt;/p&gt;
&lt;p&gt;It is a good practice to mock the beans that are involved in database interactions, and turn off Spring Boot test db initialization for the Spring profile that tests run.  You should strongly consider this when testing &lt;code&gt;Controllers&lt;/code&gt;.  Alternatively, you can try to declare your table creation DDL in &lt;code&gt;schema.sql&lt;/code&gt; files as &lt;code&gt;CREATE TABLE IF NOT EXISTS&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.datasource.initialize=false

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\
	org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
	org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\
	org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;test-the-web-layer&#34;&gt;Test the web layer&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;@WebMvcTest&lt;/code&gt; to test REST APIs exposed through Controllers without the server part running. Only list Controllers that are being tested.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: It looks like Spring Beans used by a Controller need to be mocked.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@WebMvcTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CarServiceController&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CarServiceControllerTests&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@MockBean&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getCarShouldReturnCarDetails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;given&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;carService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;schedulePickup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());)&lt;/span&gt;
        	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;willReturn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

    	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/schedulePickup&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MediaType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Many of the frameworks and other capabilities mentioned in this best practices guide are described in the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot testing documentation&lt;/a&gt;. This recent video on &lt;a href=&#34;/tv/code/0004/&#34;&gt;testing messaging in Spring&lt;/a&gt; describes the use of Spock, JUnit, Mockito, Spring Cloud Stream and Spring Cloud Contract.&lt;/p&gt;
&lt;p&gt;A more exhaustive &lt;a href=&#34;https://spring.io/guides/gs/testing-web/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;tutorial&lt;/a&gt; is available to help you learn more about testing the web layer.&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/faq.css&#34;&gt;
&lt;div class=&#34;faqs&#34; id=&#34;faqs&#34;&gt;
    &lt;div class=&#34;flex-container jc-between&#34;&gt;&lt;/div&gt;
        &lt;h2 class=&#34;h2 mb-md&#34;&gt;Frequently Asked Questions&lt;/h2&gt;
        &lt;div class=&#34;faq&#34;&gt;
            
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What is Spring Boot testing?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Spring Boot testing is the practice of ensuring the functionality of Spring Boot applications and their respective components, a critical step in the successful development of applications in a microservices architecture.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;How do you test a Spring Boot microservice?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Spring Boot &lt;a href=&#34;https://tanzu.vmware.com/microservices&#34;&gt;microservices&lt;/a&gt; can be tested by using the JUnit testing framework, by annotating the test with &lt;code&gt;@Test&lt;/code&gt;. Alternatively, to only load slices of functionality, use the &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation while listing the Spring components that participate in the test scenario in the annotation declaration.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What are the best practices for Spring Boot testing?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;For Spring Boot testing, it is best practice to utilize the F.I.R.S.T. principles. Therefore, the test must be fast, independent, repeatable, self-validating, and timely.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;How can you speed up Spring Boot testing?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Spring Boot testing can be optimized by using the &lt;code&gt;@DataJpaTest&lt;/code&gt; annotation to only load &lt;code&gt;@Repository&lt;/code&gt; Spring components. In addition, configuring the test to exclude &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt;, and other components will greatly improve speed.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;Which annotation can be used to run quick unit tests in Spring Boot?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;The &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation can be used to run quick unit tests in Spring Boot.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What are the benefits of using mock frameworks in Spring Boot testing?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Mock frameworks eliminate the need to access real instances of external resources while Spring Boot testing.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
    $(&#34;.faq-item&#34;).each( function() {
        $(this).click(function () {
            $(this).find(&#34;#arrow&#34;).toggleClass(&#34;flip&#34;); 
            $(this).find(&#34;.faq-answer&#34;).slideToggle(200); 
        });
    });
&lt;/script&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Breaking Down a Monolith into Microservices</title>
      
      <link>/guides/microservices/deconstructing-the-monolith/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/deconstructing-the-monolith/</guid>
      <description>

        
        &lt;p&gt;There is a pretty good chance more than a few people in your organization are talking about microservices these days. Perhaps you’ve noticed more copies of Eric Evans’ &lt;a href=&#34;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Domain-Driven Design&lt;/a&gt;, or maybe they’ve taken a &lt;a href=&#34;http://www.wmrichards.com/microservices-architecture.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;training course&lt;/a&gt; or two. And while there are ample &lt;a href=&#34;https://martinfowler.com/microservices/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;resources&lt;/a&gt; to help you understand the nuances of a suite of small focused services, most start from, well, greenfield development. Much as physicists are first taught to “&lt;a href=&#34;https://www.forbes.com/sites/chadorzel/2015/09/29/the-annoying-physics-of-air-resistance/#38a1ab0e718a&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ignore air resistance&lt;/a&gt;” software prognostication often ignores the reality facing every organization - the entrenched portfolio of heritage applications that make up the bulk of every company’s IT environment. While it is tempting to nuke and pave, you have to face the facts, these applications are powering your business and you must chart a path forward.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My personal favorite is &amp;quot;profitable&amp;quot;. &lt;a href=&#34;https://t.co/RCZwKm457U&#34;&gt;https://t.co/RCZwKm457U&lt;/a&gt;&lt;/p&gt;&amp;mdash; Phil Webb 🍃 (@phillip_webb) &lt;a href=&#34;https://twitter.com/phillip_webb/status/1229184287867428864?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;what-is-a-microservice&#34;&gt;What is a microservice?&lt;/h2&gt;
&lt;p&gt;There are nearly as many definitions of a microservice as there are developers touting them as miracle cures. Before delving further, the key definition is the one inside the walls of &lt;em&gt;your&lt;/em&gt; organization. Whether it adheres to the Platonic ideal form of a microservice isn’t nearly as important as getting everyone on the same page. There is a reason why a glossary is often one of the most important artifacts in any project room.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’ve already debated tabs vs spaces, consider touching off a &lt;a href=&#34;https://mobile.twitter.com/littleidea/status/500005289241108480&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;discussion around the definition&lt;/a&gt; of a microservice. Consider removing sharp objects, it may devolve rapidly. Microservices really are in the eye of the beholder!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ultimately, microservices are a reaction to monoliths and heavyweight &lt;a href=&#34;https://martinfowler.com/bliki/ServiceOrientedAmbiguity.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;service oriented architectures&lt;/a&gt; as well as the capabilities of cloud environments. The issues with poorly structured monolithic architectures are legion, from low developer productivity caused by massive code bases to the inability to target compute resources to the bits that need more performance, there are no shortage of headaches. Software is not immune to the &lt;a href=&#34;https://www.grc.nasa.gov/WWW/K-12/airplane/thermo2.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;second law of thermodynamics&lt;/a&gt;, over time, the modularity of the monolith breaks down and it takes longer and longer to add new features and functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should be stressed that monoliths span the continuum of modularity and they can actually be structured in such a way that they don’t suffer all of the maladies normally associated with the term “monolith”. You can apply &lt;a href=&#34;https://twitter.com/simonbrown/status/962945350737825793?lang=en&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;microservice design principles&lt;/a&gt; to monoliths!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Personally, I am a fan of “something that can be rewritten in two weeks or less” since that reminds us microservices should be, well, small. Others are partial to saying any service built and maintained by a two pizza team. While I support two pizza teams, that definition won’t help you determine just how many services said team can support. Of course there is no stock answer to that question, it depends on the volatility of the services in question. If the microservices are stable, a two pizza team might be able to support ten or twenty however if the services are constantly changing, the exact same team might struggle with more than five!&lt;/p&gt;
&lt;p&gt;Rather than debate terms, think in terms of characteristics, microservices are suites of small, focused services that embody the &lt;a href=&#34;http://www.catb.org/~esr/writings/taoup/html/ch01s06.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Unix ethos&lt;/a&gt; of small, focused tools that do one thing and do it well. Microservices should be independently deployable, independently scalable, and free to evolve at different rates. Developers are free to choose the best technology to build services around business capabilities. In a nutshell, microservices are an example of the zeroth law of computer science - high cohesion, low coupling&amp;hellip;applied to services.&lt;/p&gt;
&lt;h2 id=&#34;what-should-be-a-microservice&#34;&gt;What should be a microservice?&lt;/h2&gt;
&lt;p&gt;There is no doubt that microservices bring a host of benefits however, they come with added complexity. Teams should understand the trade-offs before blindly sprinting down a path that has the potential to make things worse. Repeat after me &lt;strong&gt;not everything needs to be a microservice&lt;/strong&gt;! Please consider the following principles when considering microservices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple Rates of Change&lt;/strong&gt;. In many systems, some parts change all the time while others haven’t been touched since the initial commit. If parts of your system evolve at different rates, microservices might help. Splitting out the more volatile pieces allows them to iterate faster enabling you to deliver business value quickly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Independent Life Cycles&lt;/strong&gt;. The monolith doesn’t turn on a dime but today you need to be nimble. Speed matters, your business partners may not be able to wait for a quarterly release window. Standalone microservices can have their own life cycle with their own repository and a separate deployment pipeline containing the appropriate tests and code quality scans allowing you to capitalize on new opportunities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Independent Scalability&lt;/strong&gt;. Monoliths often force you to make decisions early, when you know the least about the forces acting on your system. Your infrastructure engineers probably asked you how much capacity your application needs forcing a “take the worst case and double it” mentality leading to poor resource utilization. Instead of wild guesses, a microservice approach allows you to more efficiently allocate compute.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failure Isolation&lt;/strong&gt;. To &lt;a href=&#34;https://www.youtube.com/watch?v=dMjQ3hA9mEA&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;paraphrase a fictional mathematician&lt;/a&gt;, failure, uh, finds a way. Microservices can be used to isolate a dependency giving you a natural spot to build in proper failover mechanisms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simplifying Interactions&lt;/strong&gt;. Microservices give you a natural indirection layer insulating you from external dependencies that change frequently or are complex to use. Essentially, your microservice implements the facade pattern.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polyglot Tech Stacks&lt;/strong&gt;. Monoliths forced a standardized, often lowest common denominator, technology stack regardless of the fit to purpose. Microservices give you the freedom to choose the right language or database for the business requirements rather than force a one size fits all solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facilitate Legal Compliance&lt;/strong&gt;. Our applications often deal with sensitive data which means compliance with various laws and regulations. Credit cards and personally identifiable information must be safeguarded. Creating a separate microservice to handle the legally entangled aspects of your application can be simpler and faster than attempting to rewire the monolith.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microservices are not an excuse to use your favorite esoteric language or technology. You must &lt;a href=&#34;https://www.vmwaretanzu.com/episode/0004/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;weigh the pros and cons&lt;/a&gt; of any design choice and do not dismiss the cost of maintaining multiple disparate stacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you’d like to learn more about these principles, peruse the blog series &lt;a href=&#34;https://tanzu.vmware.com/content/blog/should-that-be-a-microservice-keep-these-six-factors-in-mind&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Should that be a Microservice?&lt;/a&gt; on the &lt;a href=&#34;https://tanzu.vmware.com/blog&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;identifying-bounded-contexts&#34;&gt;Identifying Bounded Contexts&lt;/h2&gt;
&lt;p&gt;By now, developers are (re)familiarizing themselves with domain driven design and the quest for the bounded contexts in their systems. But it can be daunting to know how to start. &lt;a href=&#34;https://tanzu.vmware.com/content/podcasts/domain-driven-design-event-storming-with-jakub-pilimon&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Event Storming&lt;/a&gt; is a collaborative technique designed to help you discover bounded contexts and vertical slices of an application. It facilitates decomposition of the monolith giving you an opportunity to model new flows and ideas. &lt;a href=&#34;https://www.eventstorming.com/book/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Event Storming&lt;/a&gt; is a group activity requiring little more than sticky notes, sharpies, some painters tape and a large wall.&lt;/p&gt;
&lt;p&gt;As a group, participants “storm the business” process jotting down domain events on sticky notes. The facilitator will often kick things off by identifying the start and end of the process. Focus on the happy path to begin with and use past tense for events. As your team works through the business domain, you will inevitably find trouble spots, external systems, parallel processing and time constrained events like batch processes. Once you’ve brainstormed the events, work with domain experts to enforce a timeline which will often uncover missing elements.&lt;/p&gt;
&lt;p&gt;Once you have a timeline, look for domain aggregates aka bounded contexts. Identify events that transition across subdomains. These clumps of events will often expose candidate services. From here you can also rough out user interfaces, personas and whatever else is important in the domain.&lt;/p&gt;
&lt;p&gt;In addition to Event Storming, you can apply a set of heuristics to discover domains. Some of the things to look for:
The structure of the organization. An insurance policy means different things to the billing area than it does to the claims department.
Domain language - where does a given term mean the same thing and more importantly where does it mean something else entirely?
Where are domain experts positioned in the org chart?
What is the core domain of the company? Strategic differentiation should inform your breakdown.&lt;/p&gt;
&lt;p&gt;Once you have some candidate boundaries, you can test them! Are there any “schizophrenic contexts” aka where the context does too many things? A multitude of if statements indicates you probably have two or more domains. Is your context autonomous? Can it make decisions on its own or does it need to reach out to a dozen other modules? It may seem a bit fuzzy, but don’t forget to do a sanity check - do these boundaries feel right?&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;There is a fair amount of art involved when you decompose a monolith, there is no magic formula. Hopefully this article gives you some tips and a place to start your journey. &lt;a href=&#34;https://www.youtube.com/watch?v=toqfiv4o7jA&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Refactoring&lt;/a&gt; takes time, be patient, your portfolio wasn’t built in a day and you won’t move everything to the cloud in a week. Move what makes sense, prioritize what can and be ruthlessly pragmatic. Good luck!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Decomposing the monolith can be a very challenging exercise. With years of technical debt, mounting pressure and an often unconscious attachment to “we’ve always done it that way” it can be a challenge to shift to microservices. Not to toot our own horn, but the &lt;a href=&#34;https://tanzu.vmware.com/labs&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Labs&lt;/a&gt; team has a &lt;a href=&#34;https://tanzu.vmware.com/customers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;proven track record of success&lt;/a&gt; helping companies of all sizes in a wide variety of domains &lt;a href=&#34;https://tanzu.vmware.com/application-modernization&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;modernize their apps&lt;/a&gt;. We even offer a virtual consultation, if you’re interested, please &lt;a href=&#34;https://tanzu.vmware.com/product-consultation&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;reach out&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Modernization with Consumer Driven Contracts</title>
      
      <link>/guides/microservices/consumer-driven-contracts/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/consumer-driven-contracts/</guid>
      <description>

        
        &lt;p&gt;There are multiple approaches to modernizing applications and defining APIs. This guide describes the consumer driven contracts approach. The guide &lt;a href=&#34;/guides/microservices/api-first-development/&#34;&gt;Understanding API-First Development&lt;/a&gt; describes an alternative approach.&lt;/p&gt;
&lt;p&gt;The consumer driven contracts approach may be useful when a team is building many related services at the same time as part of a modernization effort, and your team knows the &amp;ldquo;domain language&amp;rdquo; of the bounded context, but doesn&amp;rsquo;t know the individual properties of each aggregate and event payload.&lt;/p&gt;
&lt;p&gt;This approach is also useful when a legacy application contains a large data model and existing service surface area, and your team doesn&amp;rsquo;t want to port 100% of the legacy application to a microservices architecture. (Maybe not all of that legacy functionality is needed anymore.  It&amp;rsquo;s been around for a long time and no one really knows everything it does.)&lt;/p&gt;
&lt;p&gt;Consumer driven contracts help address the following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can you add to an API without breaking downstream clients?&lt;/li&gt;
&lt;li&gt;How can something be removed from a service without breaking downstream clients?&lt;/li&gt;
&lt;li&gt;How can a service developer find out who is using their service?&lt;/li&gt;
&lt;li&gt;How can a service developer release with short release cycles and continuous delivery?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a modernization effort, there are several additional problems addressed by consumer driven contracts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can a team know how much of the legacy functionality to add to a new service?&lt;/li&gt;
&lt;li&gt;How can a team decide what order to add new functionality?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-consumer-driven-contracts&#34;&gt;Using Consumer Driven Contracts&lt;/h2&gt;
&lt;p&gt;In an event-driven architecture, many microservices expose two kinds of APIs: a RESTful API over HTTP and a message-based API for publishing and subscribing to domain events.  The messaging tier provides a mechanism for a constellation of microservices to be loosely coupled as an emergent and reactive system.  The RESTful API provides a means for integrating with these services in a synchronous fashion as well as to provide complex query capability for services that have received events from a service.  By allowing consumers to provide contracts for both of these tiers, we can provide a &lt;em&gt;prescribed language&lt;/em&gt; to our consumers that matches their needs.&lt;/p&gt;
&lt;h3 id=&#34;using-separate-test-base-classes-for-consumers-and-transport-types&#34;&gt;Using Separate Test Base Classes for Consumers and Transport Types&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-contract&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Contract&lt;/a&gt; provides support for consumer driven contracts and service schemas in Spring applications, covering a range of options for writing tests and publishing them as assets, ensuring that a contract is kept by producers and consumers for both HTTP and message-based interactions.&lt;/p&gt;
&lt;p&gt;Spring Cloud Contract allows you to control the base class that generated server tests use, and these allow us to customize the individual tests for our needs with various mocks and configuration.  The DNA project initializer sets up a &lt;code&gt;contracts&lt;/code&gt; directory in the specification project and configures a single base class for all tests.  Instead, we recommend setting up a directory structure such as the following to allow for tuning tests for individual consumers and to separate HTTP/messaging concerns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;contracts/
 |- &amp;lt;consumer1&amp;gt;/
 |--- http/
 |----- shouldReturnResultWhenRequestIsMade.groovy
 |--- messaging/
 |----- shouldProduceSuccessMessageWhenRequestIsProcessed.groovy
 |- &amp;lt;consumer2&amp;gt;/
 |--- http/
 |--- messaging/
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In your &lt;code&gt;build.gradle&lt;/code&gt; file, you&amp;rsquo;ll need to configure how this gets mapped to base classes.  The following will generate tests with a base class made up of the last two segments of the package such as &lt;consumer1&gt;HttpBase or &lt;consumer2&gt;MessagingBase in the &lt;code&gt;com.rate.auto.autorateablequote.contract&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;contracts {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;packageWithBaseClasses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;com.rate.auto.autorateablequote.contract&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can then provide those base class implementations as such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServiceApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WireMockConfiguration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mock&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Consumer1HttpBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;RestAssuredMockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RunWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServiceApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@AutoConfigureMessageVerifier&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WireMockConfiguration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mock&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Consumer1MessagingBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;RestAssuredMockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; 	* This method is called from the triggeredBy() method in the contract DSL to
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; 	* publish the message to be tested.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; 	*/&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;requestAutoRateApiIsCalled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;c1&#34;&gt;// given:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    	&lt;span class=&#34;n&#34;&gt;MockMvcRequestSpecification&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestAssuredMockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;given&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
            	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;application/json;charset=UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{\&amp;#34;quote\&amp;#34;:{\&amp;#34;jurisdiction\&amp;#34;:\&amp;#34;NY\&amp;#34;,\&amp;#34;policyEffectiveDate\&amp;#34;:\&amp;#34;2017-05-25T15:04:05-04:00\&amp;#34;,\&amp;#34;policyTransactionType\&amp;#34;:\&amp;#34;01\&amp;#34;,\&amp;#34;quoteEffectiveDate\&amp;#34;:\&amp;#34;2017-05-25T15:04:05-04:00\&amp;#34;,\&amp;#34;quoteId\&amp;#34;:\&amp;#34;1\&amp;#34;}}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    	&lt;span class=&#34;c1&#34;&gt;// when:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    	&lt;span class=&#34;n&#34;&gt;ResponseOptions&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestAssuredMockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;given&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/rateableQuote&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;contracts-for-restful-apis&#34;&gt;Contracts for RESTful APIs&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;def iso8601FormattedDatePattern = &amp;#39;(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})(\\.\\d+)?[+-](\\d{2})\\:(\\d{2})&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;org.springframework.cloud.contract.spec.Contract.make {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;method &amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;urlPath(&amp;#39;/rateableQuote&amp;#39;) {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;queryParameters {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;body([&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jurisdiction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[a-zA-Z]{2}&amp;#39;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyEffectiveDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(producer(&amp;#39;2017-05-25T15:04:05.999-04:00&amp;#39;), consumer(regex(iso8601FormattedDatePattern))),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTransactionType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[0-9]{2}&amp;#39;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;quoteEffectiveDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(producer(&amp;#39;2017-05-25T15:04:05.999-04:00&amp;#39;), consumer(regex(iso8601FormattedDatePattern))),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;quoteId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[0-9]+&amp;#39;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;headers {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;contentType(&amp;#34;application/json;charset=UTF-8&amp;#34;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;response {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;status 200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;headers {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;header(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/json;charset=UTF-8&amp;#34;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;body([&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$5.00&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;contracts-for-messaging-apis&#34;&gt;Contracts for Messaging APIs&lt;/h3&gt;
&lt;p&gt;In order to create tests and stubs for services that communicate via messages over &lt;a href=&#34;https://spring.io/projects/spring-cloud-stream&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Stream&lt;/a&gt;, you&amp;rsquo;ll need to add a handful of dependencies to your build.gradle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;testCompile(&amp;#34;org.springframework.cloud:spring-cloud-stream-test-support&amp;#34;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to test that your API controller emits a message as a side effect of an appropriate message call, you&amp;rsquo;ll need to express that contract in the contract DSL as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;def iso8601FormattedDatePattern = &amp;#39;(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})(\\.\\d+)?[+-](\\d{2})\\:(\\d{2})&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;org.springframework.cloud.contract.spec.Contract.make {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;input {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;// the contract will be triggered by a method&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;triggeredBy(&amp;#39;requestAutoRateApiIsCalled()&amp;#39;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;outputMessage {&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;// in Spring Cloud Stream, this is the destination channel where the message is expected to be published&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sentTo &amp;#39;rateable_quote&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;body([&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eventId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;QUOTE_DATA_COLLECTED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;quoteId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[0-9]+&amp;#39;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyEffectiveDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(iso8601FormattedDatePattern)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTransactionType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[0-9]{2}&amp;#39;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jurisdiction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(&amp;#39;[a-zA-Z]{2}&amp;#39;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;quoteEffectiveDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(iso8601FormattedDatePattern)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(iso8601FormattedDatePattern)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lastModified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value(regex(iso8601FormattedDatePattern))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You also need to implement the &lt;code&gt;requestAutoRateApiIsCalled()&lt;/code&gt; method in your producer implementation&amp;rsquo;s base class as described above so that generated tests will produce the message under test.&lt;/p&gt;
&lt;h2 id=&#34;outcome&#34;&gt;Outcome&lt;/h2&gt;
&lt;p&gt;This approach results in an environment where a microservice does not dictate the APIs it provides, but reacts to client needs by implementing them in a pull-based fashion. This inverts the classic architecture question &amp;ldquo;what data should my domain model contain?&amp;rdquo;  The answer in this pattern is &amp;ldquo;nothing until a client says it needs something&amp;rdquo;.  It allows the development team to work backwards from the finish line to the starting point, creating a consumer that needs some data and then looking for the service that should provide that data in order to make a contract with it.&lt;/p&gt;
&lt;p&gt;How does consumer driven contracts work when all services need &lt;em&gt;all&lt;/em&gt; of the data in order to interact with other legacy services that assume full access to a large data model?  In this case, it&amp;rsquo;s much harder for a client to say &amp;ldquo;I need X, Y, and Z&amp;rdquo; and turns into many clients asking for the same large payload.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://spring.io/blog/2016/10/31/webinar-replay-consumer-driven-contracts-and-your-microservice-architecture&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;webinar&lt;/a&gt; from a few years back also discusses the consumer-driven approach and provides a demo.&lt;/p&gt;
&lt;p&gt;As described in the introduction, a consumer-driven approach is sometimes used when breaking down a monolithic legacy application. For more on that topic, see the guide &lt;a href=&#34;/guides/microservices/deconstructing-the-monolith/&#34;&gt;Breaking Down a Monolith&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The consumer driven contract approach is almost by definition a “bottom up” method. An alternative, “top down” approach is described in the guide  &lt;a href=&#34;/guides/microservices/api-first-development/&#34;&gt;Understanding API-First Development&lt;/a&gt; in which you create an API contract before doing a full code implementation. The human-readable API specification is the first deliverable, allowing fast feedback from stakeholders.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Setting Up Spring Cloud Config Server</title>
      
      <link>/guides/spring/spring-cloud-config-set-up/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-cloud-config-set-up/</guid>
      <description>

        
        &lt;p&gt;As an application moves through the deployment pipeline from dev to test to production, you may need a centralized way to manage the configuration across environments to make certain that each application has access to everything it needs to run as it moves and always uses the right configuration. &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Config&lt;/a&gt; provides server-side and client-side support for managing and using external configuration information.&lt;/p&gt;
&lt;p&gt;This can have significant advantages with microservices applications where multiple instances of a microservice may be running at one time. Using a centralized config server makes it possible to ensure that all instances are configured the same way, and if you need to change a setting, like a timeout value, you only have to do it in one place (assuming your application encode includes a refresh mechanism).&lt;/p&gt;
&lt;p&gt;The Spring Cloud Config Server provides a central place to manage external properties for multiple applications across multiple environments, superseding or supplementing the environment variables and system properties used in most applications.&lt;/p&gt;
&lt;p&gt;This guide explains some important considerations for setting up and using a Spring Config Server. &lt;a href=&#34;/guides/spring/spring-cloud-config-security/&#34;&gt;Securing Spring Cloud Config Server&lt;/a&gt; digs into some security mechanisms that can be used with Spring Config Server.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-config-server&#34;&gt;Creating a Config Server&lt;/h2&gt;
&lt;p&gt;Spring Cloud Config Server acts as an intermediary between your Spring applications and a repository of configuration files. Creating a Config Server is straightforward. Use Spring Cloud’s &lt;code&gt;@EnableConfigServer&lt;/code&gt; to create a config server capable of communicating with your applications. This is a regular Spring Boot application with an annotation added to enable the config server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@EnableConfigServer&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConfigServer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConfigServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should switch the Config Server from the default port (8080) to the more conventional port (8888). This can be achieved by launching the Config Server with &lt;code&gt;spring.config.name=configserver&lt;/code&gt; (there is a &lt;code&gt;configserver.yml&lt;/code&gt; in the Config Server jar).&lt;/p&gt;
&lt;h3 id=&#34;spring-config-server-repositories&#34;&gt;Spring Config Server repositories&lt;/h3&gt;
&lt;p&gt;A Spring Config Server instance needs a place to store configuration information. A centralized repository is used for this information.The location of the repository is controlled by the &lt;code&gt;EnvironmentRepository&lt;/code&gt;, serving &lt;code&gt;Environment&lt;/code&gt; objects. &lt;code&gt;Environment&lt;/code&gt; resources have three parameters:&lt;/p&gt;
&lt;p&gt;*&lt;code&gt;{application}&lt;/code&gt;, which maps to &lt;code&gt;spring.application.name&lt;/code&gt; on the client side.&lt;/p&gt;
&lt;p&gt;*&lt;code&gt;{profile}&lt;/code&gt;, which maps to &lt;code&gt;spring.profiles.active&lt;/code&gt; on the client (comma-separated list).&lt;/p&gt;
&lt;p&gt;*&lt;code&gt;{label}&lt;/code&gt;, which is a server side feature labeling a &amp;ldquo;versioned&amp;rdquo; set of config files.&lt;/p&gt;
&lt;p&gt;A repository loads configuration files from a &lt;code&gt;spring.config.name&lt;/code&gt; based on the &lt;code&gt;{application}&lt;/code&gt; parameter, and &lt;code&gt;spring.profiles.active&lt;/code&gt; based on the &lt;code&gt;{profiles}&lt;/code&gt; parameter. Active profiles take precedence over defaults.&lt;/p&gt;
&lt;h4 id=&#34;repository-types&#34;&gt;Repository types&lt;/h4&gt;
&lt;p&gt;Spring Config Server supports a wide range of different &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#_environment_repository&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;repository types&lt;/a&gt;, making it appropriate to address almost any need from simple to complex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git backend.&lt;/strong&gt; Uses a local, git-based file system repository, GitHub, GitLab, or other.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File system backend.&lt;/strong&gt; Stores config information in a local file system without version control.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vault backend.&lt;/strong&gt; Uses Vault by HashiCorp to create a secure repository. (Described in &lt;a href=&#34;/guides/spring/spring-cloud-config-security/&#34;&gt;Securing Spring Cloud Config Server&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDBC backend.&lt;/strong&gt; Uses the Java Database Connector (JDBC) to connect to a relational database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis backend.&lt;/strong&gt; Uses the &lt;a href=&#34;https://redis.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Redis&lt;/a&gt; in-memory database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS S3 backend.&lt;/strong&gt; Uses an &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;AWS S3 bucket&lt;/a&gt; as a repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CredHub backend.&lt;/strong&gt; Uses Cloud Foundry’s &lt;a href=&#34;https://docs.cloudfoundry.org/credhub/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;CredHub&lt;/a&gt; as a repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default is a Git-based backend. This is convenient for managing upgrades, physical environments and for auditing changes, but you’re free to choose whichever backend fits your organization’s needs based on which options you’re familiar with or already using, where your environments are running, and what your security needs are. &lt;a href=&#34;/guides/spring/spring-cloud-config-security/&#34;&gt;Securing Spring Cloud Config Server&lt;/a&gt; focuses on security, and explains how to use Vault as a secure backend.&lt;/p&gt;
&lt;p&gt;All the options are explained in detail in the &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#_environment_repository&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Config Reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;using-multiple-repositories&#34;&gt;Using multiple repositories&lt;/h4&gt;
&lt;p&gt;You may wish to keep configuration data in &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#composite-environment-repositories&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;multiple environment repositories&lt;/a&gt;. To do so, you can enable the &lt;code&gt;composite&lt;/code&gt; profile in your configuration server’s application properties or YAML file.&lt;/p&gt;
&lt;h3 id=&#34;sharing-configuration-information-with-all-applications&#34;&gt;Sharing Configuration Information with All Applications&lt;/h3&gt;
&lt;p&gt;You can share a set of configuration information with all your applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With file-based repositories, resources with file names application.properties, application.yml, application-*.properties, and so on) are shared with all client applications. You can use resources with these file names to configure global defaults and have them be overridden by application-specific files if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using Vault as a backend, you can share configuration with all applications by placing configurations in &lt;code&gt;secret/application&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;property-overrides&#34;&gt;Property Overrides&lt;/h3&gt;
&lt;p&gt;The Spring Config Server includes an &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#property-overrides&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;overrides feature&lt;/a&gt; that lets an operator provide configuration properties to all applications. The overridden properties cannot be accidentally changed by the application with the normal Spring Boot hooks.&lt;/p&gt;
&lt;h2 id=&#34;client-side-usage&#34;&gt;Client-Side Usage&lt;/h2&gt;
&lt;p&gt;To make use of &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#_client_side_usage&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Config Server in a client application&lt;/a&gt;, you build your Spring Boot application so it depends on &lt;code&gt;spring-cloud-config-client&lt;/code&gt;. The easiest way to add the dependency is with a Spring Boot starter &lt;code&gt;org.springframework.cloud:spring-cloud-starter-config&lt;/code&gt;. There is also a parent POM and BOM (spring-cloud-starter-parent) for Maven users and a Spring IO version management properties file for Gradle and Spring CLI users.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;A great way to get started learning about and using Spring Cloud Config is the &lt;a href=&#34;https://spring.io/guides/gs/centralized-configuration/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Centralized Configuration Guide&lt;/a&gt;. This guide takes about 15 minutes, stepping through the process of setting up a Config Server and consuming configuration information from a client. It also illustrates how to refresh configuration without restarting the client.&lt;/p&gt;
&lt;p&gt;In a recent &lt;a href=&#34;/tv/springone-tour/0006/&#34;&gt;Spring Tips video&lt;/a&gt; from the 2020 SpringOne tour, Developer Advocate Josh Long goes deep on configuration methods, including Spring Cloud Config.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/guides/spring/spring-cloud-config-security/&#34;&gt;Securing Spring Cloud Config Server&lt;/a&gt; explains how to implement several security options in conjunction with Spring Cloud Config.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Understanding API-First Development</title>
      
      <link>/guides/microservices/api-first-development/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/api-first-development/</guid>
      <description>

        
        &lt;p&gt;Organizations are increasingly embracing new processes to deal with microservices architectures, containerization, and continuous delivery as part of the cloud migration journey.
Traditional code-first application development focuses on implementing business logic first, leaving the interface that will eventually be created to expose the functionality as an afterthought. At the time of implementing the interface (the API), most or all business logic has already been implemented, which results in the core business logic driving the API. The API has not been shared with either consumer teams or QA before the code is built, precluding any timely feedback.&lt;/p&gt;
&lt;p&gt;Enterprise Architects, API consumers, QA resources, etc. have access to the API only when the code is committed to source control. Any feedback requires implementation changes, eliminating any possibility of parallelizing development efforts. Additional feedback loops result in delays for API consumers and push back overall project delivery. In effect, it becomes a traditional waterfall process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom-line&lt;/strong&gt;: in a &lt;strong&gt;“Code-First”&lt;/strong&gt; approach, you code the API and generate a machine-readable definition from the code.&lt;/p&gt;
&lt;h2 id=&#34;the-design-first-and-api-first-approach&#34;&gt;The Design-First and API-First Approach&lt;/h2&gt;
&lt;p&gt;In the alternative &lt;strong&gt;“Design-First”&lt;/strong&gt; approach, you write out your API design in a human and machine-readable form that all stakeholders can understand, review, and discuss before starting to code.&lt;/p&gt;
&lt;p&gt;In API design, &lt;strong&gt;“Contract-First”&lt;/strong&gt; is used interchangeably with Design-First, indicating that the API Designer defines the contract of the API before the implementation is coded. Applying the design-first / contact-first methodology to the world of API development results in &lt;strong&gt;“API-First”&lt;/strong&gt; development.&lt;/p&gt;
&lt;p&gt;The basic idea is that you create an API contract before doing a full code implementation. The human-readable API specification becomes the first deliverable, allowing fast feedback from various stakeholders. These rapid iterations are a game changer, as changing the API specification takes minutes not hours or days and &lt;strong&gt;&lt;em&gt;all stakeholders have the same understanding and speak the same language&lt;/em&gt;&lt;/strong&gt;. Once the team determines that the API specification is “good enough”, the skeleton of a full application can be generated. Many different programming languages are supported. For example, a full Spring Boot Application including &lt;a href=&#34;https://maven.apache.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Maven&lt;/a&gt; scripts and JSON-to-Java mapping can be generated.&lt;/p&gt;
&lt;p&gt;The developer codes the business logic implementation in the generated server stub. As the server-side developer is working on their implementation, consumers of the API can generate client-side stubs and start their implementation work. QA teams can use the API spec to get a head start on service testing.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;API-First&lt;/strong&gt;  approach has several advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design-driven development - API designers use the API design to drive development efforts&lt;/li&gt;
&lt;li&gt;Parallel work - Multiple stakeholders work in parallel (API designers, API consumers, technical writers, QA)&lt;/li&gt;
&lt;li&gt;API Governance - API teams can use a *&lt;em&gt;contract-as-code&lt;/em&gt; approach, versioning and publishing their API specifications&lt;/li&gt;
&lt;li&gt;Assisting DevOps - DevOps team can use the API design to test the API before Production deployment&lt;/li&gt;
&lt;li&gt;Agility in incorporating changes - API design becomes an ongoing and evolving process, well-supported by automated tooling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: API First is illustrated in this document through the lens of the &lt;a href=&#34;http://spec.openapis.org/oas/v3.0.3&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenAPI Specification&lt;/a&gt;, with code generated for a &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot Application&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;api-first-with-open-api-spec-30&#34;&gt;API-First with Open API Spec 3.0&lt;/h2&gt;
&lt;p&gt;The OpenAPI Specification (OAS) is a language and vendor-agnostic API specification standard, which allows both humans and computers to discover and understand the capabilities of the service without access to source code or documentation. When properly defined, a consumer can understand and interact with a remote service with a minimal amount of implementation logic. While there are many permutations of tools, technologies, and languages to approach API design and development, most new server-side development happens in the Java programming language.&lt;/p&gt;
&lt;p&gt;This document will walk you through a well-known problem (Petstore) and illustrates a real-world scenario of putting &lt;strong&gt;‘API-First in Practice’&lt;/strong&gt; with Open API for the first time. The goal is to provide a clear path to becoming effective at agile API development&lt;/p&gt;
&lt;p&gt;Read more about the &lt;a href=&#34;https://openapis.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open API Initiative&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;api-first-development-workflow&#34;&gt;API-First Development Workflow&lt;/h2&gt;
&lt;p&gt;There are 7 high-level steps in the API-First workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; the API specification&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; API specs at-scale within your organization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaborate&lt;/strong&gt; with stakeholders&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version / Share&lt;/strong&gt; API spec with other teams&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generate&lt;/strong&gt; Client/Server scaffolding for Spring Boot&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implement&lt;/strong&gt; business logic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy&lt;/strong&gt; the microservice&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/api-first/api-first-dev-new.png&#34; alt=&#34;API Dev Flow&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;In summary, begin the API design using the OpenAPI Spec 3.0.x. Then evolve and iterate the API specification in collaboration with the product owner, service consumers, and other stakeholders. Once the team is comfortable that the API specification is &amp;lsquo;good enough&amp;rsquo; - generate the server-side artifacts for a Spring Boot Application. Finally, deploy the app to the cloud or locally.&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-the-api-specification&#34;&gt;Step 1: Create the API Specification&lt;/h2&gt;
&lt;p&gt;Use the OpenAPI 3.0 specification standard and the YAML format to describe the API.&lt;/p&gt;
&lt;p&gt;This example uses a modified Petstore OpenAPI &lt;a href=&#34;https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;sample spec&lt;/a&gt;, incorporating concepts such as &lt;strong&gt;contract-as-code&lt;/strong&gt; and API governance.
The starting point for this exercise is the &lt;a href=&#34;/images/guides/microservices/api-first/apifirst_openapi.yaml&#34;&gt;API-First OpenAPI specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Start by importing the &lt;a href=&#34;/images/guides/microservices/api-first/apifirst_openapi.yaml&#34;&gt;API specification&lt;/a&gt; into the Web version of the &lt;a href=&#34;https://editor.swagger.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenAPI editor&lt;/a&gt;. Please note that the editor starts by default with a sample, or your last imported specifications. You can also run the OpenAPI editor &lt;a href=&#34;https://swagger.io/docs/open-source-tools/swagger-editor/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;locally&lt;/a&gt; if you prefer.
&lt;img src=&#34;/images/guides/microservices/api-first/apieditor.png&#34; alt=&#34;API Editor&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-top-level-context-of-the-api&#34;&gt;The top-level context of the API:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;openapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.0.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    ddobrin: 
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    This is a sample Pet Store Server based on the OpenAPI 3.0 specification, with changes to the specification file layout.
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    The resulting specification file illustrates reusable specification elements, for usage in organizations building APIs at scale.
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    swagger.io team:
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we have switched to the design first approach!
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    You can now help us improve the API whether it is by making changes to the definition itself or to the code.
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    Some useful links:
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    - [The Original Pet Store repository](https://github.com/swagger-api/swagger-petstore)
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    - [The original source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0.6&lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;SNAPSHOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Swagger Petstore - OpenAPI 3.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;termsOfService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://swagger.io/terms/&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ddobrin@vmware.com &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;license&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Apache 2.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://www.apache.org/licenses/LICENSE-2.0.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Everything about your Pets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;externalDocs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Find out more&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://swagger.io&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Operations about user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Access to Petstore orders&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;externalDocs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Find out more about our store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://swagger.io&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Consumers of the API should start by reading the info, version and tags sections to understand its purpose and goals. This should be followed by a detailed analysis of the tags, paths and component information to understand the API fully and to learn how to interact with it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;openapi&lt;/strong&gt; - This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document uses, based on &lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Semver 2.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;info&lt;/strong&gt; - This element provides metadata about the API and MAY be used by tooling as required&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; -  Ensure that the title is clear and broad enough that it covers the API as whole&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; - Specifies the version of this particular specification, for ex 1.0.6-SNAPSHOT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; - Specifies a list of unique tags used by the specification with additional metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;defining-the-paths&#34;&gt;Defining the Paths&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Add a new pet to the store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Add a new pet to the store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operationId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;addPet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;responses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Successful operation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;405&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Invalid input&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;petstore_auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;write:pets&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;read:pets&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Create a new pet in the store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Update an existing pet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Update an existing pet by Id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operationId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;updatePet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;responses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Successful operation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;400&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Invalid ID supplied&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pet not found&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;405&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Validation exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;petstore_auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;write:pets&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;read:pets&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Update an existent pet in the store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Pet&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/pet/findByStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/pet/findByTags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The path parameters define the shape of the API via URIs. Each URI definition has multiple HTTP verbs that can act on it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;post&lt;/strong&gt;, &lt;strong&gt;put&lt;/strong&gt;, &lt;strong&gt;get&lt;/strong&gt;, etc - Definition of the respective operation in this path, what the API expects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;, &lt;strong&gt;description&lt;/strong&gt; - A short summary and description of what the operation does and its behavior&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;operationId&lt;/strong&gt; - Unique string to identify the operation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; - Tags used for logical grouping of operations by resources or other qualifiers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security&lt;/strong&gt; - Contains a declaration of which security mechanisms can be used for this operation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;requestBody&lt;/strong&gt; - The request body applicable for this operation, supported only in HTTP methods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;responses&lt;/strong&gt; - The list of possible responses as they are returned from executing this operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;defining-the-component-objects&#34;&gt;Defining the Component Objects&lt;/h3&gt;
&lt;p&gt;The Component Object section defines a set of reusable objects for different aspects of the OpenAPI spec. Objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.&lt;/p&gt;
&lt;p&gt;Please note that the definitions for some of the component objects have been commented out and replaced by a link to an external document. This is addressed and explained in step 2 of this guide.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schemas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fehguy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#/components/schemas/Address&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;wrapped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;addresses&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;street&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;437&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Lytton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;city&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Palo Alto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;94301&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The response has been refactored into a reusable element definition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ApiResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./schemas/response.yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ApiResponse:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   properties:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#     code:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#       type: integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#       format: int32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#     type:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#       type: string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#     message:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#       type: string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   xml:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#     name: &amp;#39;##default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   type: object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-build-api-specs-at-scale-within-your-organization&#34;&gt;Step 2: Build API Specs At-Scale Within Your Organization&lt;/h2&gt;
&lt;p&gt;Organizations don’t build the majority of their API specifications in isolation or as one-off documents. As lines-of-business scale up their API/Microservices efforts, it is imperative to introduce best practices to API design, similar to their development or deployment counterparts.&lt;/p&gt;
&lt;p&gt;One such best practice is &lt;strong&gt;reuse&lt;/strong&gt; of specification component objects, while treating API specs in the context of &lt;strong&gt;governance&lt;/strong&gt; as &lt;strong&gt;contract-as-code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In our Petstore spec, we have simply externalized the definition of the ApiResponse and Order objects to separate files, which offers major advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Version each of the component files independently using the same Semver semantic versioning notation&lt;/li&gt;
&lt;li&gt;Allow different APIs to use independent versions of reusable component objects&lt;/li&gt;
&lt;li&gt;Standardize reusable components such as header elements, standard errors, reusable domain object representation, etc.&lt;/li&gt;
&lt;li&gt;Integrate with DevOps processes for consistent management of APIs at scale&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# apifirst_openapi.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The response has been refactored into a reusable element definition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ApiResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;$ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./schemas/response.yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# response.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;##default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While this process lends itself well to building API specs at scale within an organization, from a design perspective, we need to look at the &lt;strong&gt;process of bundling&lt;/strong&gt; multiple API specification files into a single file, representing the API specification. This bundling process is a prerequisite to generating client/server stubs from a single definition file or publishing the spec to the API Marketplace, where consumers can discover it.&lt;/p&gt;
&lt;p&gt;API marketplaces aggregate APIs and provide a place for application developers to upload, distribute, and monetize their APIs while also providing a space for consumers to discover and implement APIs for their own products. Organizations will decide which APIs will be published for internal, respectively external consumption.&lt;/p&gt;
&lt;p&gt;Another big benefit for providers who list their APIs on a marketplace is that It makes it possible to publish an API to gather feedback and assess its feasibility, before proceeding to its implementation.&lt;/p&gt;
&lt;p&gt;There are multiple tools available to bundle API specifications. For this example, I use &lt;a href=&#34;https://github.com/APIDevTools/swagger-cli&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;&lt;em&gt;swagger-cli&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Installation&lt;/span&gt;
npm install -g @apidevtools/swagger-cli

&lt;span class=&#34;c1&#34;&gt;# Usage &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# bundle a file&lt;/span&gt;
&amp;gt; swagger-cli bundle -o &amp;lt;bundled file&amp;gt; -t yaml &amp;lt;starter file&amp;gt;

&lt;span class=&#34;c1&#34;&gt;# validate the file against the OpenAPI v3 specification&lt;/span&gt;
&amp;gt; swagger-cli validate &amp;lt;bundled file&amp;gt;

&lt;span class=&#34;c1&#34;&gt;# Our example&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Start file: apifirst_openapi.yaml&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# De-referenced files: order.yaml and response.yaml&lt;/span&gt;
&amp;gt; swagger-cli bundle -o apifirst_openapi_bundled.yaml -t yaml apifirst_openapi.yaml
&amp;gt; swagger-cli validate apifirst_openapi_bundled.yaml 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The bundled file is available &lt;a href=&#34;/images/guides/microservices/api-first/apifirst_openapi_bundled.yaml&#34;&gt;here&lt;/a&gt; and you can observe the de-referenced component objects, for example ApiResponse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ApiResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;##default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-collaborate-with-stakeholders&#34;&gt;Step 3: Collaborate with stakeholders&lt;/h2&gt;
&lt;p&gt;As the API is developing, the specification file can and should be shared with other collaborators for review. The idea is to ensure that the paths and models are &lt;em&gt;good enough&lt;/em&gt;. You don&amp;rsquo;t have to strive for perfection; a few brief meetings with stakeholders will ensure that there is a common understanding and consensus. API-First allows for rapid iterations without changing the code/plumbing during the initial phases.&lt;/p&gt;
&lt;p&gt;The first cut of an API spec should minimally include the RESTful paths, responses and high-level request and response objects. The API should be small enough to make it easily understandable for a stakeholder within a single review session. A good understanding of domain driven design, API design, REST design and Open API spec are all prerequisites.&lt;/p&gt;
&lt;p&gt;The API design spec can save you hours of implementation and refactoring effort when developing the code. It allows subject matter experts to discuss the API and make changes.  Quality engineers can get involved and begin early test design and development. Architects can begin to think about system architecture implications and sourcing of data. Data analysts can begin thinking about data fields and standards alignment where appropriate. The spec becomes the campfire across which multiple teams can gather to discuss the API and make changes.&lt;/p&gt;
&lt;h2 id=&#34;step-4-version--share-api-spec-with-other-teams&#34;&gt;Step 4: Version / Share API Spec with Other Teams&lt;/h2&gt;
&lt;p&gt;API specifications should be treated as code; they should be shared and versioned.&lt;/p&gt;
&lt;p&gt;Design and development teams are familiar with source control tools and should apply the same governance principles to API specifications, introducing the concept of &lt;strong&gt;contract-as-code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This allows the decoupling of teams working on code generation and implementation from API Design teams&amp;ndash;who can continue work on refining the spec&amp;ndash;or QA and Architecture teams.&lt;/p&gt;
&lt;h2 id=&#34;step-5-generate-clientserver-scaffolding-for-spring-boot&#34;&gt;Step 5: Generate Client/Server Scaffolding for Spring Boot&lt;/h2&gt;
&lt;p&gt;To jump-start the API development process, a command-line tool can be used to generate artifacts for both the client and server side. This guide demonstrates the process for Spring Boot as an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server-side - project scaffolding, including Spring Boot artifacts for controller, model and API, as well as configuration and the Maven POM file&lt;/li&gt;
&lt;li&gt;client-side - model to be used by the client, in their language of choice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The example below uses the &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenAPI Generator&lt;/a&gt; from &lt;a href=&#34;https://openapitools.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenAPITools&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Installation&lt;/span&gt;
&amp;gt; brew install openapi-generator

&lt;span class=&#34;c1&#34;&gt;# Usage &lt;/span&gt;
&amp;gt; openapi-generator-cli generate -i &amp;lt;input API spec&amp;gt; -g &amp;lt;target&amp;gt; -o &amp;lt;output folder&amp;gt;

&lt;span class=&#34;c1&#34;&gt;# Generate Spring Boot artifacts from the specification defined in **apifirst_openapi_bundled.yaml**&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Use default parameters, for ex Java 8&lt;/span&gt;
&amp;gt; openapi-generator generate -i apifirst_openapi_bundled.yaml -g spring -o output

&lt;span class=&#34;c1&#34;&gt;# You have the choice of generating a Java or Kotlin Spring Boot project, with detailed generation parameters listed below&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Multiple parameters can be customized, for ex. package names, Java version, Reactor artifacts, etc&lt;/span&gt;
https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/spring.md
https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/kotlin-spring.md 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated artifacts are built and Spring Boot can then be started:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# build&lt;/span&gt;
&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; output
&amp;gt; mvn clean package

&lt;span class=&#34;c1&#34;&gt;# start the app; built Jar derives the name from the version in the spec&lt;/span&gt;
&amp;gt; java -jar target/openapi-spring-1.0.6-SNAPSHOT.jar 
&lt;span class=&#34;c1&#34;&gt;# or &lt;/span&gt;
&amp;gt; mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate client-side artifacts, for example in Java, you can use the parameters defined in&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt; openapi-generator generate -i apifirst_openapi_bundled.yaml -g java -o output_client

https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The API generator automatically generates a user-friendly web page (Swagger UI), which you can leverage right away after starting the Spring Boot application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/api-first/api-first-swaggerui1.png&#34; alt=&#34;Swagger UI&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;This allows for quick execution of the API &amp;ndash; the web-form allows for data to be entered directly and for the API to be tested quickly by any user without special tools or technology skill sets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/api-first/api-first-swaggerui2.png&#34; alt=&#34;Swagger UI Try It&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-6-implement-business-logic&#34;&gt;Step 6: Implement Business Logic&lt;/h2&gt;
&lt;p&gt;The generated code can be opened in the IDE of your choice and business logic can be implemented in the three controllers generated for this API: Pet, User, Store API Controller.
&lt;img src=&#34;/images/guides/microservices/api-first/api-first-springboot-intellij.png&#34; alt=&#34;Spring Boot&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-7-deploy-the-microservice&#34;&gt;Step 7: Deploy the Microservice&lt;/h2&gt;
&lt;p&gt;As you have seen, the OpenAPI generator generates source code, Maven scripts, etc., allowing you to build the executable Spring Boot JAR file. It is up to your team to decide what process you will follow when deploying the resulting service on-premises or to the cloud.&lt;/p&gt;
&lt;h2 id=&#34;why-choose-api-first&#34;&gt;Why Choose API-First?&lt;/h2&gt;
&lt;p&gt;There are many permutations of tools, technologies, languages and methods for approaching API design and development. You can save weeks of microservices coding with a few hours of API design and proper governance and communication.&lt;/p&gt;
&lt;p&gt;The goal of this guide is to provide a clear path to effective API-First development. API-First Development practice as outlined in this document is not only effective, but also consistent, repeatable and makes more efficient use of human resources.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a widely used, opinionated list of things you should be aware of to make effective use of API-First:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open API 3.0 Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.json.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JSON Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yaml.org/spec/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;YAML Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://editor.swagger.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open API Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The specifications used in this document can be found here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;/images/guides/microservices/api-first/apifirst_openapi.yaml&#34;&gt;The start API First specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/images/guides/microservices/api-first/schemas/response.yaml&#34;&gt;The ApiResponse component object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/images/guides/microservices/api-first/schemas/order.yaml&#34;&gt;The Order component object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/images/guides/microservices/api-first/apifirst_openapi_bundled.yaml&#34;&gt;The bundled API First specification&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Need to get up to date on what’s happening around APIs? &lt;a href=&#34;https://www.postman.com/state-of-api/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The 2020 State of the API Report&lt;/a&gt; describes the latest trends based on a worldwide survey.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: SpringOne Tour DevOps</title>
      
      <link>/workshops/lab-springone-tour-devops/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-springone-tour-devops/</guid>
      <description>

        
        &lt;p&gt;During this workshop you will automate the testing and deployment of a Spring Boot app and its backing database to Kubernetes, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the app locally to understand its behavior&lt;/li&gt;
&lt;li&gt;Review embedded testing
&lt;ul&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Integration testing for APIs using contracts&lt;/li&gt;
&lt;li&gt;Integration testing for databases using Flyway and Testcontainers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automate testing using GitHub Actions&lt;/li&gt;
&lt;li&gt;Automate container builds using kpack&lt;/li&gt;
&lt;li&gt;Automate deployment to Kubernetes using GitOps and ArgoCD&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Spring Booternetes</title>
      
      <link>/workshops/lab-spring-booternetes/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-spring-booternetes/</guid>
      <description>

        
        &lt;p&gt;During this workshop you will move an application comprising 4 Spring Boot apps to Kubernetes, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test the app locally using Spring Cloud Config Server and Eureka to understand its behavior&lt;/li&gt;
&lt;li&gt;Replatform the apps to Kubernetes using Spring Cloud Kubernetes (without Spring Cloud Config Server and Eureka)&lt;/li&gt;
&lt;li&gt;Replatform the apps to Kubernetes without using Spring Cloud Kubernetes&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Introducing the Tanzu Observability Slug Generator</title>
      
      <link>/blog/introducing-the-tanzu-observability-slug-generator/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/introducing-the-tanzu-observability-slug-generator/</guid>
      <description>

        
        &lt;p&gt;A great feature of &lt;a href=&#34;https://tanzu.vmware.com/observability&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Observability&lt;/a&gt; is that all context about the chart or dashboard that you are looking at is encoded in the URL, which makes it easy for you to share those links with your colleagues and to deep link into our product from other places such as wiki pages. A consequence of this is that the URL slug is rather involved. This is not a problem when the UI generates the URL, but it becomes very tedious when customers try to create the URL on their own in order to automate and embed Tanzu Observability charts and dashboards outside of the product itself.&lt;/p&gt;
&lt;p&gt;To help customers take better advantage of Tanzu Observability charts and dashboards as well as allow easier automation and customization, we recently open sourced our Tanzu Observability URL slug generation code. This code lets you programmatically generate links to charts and dashboards that you can then embed wherever you like to give users an easy to find view of the metrics that matter to them.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-url-slug&#34;&gt;What is a URL Slug?&lt;/h2&gt;
&lt;p&gt;If you are not familiar with a URL slug, it is the last part of a URL that comes after the domain name. For example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vmware.com/company.html&#34;&gt;https://www.vmware.com/company.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the URL above, “company.html” is referred to as the URL slug.&lt;/p&gt;
&lt;p&gt;In some cases, the URL slug is relatively simple. In the case of a Tanzu Observability chart or dashboard, a lot of information is encoded in the slug which makes it difficult for humans to parse and even trickier to generate. For example, a Tanzu Observability slug might looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(c:(b:1,id:chart,n:Chart,ne:!t,s:!((n:source,q:&#39;ts(metrics)&#39;,qb:!n,qbe:!f)),smp:off),g:(c:off,d:7200,g:auto,s:1373948820),t:customer)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luckily, you do not have to parse URLs manually. But at times, it can be convenient to generate a Tanzu Observability dashboard or chart in code and this is where the open sourced library comes in.&lt;/p&gt;
&lt;h2 id=&#34;where-to-find-the-code&#34;&gt;Where to Find the Code?&lt;/h2&gt;
&lt;p&gt;The open sourced URL slug generation code can be found in the &lt;a href=&#34;https://github.com/vmware-tanzu/tanzu-observability-slug-generator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu GitHub organization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that previously open sourced code can be found under &lt;a href=&#34;https://github.com/wavefrontHQ&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Wavefront in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-get-started&#34;&gt;How to Get Started&lt;/h2&gt;
&lt;p&gt;Complete instructions to use the code can be found in the &lt;a href=&#34;https://github.com/vmware-tanzu/tanzu-observability-slug-generator/blob/main/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;README.md file in the GitHub directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The README file includes information about prerequisites for Maven and Gradle as well as instructions on how to create chart and dashboard slugs.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Generating Tanzu Observability URL slugs can be cumbersome and error prone. With the newly open sourced URL slug generation code, you can easily and automatically generate URL slugs and embed charts and dashboards in the pages that make the most sense for your business.&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tanzu.vmware.com/observability-trial&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Try Tanzu Observability and get started today&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are a Spring developer, take a look at the &lt;a href=&#34;https://spring.io/guides/gs/tanzu-observability/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;guide for Tanzu Observability&lt;/a&gt; as well as our guide on &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/spring/spring-wavefront-gs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Getting Started with Wavefront for Spring Boot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vmware-tanzu/tanzu-observability-slug-generator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Get started with generating URL slugs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Spring on Kubernetes</title>
      
      <link>/workshops/spring-on-kubernetes/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/spring-on-kubernetes/</guid>
      <description>

        
        &lt;p&gt;During this workshop you will learn the finer details of how to create, build, run, and debug a basic Spring Boot app on
Kubernetes by doing the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a basic Spring Boot app&lt;/li&gt;
&lt;li&gt;Build a Docker image for the app&lt;/li&gt;
&lt;li&gt;Push the image to a Docker registry&lt;/li&gt;
&lt;li&gt;Deploy and run the app on Kubernetes&lt;/li&gt;
&lt;li&gt;Test the app using port-forwarding and ingress&lt;/li&gt;
&lt;li&gt;Use skaffold to iterate easily as you work on your app&lt;/li&gt;
&lt;li&gt;Use kustomize to manage configurations across environments&lt;/li&gt;
&lt;li&gt;Externalize application configuration using ConfigMaps&lt;/li&gt;
&lt;li&gt;Use service discovery for app-to-app communication&lt;/li&gt;
&lt;li&gt;Deploy the Spring PetClinic App with MySQL&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Getting Started with Spring Cloud Gateway</title>
      
      <link>/workshops/lab-spring-gateway/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-spring-gateway/</guid>
      <description>

        
        &lt;p&gt;This workshop walks you through getting started with the Spring Cloud Gateway. The Spring Cloud Gateway is a library for building an API Gateway on top of Spring MVC. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Spring Boot Probes on Kubernetes</title>
      
      <link>/workshops/lab-spring-boot-k8s-probes/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-spring-boot-k8s-probes/</guid>
      <description>

        
        &lt;p&gt;This lab shows you how to add liveness and readiness probes to a Spring Boot application in Kubernetes. This lab will cover the following tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add some endpoints to a Spring Boot application and build and push a Docker image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the probes in a few lines of YAML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the image as a container in Kubernetes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Spring Boot Skaffold on Kubernetes</title>
      
      <link>/workshops/lab-spring-boot-k8s-skaffold/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-spring-boot-k8s-skaffold/</guid>
      <description>

        
        &lt;p&gt;This lab shows you how to work with Skaffold to reduce the toil of developing and pushing applications to Kubernetes. To do this we need to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Configure the Skaffold tool in a few lines of YAML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the image as a container in Kubernetes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Spring Microservices</title>
      
      <link>/workshops/lab-microservice/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-microservice/</guid>
      <description>

        
        &lt;p&gt;In this short workshop you will build a simple microservice with Spring. Spring Boot’s many purpose-built features make it easy to build and run your microservices in production at scale. And don’t forget, no microservice architecture is complete without Spring Cloud—easing administration and boosting your fault-tolerance.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Getting Started with Docker Containers on Kubernetes</title>
      
      <link>/guides/kubernetes/from-docker-to-kubernetes/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/from-docker-to-kubernetes/</guid>
      <description>

        
        &lt;p&gt;Once you understand what &lt;a href=&#34;/guides/containers/what-are-containers&#34;&gt;containers&lt;/a&gt; and &lt;a href=&#34;/guides/kubernetes/what-is-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; are, the next step is to learn how the two work together. This guide provides an example of containerizing a simple application using Docker and deploying it on Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h2&gt;
&lt;p&gt;Docker is an open source container platform that uses OS-level virtualization to package your software in units called containers. Containers are isolated from each other and are designed to be easily portable. You can build, run and distribute applications in Docker containers to run on Linux, Windows, Macs and almost anywhere else&amp;ndash;both on-premises and in the cloud. The Docker environment also includes a container runtime as well as build and image management.&lt;/p&gt;
&lt;h2 id=&#34;docker-containers&#34;&gt;Docker Containers&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;Docker container image&lt;/strong&gt; is a lightweight, standalone, executable software package that includes everything needed to run an application: code, runtime, system tools, system libraries and settings. Docker provides a standard format for packaging and porting software, much like ISO containers define a standard for shipping freight. A runtime instance of a Docker image consists of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Docker image&lt;/li&gt;
&lt;li&gt;The environment in which the image is executed&lt;/li&gt;
&lt;li&gt;A set of instructions for running the image&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-and-kubernetes&#34;&gt;Docker and Kubernetes&lt;/h2&gt;
&lt;p&gt;A containerized application image along with a set of declarative instructions can be passed to Kubernetes to deploy an application. The containerized app instance running on the Kubernetes node derives the container runtime from the Kubernetes node along with compute, network, and storage resources, if needed.&lt;/p&gt;
&lt;p&gt;Here’s what it takes to move a Docker container to a Kubernetes cluster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a container image from a Dockerfile&lt;/li&gt;
&lt;li&gt;Build a corresponding YAML file to define how Kubernetes deploys the app&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dockerfile-to-create-a-hello-world-container-image&#34;&gt;Dockerfile to Create a Hello World Container Image&lt;/h3&gt;
&lt;p&gt;A manifest, called a Dockerfile, describes how the image and its parts are to run in a container deployed on a host. To make the relationship between the Dockerfile and the image concrete, here’s an example of a Dockerfile that creates a &amp;ldquo;Hello World&amp;rdquo; app from scratch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;FROM scratch
COPY hello /
CMD [&amp;#34;/hello&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you give this Dockerfile to a local instance of Docker by using the &lt;code&gt;docker build&lt;/code&gt; command, it creates a container image with the &amp;ldquo;Hello World&amp;rdquo; app installed in it.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-kubernetes-deployment-for-hello-world&#34;&gt;Creating a Kubernetes Deployment for Hello World&lt;/h3&gt;
&lt;p&gt;Next you need to  define a deployment manifest, commonly done with a YAML or JSON file, to tell Kubernetes how to run &amp;ldquo;Hello World&amp;rdquo; based on the container image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Hello World Deployment YAML&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;boskey/helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;128Mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To deploy the application on a Kubernetes cluster, you can submit a YAML file using a &lt;code&gt;kubectl&lt;/code&gt; command similar to the following.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f https://yourdomain.ext/application/helloworld.yaml --record&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once that’s done, the hello world container is deployed in a Kubernetes pod.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-kubernetes-service&#34;&gt;Creating a Kubernetes Service&lt;/h2&gt;
&lt;p&gt;The container is now deployed to Kubernetes but there is no way to communicate with it, the next step is to turn the deployment into a Service by establishing communication.&lt;/p&gt;
&lt;p&gt;In Kubernetes, a Service is an abstraction which defines a logical set of pods and a policy by which to access them. This guide demonstrates a basic method of providing services to pods.&lt;/p&gt;
&lt;h3 id=&#34;application-labels-and-services&#34;&gt;Application Labels and Services&lt;/h3&gt;
&lt;h4 id=&#34;labels&#34;&gt;Labels&lt;/h4&gt;
&lt;p&gt;A very interesting aspect of Kubernetes is the way Kubernetes combines the use of &lt;code&gt;Labels&lt;/code&gt; and &lt;code&gt;Services&lt;/code&gt; to create tremendous possibilities.&lt;/p&gt;
&lt;p&gt;At the heart of Kubernetes is a &lt;code&gt;pod.&lt;/code&gt; A pod contains running instances of one or more containers. When a pod is deployed in Kubernetes, apart from other specifications, the pod can be assigned labels. Ideally a pod is given a label identifying which part of the overall application the pod belongs to. For example, if the pod being deployed is for the application ”frontend” and within “frontend” the pod is running code for login, upon deployment it can be labeled [&lt;code&gt;app=frontend,label=login&lt;/code&gt;]. Other pods deployed as part of this tier can be given the same label.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/kubernetes-services-and-labels.png&#34; alt=&#34;Kubernetes Services and Labels&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;services&#34;&gt;Services&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Services&lt;/code&gt; enable Kubernetes to route traffic to pods. Pods in Kubernetes are deployed on an overlay network. Pods across Kubernetes nodes cannot access each other nor can any external/ingress traffic access pods unless a &lt;code&gt;Service&lt;/code&gt; type resource is defined.  A service is routed to the correct app using a label. So when a service gets created with label &lt;code&gt;login,&lt;/code&gt;the service will send traffic to pods that contain the &lt;code&gt;login&lt;/code&gt; app based on the label match. Services are needed for both East-West communication, when two pods from different apps need to talk to each other, and for North-South communication, when external traffic ( outside of the Kubernetes cluster) needs to talk to a pod. Kubernetes has different service types to address both scenarios. Some common services are listed below:&lt;/p&gt;





&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service Type&lt;/th&gt;
&lt;th&gt;Depends on&lt;/th&gt;
&lt;th&gt;What it Does&lt;/th&gt;
&lt;th&gt;Traffic Type Handled&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cluster IP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cluster Network&lt;/td&gt;
&lt;td&gt;Uses the Cluster Network to MAP pod IP/port&lt;/td&gt;
&lt;td&gt;Internal to the Cluster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Node Port&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cluster IP&lt;/td&gt;
&lt;td&gt;Uses a port on Kubernetes Node + creates a mapping of Node port to the Cluster IP&lt;/td&gt;
&lt;td&gt;External&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Load Balancer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cluster IP/Node Port&lt;/td&gt;
&lt;td&gt;Creates an External Load Balancer that maps to either a Cluster IP/Node Port&lt;/td&gt;
&lt;td&gt;External&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;services&lt;/code&gt; resource constructs in Kubernetes may be &lt;a href=&#34;/topics/microservices&#34;&gt;Microservices&lt;/a&gt; or other HTTP services.&lt;/p&gt;
&lt;h3 id=&#34;hello-world-service-definition&#34;&gt;Hello World service definition&lt;/h3&gt;
&lt;p&gt;A corresponding service definition for the earlier “Hello World” deployment manifest is shown below. Notice &lt;code&gt;line 5&lt;/code&gt; onward. With the selector as &lt;code&gt;&amp;quot;app: hello world&amp;quot;&lt;/code&gt; the service will forward traffic coming to port 80 on the cluster network to pods that match this label.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-power-of-services&#34;&gt;The Power of Services&lt;/h2&gt;
&lt;p&gt;Because of label matching, there is no need to understand the IP addressing of pods to load balance traffic. As a result:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Load balancing&lt;/strong&gt; traffic across multiple pods is simplified.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updating an app&lt;/strong&gt; (in a pod) can be as simple as:
&lt;ul&gt;
&lt;li&gt;Deploying apps with new version labels ( e.g, v.1.5)&lt;/li&gt;
&lt;li&gt;Waiting for all deployments to complete&lt;/li&gt;
&lt;li&gt;Updating the corresponding Service&amp;rsquo;s labels to match the new pods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Traffic shaping&lt;/strong&gt;: Using &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ingress&lt;/a&gt;, incoming app traffic can be split between multiple labels, making it simple to do things like A/B testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;This guide explained how a few  simple tools can create powerful services. Microservices in application development allow for expedited development, test, deployment and upgrade and, when combined with Kubernetes, can make you fast and efficient. The video below breaks down some of the key Kubernetes concepts in five minutes:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PH-2FfFD2PU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To learn more be sure and check out our developer workshops on &lt;a href=&#34;/workshops/lab-container-basics/&#34;&gt;containers&lt;/a&gt; and &lt;a href=&#34;/workshops/lab-k8s-fundamentals/&#34;&gt;Kubernetes&lt;/a&gt;. KubeAcademy also offers great free 101 content on &lt;a href=&#34;https://kube.academy/courses/containers-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;containers&lt;/a&gt; and &lt;a href=&#34;https://kube.academy/courses/kubernetes-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes&lt;/a&gt;, and additional introductory content to help you get started including &lt;a href=&#34;https://kube.academy/courses/hands-on-with-kubernetes-and-containers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Hands on with Kubernetes and Containers&lt;/a&gt; and &lt;a href=&#34;https://kube.academy/courses/building-applications-for-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Building Applications for Kubernetes&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Managing and Securing Container Images in a Registry</title>
      
      <link>/guides/containers/managing-container-images-registry/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/containers/managing-container-images-registry/</guid>
      <description>

        
        &lt;p&gt;A key reason why enterprises are turning to Kubernetes is that cloud native services and practices boost developer productivity. As you put containerized applications into production, you need a secure way to store, scan, and sign your container images. A container image registry without management and security puts your cloud native environment at risk.&lt;/p&gt;
&lt;p&gt;Container images present some security challenges. Images are usually built by layering other images, which could contain vulnerabilities, and those vulnerabilities can find their way into production systems. Defects and malware can also affect container images. When the provenance of a container is dubious or unknown these risks increase.&lt;/p&gt;
&lt;p&gt;Container image registries with the following functionality can reduce these risks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scan images for vulnerabilities found in the Common Vulnerabilities and Exploits (CVE) database.&lt;/li&gt;
&lt;li&gt;Sign images as known and trusted by using a notary.&lt;/li&gt;
&lt;li&gt;Set up secure, encrypted channels for connecting to the registry.&lt;/li&gt;
&lt;li&gt;Authenticate users and control access by using existing enterprise accounts managed in a standard directory service, such as Active Directory.&lt;/li&gt;
&lt;li&gt;Tightly control access to the registry using the principles of least privilege and separation of duties.&lt;/li&gt;
&lt;li&gt;Enact policies that let users consume only those images that meet your organization&amp;rsquo;s thresholds for vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;harbor-a-secure-image-registry&#34;&gt;Harbor: A Secure Image Registry&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Harbor&lt;/a&gt; is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. A CNCF Graduated project, Harbor delivers compliance, performance and interoperability to help you consistently and securely manage artifacts across cloud native compute platforms like Kubernetes and Docker. Harbor provides all the functionality mentioned above, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scans images for CVEs in conjunction with a number of scan providers including CentOS/Clair, Aqua/Trivy, Anchore/Engine, and DoSec to detect container images with vulnerabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrates with Active Directory/LDAP and OIDC to provide role-based access control so that you can securely store images behind your firewall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signs images as trusted by using &lt;a href=&#34;https://github.com/theupdateframework/notary&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Notary&lt;/a&gt;. You can also set policies that prevent vulnerable or untrusted images from being used in production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vulnerability-scanning&#34;&gt;Vulnerability Scanning&lt;/h3&gt;
&lt;p&gt;Containers often use base images of operating systems like Ubuntu and CentOS from a public image repository, such as DockerHub. The packages of an operating system and the applications on it, however, can contain vulnerabilities.&lt;/p&gt;
&lt;p&gt;Vulnerability scanning helps detect known vulnerabilities to reduce the risk of security breaches. Identifying a vulnerability on an image and keeping the vulnerability from going into production reduces the attack surface of a containerized application.&lt;/p&gt;
&lt;p&gt;The Harbor image registry scans images with Clair or Trivy (default options) to help prevent images with known vulnerabilities from running in production. With Harbor, you can automate the scanning of images or scan them manually.&lt;/p&gt;
&lt;p&gt;Scanners work by continuously importing metadata about vulnerabilities from various sources, including CVEs, and storing the metadata in a database. When Harbor scans an image, Harbor checks the database through the appropriate API and produces a list of vulnerabilities.&lt;/p&gt;
&lt;h3 id=&#34;establishing-content-trust-with-notary&#34;&gt;Establishing Content Trust with Notary&lt;/h3&gt;
&lt;p&gt;Because images are the building blocks of a containerized application, a security best practice is to use signed container images from a trusted registry. Harbor establishes trust by letting publishers sign images when they push them into the repository and by preventing unsigned images from being pulled from the repository.&lt;/p&gt;
&lt;p&gt;The Notary services of the Harbor private registry can furnish project-level content trust to container images to ensure that only trusted images are used as developers create their own layered images, automate the building of a container, or select images for use as the building blocks of an application.&lt;/p&gt;
&lt;h3 id=&#34;image-and-registry-security-in-the-software-pipeline&#34;&gt;Image and Registry Security in the Software Pipeline&lt;/h3&gt;
&lt;p&gt;Harbor works in the context of a development pipeline to manage and secure container images. The following diagram illustrates Harbor&amp;rsquo;s role in a development pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/containers/diagrams/harbor-registry-security.png&#34; alt=&#34;The Harbor container registry manages and secures container images.&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Harbor is an important tool in your software security program, ensuring your cloud native application development meets all of the latest security protocols.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;If you are new to Harbor or haven’t checked in recently, have a look at the &lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;features of the latest release&lt;/a&gt;. This guide focuses on security, but Harbor also provides support for multi-tenancy, replication across registries, and offers an extensible API and web UI.&lt;/p&gt;
&lt;p&gt;To get started using Harbor, this guide provides a good, real-world introduction: &lt;a href=&#34;/guides/kubernetes/harbor-gs/&#34;&gt;Installing Harbor on Kubernetes with Project Contour, Cert Manager, and Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is a Service Mesh?</title>
      
      <link>/guides/microservices/what-is-service-mesh/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/what-is-service-mesh/</guid>
      <description>

        
        &lt;p&gt;Microservices are the key to building applications that scale to meet changing business demands. A microservices architecture breaks up the functions of an application into a set of small, discrete, decentralized, goal-oriented processes, each of which can be independently developed, tested, deployed, replaced, and scaled.&lt;/p&gt;
&lt;p&gt;However, when an application has many discrete services that need to communicate with one another, communication pathways can quickly become complex. A &lt;em&gt;service mesh&lt;/em&gt; decouples a service from having to know about the network, managing the interactions of microservices at the application layer (rather than at the level of virtual IP addresses and ports).&lt;/p&gt;
&lt;p&gt;A service mesh provides a dedicated infrastructure layer that enables communication between microservices and typically also has mechanisms to more gracefully deal with communications problems and network congestion.&lt;/p&gt;
&lt;p&gt;Separate sidecar proxies are often used in a service mesh. Sidecars sit alongside each service, and all the sidecars interconnect, creating a mesh that allows you to  more easily connect, secure, control, and observe services. A service mesh may also provide service discovery, forwarding, monitoring, and service-to-service authentication.&lt;/p&gt;
&lt;p&gt;There are a large number of open source service mesh offerings, so choosing can be a challenge, but two of the most well known are Istio and Linkerd.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Istio&lt;/a&gt; “layers transparently onto existing distributed applications. It is also a platform, including APIs that let it integrate into any logging platform, or telemetry or policy system. Istio’s diverse feature set lets you successfully, and efficiently, run a distributed microservice architecture, and provides a uniform way to secure, connect, and monitor microservices.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linkerd.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Linkerd&lt;/a&gt; “makes running services easier and safer by giving you runtime debugging, observability, reliability, and security—all without requiring any changes to your code.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(If you are working in a VMware Cloud environment, you may want to consider  &lt;a href=&#34;https://tanzu.vmware.com/service-mesh&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Service Mesh&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Given the proliferation of service mesh offerings, it’s good news that some standards are starting to emerge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://smi-spec.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Service Mesh Interface or SMI&lt;/a&gt; is a specification for service meshes that run on Kubernetes. It defines a common standard that can be implemented by a variety of providers. This allows for both standardization for end-users and innovation by providers. &lt;a href=&#34;https://github.com/servicemeshinterface/smi-spec&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;SMI github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openservicemesh.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open Service Mesh&lt;/a&gt;is a lightweight, extensible, service mesh that allows you to uniformly manage, secure, and get out-of-the-box observability features. “The OSM project builds on the ideas and implementations of many cloud native ecosystem projects including Linkerd, Istio, Consul, Envoy, Kuma, Helm, and the SMI specification.” This project is still under development and not ready for production workloads.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;If you want to learn more about service mesh, what it is, and when to use it, the article &lt;a href=&#34;https://buoyant.io/service-mesh-manifesto/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Service Mesh: What Every Software Engineer Needs to Know about the World&amp;rsquo;s Most Over-Hyped Technology&lt;/a&gt; from one of the creators of Linkerd will probably help fill in a lot of the gaps in your knowledge.&lt;/p&gt;
&lt;p&gt;If you’re intrigued by Open Service Mesh and SMI, &lt;a href=&#34;https://github.com/vmware-tanzu/tgik/tree/master/episodes/136&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Josh Rosso digs into the details in TGI Kubernetes #136&lt;/a&gt;. The SMI and OSM Overview start at about minute 31 in the video.&lt;/p&gt;
&lt;p&gt;Learn more about VMware Tanzu Service Mesh in the &lt;a href=&#34;https://docs.vmware.com/en/VMware-Tanzu-Service-Mesh/index.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;product documentation&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Cloud Native?</title>
      
      <link>/guides/microservices/what-is-cloud-native/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/what-is-cloud-native/</guid>
      <description>

        
        &lt;p&gt;Cloud native is an approach to building and running applications that exploit the advantages of the cloud computing delivery model. Cloud native development—also increasingly referred to as modern application development—is appropriate for public, hybrid, and private clouds; it’s about how applications are created and deployed, not where.&lt;/p&gt;
&lt;p&gt;The more important thing is the ability to offer on-demand access to computing power along with modern data and application services for developers. Cloud native development incorporates the concepts of DevOps, continuous delivery, &lt;a href=&#34;/guides/microservices/what-is-microservices-architecture&#34;&gt;microservices&lt;/a&gt;, and &lt;a href=&#34;/guides/containers/what-are-containers&#34;&gt;containers&lt;/a&gt;. At its root, cloud native is about structuring teams, culture, and technology to utilize automation and architectures to manage complexity and unlock velocity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach. These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.&lt;/em&gt; &amp;ndash;&lt;a href=&#34;https://github.com/cncf/toc/blob/master/DEFINITION.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;CNCF Definition of Cloud Native&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cloud-native-applications&#34;&gt;Cloud Native Applications&lt;/h2&gt;
&lt;p&gt;Cloud native applications are developed and optimized to run in a cloud as distributed applications. According to the CNCF, cloud-native applications should have the following characteristics;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They are containerized.&lt;/strong&gt; Each part (applications, processes, etc.) is packaged in its own container. This facilitates reproducibility, transparency, and resource isolation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They are dynamically orchestrated.&lt;/strong&gt; Containers are actively scheduled and managed to optimize resource utilization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They are microservices-oriented.&lt;/strong&gt; Applications are segmented into microservices. This segmentation significantly increases the overall agility and maintainability of applications.&lt;/p&gt;
&lt;p&gt;Some additional characteristics common to cloud native architectures are identified in &lt;a href=&#34;https://download3.vmware.com/vmworld/2015/downloads/oreilly-cloud-native-archx.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;“Migrating to Cloud-Native Application Architectures”&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They are twelve-factor-app oriented.&lt;/strong&gt; They use a set of patterns that optimize application design for speed, safety, and scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They have a self-service, agile infrastructure.&lt;/strong&gt; Cloud platforms abstract application and service operation, providing infrastructure-level speed, safety, and scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They use API-based collaboration.&lt;/strong&gt; The architecture defines service-to-service interaction as automatically verifiable contracts, enabling speed and safety through simplified integration work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They exhibit antifragility.&lt;/strong&gt; The system gets stronger when subjected to stressors, improving robustness to deliver speed and scale.&lt;/p&gt;
&lt;h2 id=&#34;better-tooling-better-systems&#34;&gt;Better Tooling, Better Systems&lt;/h2&gt;
&lt;p&gt;Cloud native is defined by better tooling and better systems. Without automated tooling, each new service in production will have a high operational cost. It becomes a separate thing that has to be monitored, tracked, provisioned, and so on. That overhead is one of the main reasons why sizing of microservices must be done in an appropriate way.&lt;/p&gt;
&lt;p&gt;Automation is the key to reducing the operational costs associated with building and running new services. Systems such as &lt;a href=&#34;/guides/kubernetes/what-is-kubernetes&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;/guides/containers/what-are-containers&#34;&gt;containers&lt;/a&gt;, continuous integration and continuous delivery &lt;a href=&#34;/guides/ci-cd/ci-cd-what-is/&#34;&gt;(CI/CD)&lt;/a&gt;, and monitoring all have the same overarching goal of making application development and operations teams more efficient so they can move faster and build more reliable products.&lt;/p&gt;
&lt;p&gt;The newest generation of tools and systems are better able to deliver on the promise of cloud native compared to traditional configuration management tools because the new tools help break a problem down so that it can be easily distributed across teams. Newer tools generally empower individual development and ops teams to retain ownership and be more productive.&lt;/p&gt;
&lt;h2 id=&#34;cloud-native-outcomes&#34;&gt;Cloud Native Outcomes&lt;/h2&gt;
&lt;p&gt;Organizations that adopt cloud native practices and technology generally report the following outcomes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More efficient and happier teams.&lt;/strong&gt; Cloud native tooling allows big problems to be broken down into smaller pieces for more focused and nimble teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reduced drudgery.&lt;/strong&gt;  Accomplished by automating much of the manual work that causes operations pain and downtime, this takes the form of self-healing and self-managing infrastructure. Modern systems can do more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More reliable infrastructure and applications.&lt;/strong&gt; Automation to handle expected churn often results in better failure modes for unexpected events and failures. When a single command or button click deploys an application for development, testing, or production, it is much easier to automate deployment in a disaster recovery scenario (either automatically or manually).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Auditable, visible, and debuggable.&lt;/strong&gt; Complex applications can be opaque. The tools used for cloud native applications, by necessity, usually provide much more insight into what is happening within an application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep security.&lt;/strong&gt; Many IT systems today have a hard outer shell and a soft gooey center. Modern systems are secure and least-trust by default. Cloud native enables application developers to have an active role in creating application security.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More efficient usage of resources.&lt;/strong&gt; Automated deployment and management of applications and services open up opportunities to apply algorithmic automation. For instance, Kubernetes can automate placement of workloads on machines instead of having an ops team manage the placement via a spreadsheet.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;A cloud native platform helps take care of Day 1 and Day 2 operations, automatically monitoring and remediating issues that previously would have needed manual intervention.
Find out more from Kubernetes founders &lt;strong&gt;Craig McLuckie&lt;/strong&gt; and &lt;strong&gt;Joe Beda&lt;/strong&gt; discussing the difference between Cloud and Cloud Native:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/I0p8MIezKkE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      
      <title>Guides: Applying the API Gateway Pattern</title>
      
      <link>/guides/microservices/api-gateway-pattern/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/api-gateway-pattern/</guid>
      <description>

        
        &lt;p&gt;In a microservices architecture, you may have multiple types of front-end clients communicating with back-end services. These clients could include mobile applications, web applications, or third-party applications. The back end may be composed of many different services exposed over various protocols (SOAP+XML, REST+HTTP, JMS, AMQP, WebSocket, etc.). Clients may collect data from multiple services. In some cases, these services may come from legacy applications,  and each application may have its own way of handling security.&lt;/p&gt;
&lt;p&gt;The question is, how do you minimize the number of client requests to the back end and how do you secure requests  for services that may have been originally designed for a different type of client?&lt;/p&gt;
&lt;h2 id=&#34;api-gateway-pattern&#34;&gt;API Gateway Pattern&lt;/h2&gt;
&lt;p&gt;In many microservices implementations, public services are exposed to clients through an API gateway. Internal microservice endpoints are not exposed to clients, they are kept private.
There are a number of reasons for this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only a select set of microservices are required by clients.&lt;/li&gt;
&lt;li&gt;It is difficult to implement client-specific transformations at the service endpoint.&lt;/li&gt;
&lt;li&gt;To avoid multiple client calls in a bandwidth-restricted environment, a gateway can perform data aggregation on behalf of the client.&lt;/li&gt;
&lt;li&gt;The number of service instances and their locations may change dynamically.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The API gateway pattern (sometimes referred to as “backend for frontend” or BFF) offers client-specific APIs (e.g. mobile, tablet, etc.) with protocol translation between a web-friendly client front-end and back-end services—such as a message queue or database—with a single point of entry (and control) into the set of exposed services. In other words, the client communicates with one or more API gateways that broker services for the client, rather than communicating directly with the services.&lt;/p&gt;
&lt;h2 id=&#34;strengths-and-weakness-of-the-api-gateway-pattern&#34;&gt;Strengths and Weakness of the API Gateway Pattern&lt;/h2&gt;
&lt;p&gt;With the API Gateway pattern, the client only has to know the URL of one server, and the backend can be refactored at will with no change to the client, a significant advantage.&lt;/p&gt;
&lt;p&gt;There are other advantages in terms of centralization and control: rate limiting, authentication, auditing, and logging can all be implemented in the gateway. The API Gateway can also act as a simple routing layer to deal with canary-based deployments or A/B testing scenarios.&lt;/p&gt;
&lt;h3 id=&#34;strengths&#34;&gt;Strengths&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clients are isolated from the partitioning of the microservice architecture behind the gateway.&lt;/li&gt;
&lt;li&gt;Clients do not have to know the locations of specific services.&lt;/li&gt;
&lt;li&gt;If there are client-specific policies to be applied, it is easy to apply them in a single place rather than in multiple places. An example of such a scenario is the cross-origin access policy.&lt;/li&gt;
&lt;li&gt;The optimal API is provided for each client.&lt;/li&gt;
&lt;li&gt;The number of requests/round-trips is reduced.&lt;/li&gt;
&lt;li&gt;It simplifies the client implementation by moving the aggregation logic into the API gateway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;drawbacks&#34;&gt;Drawbacks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The API gateway is one more moving part to be managed in your microservices architecture, increasing complexity.&lt;/li&gt;
&lt;li&gt;Response time is increased compared to direct calls, because of the additional network hop through the API gateway.&lt;/li&gt;
&lt;li&gt;There is a danger of implementing too much logic in the aggregation layer, slowing performance.&lt;/li&gt;
&lt;li&gt;The gateway is a potential single point of failure and has to be managed accordingly. An alternative is to create multiple API gateways, one for each front end, reducing the size of the failure domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;An API Gateway allows you to tailor microservices to client needs while simplifying communications between client and service, keeping the client separated from the complexity involved in service delivery.&lt;/p&gt;
&lt;p&gt;For Java and Spring developers, Spring Cloud Gateway makes it simple to implement an API gateway. Based on the Spring Cloud Gateway project, it provides a simple, effective way to route API traffic.  See the guides: &lt;a href=&#34;/guides/spring/scg-what-is/&#34;&gt;What is Spring Cloud Gateway?&lt;/a&gt; and &lt;a href=&#34;/guides/spring/scg-gs/&#34;&gt;Getting Started with Spring Cloud Gateway&lt;/a&gt; to learn more. Also, be sure and check out &lt;a href=&#34;https://spring.io/projects/spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Gateway&lt;/a&gt; and &lt;a href=&#34;http://cloud.spring.io/spring-cloud-security/spring-cloud-security.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Security&lt;/a&gt; on Spring.io for more related information.&lt;/p&gt;
&lt;p&gt;To learn about APIs in the Spring environment, check out &lt;a href=&#34;/guides/spring/spring-build-api/&#34;&gt;Building an API with Spring Boot&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Implementing Distributed Tracing</title>
      
      <link>/guides/microservices/distributed-tracing/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/microservices/distributed-tracing/</guid>
      <description>

        
        &lt;p&gt;When a request comes into a monolithic application, it&amp;rsquo;s fairly easy to trace through what happened as a result of that request because everything is self-contained. However, when a request comes into a microservice (remember GUI apps can be microservices, they just render HTML instead of JSON), that request could result in a cascading chain of 10 other HTTP calls to various other services. You might also be interested in knowing when a particular service makes non-HTTP calls, such as to a database or a message queue.&lt;/p&gt;
&lt;p&gt;This guide discusses some of the things that are required from an architectural standpoint to support distributed tracing and then describes some implementations, tools, and libraries to facilitate this.&lt;/p&gt;
&lt;p&gt;What you will discover is that the vast majority of modern distributed tracing solutions are either based on, or inspired by, the &lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Google Dapper Whitepaper&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-distributed-tracing&#34;&gt;What is Distributed Tracing?&lt;/h2&gt;
&lt;p&gt;Distributed tracing allows the logs (or other metadata) for applications to span servers. More importantly, these logs need to be able to span not only multiple instances of a single service, but need to be able to correlate the activity of multiple services.&lt;/p&gt;
&lt;p&gt;When service A calls service B which in turn calls service C, you need to be able to correlate certain log data and statistics about that single request. Manually fishing through logs to try and find the trace related to one client-originated call across an ecosystem of many services, each with multiple application instances, is a nightmare.&lt;/p&gt;
&lt;p&gt;The solution is distributed tracing. Regardless of how you implement it, it always involves the creation of an &lt;em&gt;origination ID&lt;/em&gt; as well as individual &lt;em&gt;span IDs&lt;/em&gt;. The terminology may vary across different servers, libraries, and agent implementations, but the concepts are the same. Let&amp;rsquo;s take a look at the following simple request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User requests the page &lt;code&gt;/myprofile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Page calls account service
&lt;ul&gt;
&lt;li&gt;Account service calls LDAP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page calls profile service
&lt;ul&gt;
&lt;li&gt;Profile service calls database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User receives a profile page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order for a tracing system to monitor this entire request flow—with multiple instances of the web app, account service, and profile service running—an origination ID is needed that spans the entire request flow, no matter what gets called or how. Each individual step must generate and use &lt;em&gt;span IDs&lt;/em&gt; so that the trace for the individual steps can be viewed as a single step as well as part of a larger whole (the original request).&lt;/p&gt;
&lt;p&gt;Decorated with IDs, we might have the following:&lt;/p&gt;





&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Origination ID&lt;/th&gt;
&lt;th&gt;Span ID&lt;/th&gt;
&lt;th&gt;Activity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User Requests the page &lt;code&gt;/myprofile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Page calls account service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Account service handles request&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Page calls profile service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Profile service handles request&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Profile service queries database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abc123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;span1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Render requested page&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Drawn out as a sequence diagram, this single user-initiated request might look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/microservices/tracing-sample-ms-transaction.png&#34; alt=&#34;Sample Microservice Transaction&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;The goal of distributed tracing is to maintain enough context so that you (or a tool) can collect sufficient data from distributed trace logs to reconstitute or &lt;em&gt;reverse&lt;/em&gt; a sequence diagram from the available data for any given initiating request.&lt;/p&gt;
&lt;p&gt;Ideally, with the right metadata, tools, and libraries, you will be able to determine how much time was spent at each step in the sequence diagram, whether anything went wrong during those times, and dive into the detailed trace output for each step in the sequence. All of this should be available to you while being able to roll up or collapse the individual steps in the request so you can examine the entire request.&lt;/p&gt;
&lt;h2 id=&#34;implementation-in-java&#34;&gt;Implementation in Java&lt;/h2&gt;
&lt;p&gt;There is nothing preventing you from creating your own code to solve this problem, however, the usual caveats apply when discussing large projects that reinvent the wheel. Keep in mind that your goal is to spend as much time as possible building applications, not building tools to support applications when such tools already exist.&lt;/p&gt;
&lt;p&gt;Code-wise, the implementation core is relatively simple. For every inbound request, examine the HTTP headers. If there is a &lt;em&gt;trace id&lt;/em&gt; then you know you are part of some larger activity. If there isn&amp;rsquo;t, create a new one. Always create a new &lt;em&gt;span id&lt;/em&gt;. Then, just make the trace and span context available to your code so you can add additional troubleshooting, diagnostic, and metric information for collection later.&lt;/p&gt;
&lt;h3 id=&#34;tracing-with-spring-cloud-sleuth-and-zipkin&#34;&gt;Tracing with Spring Cloud Sleuth and Zipkin&lt;/h3&gt;
&lt;p&gt;There are already tools and libraries that solve this problem in the &lt;strong&gt;Spring Cloud&lt;/strong&gt; / &lt;strong&gt;Spring Boot&lt;/strong&gt; space - &lt;em&gt;Sleuth&lt;/em&gt; and &lt;em&gt;Zipkin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using these tools, the larger, outermost request (we referred to this as the originator or &lt;em&gt;origination ID&lt;/em&gt; above) is called the &lt;strong&gt;trace&lt;/strong&gt;, and individual steps within this request are called &lt;strong&gt;spans&lt;/strong&gt;. Additional information and metadata can be attached to a &lt;strong&gt;span&lt;/strong&gt; through the use of &lt;strong&gt;tags&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can learn more about using Zipkin in the guide: &lt;a href=&#34;/guides/spring/spring-zipkin/&#34;&gt;Getting Started with Zipkin and Spring Boot&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementation-in-net&#34;&gt;Implementation in .NET&lt;/h2&gt;
&lt;p&gt;The same general rules apply to .NET, maintain the trace and span context at the request inbound and outbound level, and emit log information to &lt;strong&gt;STDOUT&lt;/strong&gt; decorated with that information.&lt;/p&gt;
&lt;p&gt;You can use the extension points available in &lt;strong&gt;WCF&lt;/strong&gt;, &lt;strong&gt;ASP.NET&lt;/strong&gt; or the &lt;strong&gt;Web API&lt;/strong&gt; to trap inbound and outbound requests, which would allow you to not only create and maintain trace and span contexts, but also do things like emit logs with elapsed time calculations per-span, which can then be rolled up by external tools.&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&#34;https://github.com/openzipkin/zipkin4net&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;.NET client library for Zipkin&lt;/a&gt; that can be used if you&amp;rsquo;re interested in working with Zipkin.&lt;/p&gt;
&lt;p&gt;Projects like &lt;a href=&#34;https://steeltoe.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Steeltoe&lt;/a&gt; now utilize Zipkin.&lt;/p&gt;
&lt;h2 id=&#34;implementation-in-node&#34;&gt;Implementation in Node&lt;/h2&gt;
&lt;p&gt;Once again, the same high-level rules apply. The goal is to emit information with enough context so that correlations can be determined by some monitoring or analysis tool. There are a number of frameworks available in Node that facilitate this kind of instrumentation.&lt;/p&gt;
&lt;h2 id=&#34;use-of-agent-based-distributed-tracing-systems&#34;&gt;Use of Agent-Based Distributed Tracing Systems&lt;/h2&gt;
&lt;p&gt;There are a number of solutions to the distributed tracing problem that involve installing an agent on a virtual machine. This agent can then monitor traffic and perform correlation so that you can see a directed graph of correlated activity for your entire infrastructure. The problem with agent-based solutions is that they require installation on a virtual machine, which is a cloud native anti-pattern.&lt;/p&gt;
&lt;p&gt;If you can avoid installing an agent then you should do so. There are plenty of implementations of the &lt;strong&gt;Google Dapper&lt;/strong&gt; whitepaper available, none of which require agent installations and prefer instead to inject code aspects or annotations to deal with distributed tracing.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Distributed tracing is essential for troubleshooting microservices applications, so it’s worth the effort to learn about it. What you will discover is that the vast majority of modern distributed tracing solutions are either based on, or inspired by, the &lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Google Dapper Whitepaper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about observability in cloud native environments, visit our &lt;a href=&#34;/patterns/observability/&#34;&gt;Observability pattern&lt;/a&gt;. And be sure and read the guide &lt;a href=&#34;/guides/spring/spring-zipkin/&#34;&gt;Getting Started with Zipkin and Spring Boot&lt;/a&gt; if you’re implementing microservices in the Spring environment.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Securing Spring Cloud Config Server</title>
      
      <link>/guides/spring/spring-cloud-config-security/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-cloud-config-security/</guid>
      <description>

        
        &lt;p&gt;As explained in &lt;a href=&#34;/guides/spring/spring-cloud-config-set-up/&#34;&gt;Setting Up Spring Cloud Config Server&lt;/a&gt;, a Spring Cloud Config Server provides a centralized configuration repository for Spring apps. The &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Config Server&lt;/a&gt; externalizes configuration information for an application and serves out this information via a REST interface. Some configuration information is sensitive (such as passwords) and requires greater security.&lt;/p&gt;
&lt;p&gt;This guide explains two methods to increase the security of a Config Server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using encryption in combination with a git repository&lt;/li&gt;
&lt;li&gt;Using Vault as a secure repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To use encryption and decryption features you need the full-strength Java Cryptography Extension (JCE) installed in your JVM (it is not included by default). Download the &lt;em&gt;Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files&lt;/em&gt; from Oracle, and follow instructions for installation (essentially replace the two policy files in the JRE lib/security directory with the ones you downloaded).&lt;/p&gt;
&lt;h2 id=&#34;securing-a-git-repository&#34;&gt;Securing a git repository&lt;/h2&gt;
&lt;p&gt;The default backend for a Config Server is a git repository. This can be configured to store and serve encrypted configuration values to protect sensitive information. In a secure Config Server, the remote property sources contain encrypted content (values starting with &lt;code&gt;{cipher}&lt;/code&gt;). These will be decrypted before sending to clients over HTTP. The main advantage of this approach is that property values aren’t stored in plain text.&lt;/p&gt;
&lt;p&gt;Keep the following in mind when using &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html#_encryption_and_decryption&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;encryption&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encrypted values in an &lt;code&gt;application.yml&lt;/code&gt; file can be wrapped in quotes:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;spring:
   datasource:
      username: dbuser
      password: &#39;{cipher}FKSAJDFGYOS8F7GLHAKERGFHLSAJ&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encrypted values in an &lt;code&gt;application.properties&lt;/code&gt; file must not be wrapped in quotes, otherwise the value will not be decrypted: &lt;code&gt;spring.datasource.password: {cipher}FKSAJDFGYOS8F7GLHAKERGFHLSAJ&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Config Server exposes &lt;code&gt;/encrypt&lt;/code&gt; and &lt;code&gt;/decrypt&lt;/code&gt; endpoints (on the assumption that these are secured and only accessed by authorized agents). If you edit a remote config file, you can use the Config Server to encrypt values by POSTing to the /encrypt endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take the encrypted value and add the &lt;code&gt;{cipher}&lt;/code&gt; prefix before you put it in the YAML or properties file and before you commit and push it to a remote (potentially insecure) store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;key-management-symmetric-vs-asymmetric-keys&#34;&gt;Key management: symmetric vs. asymmetric keys&lt;/h3&gt;
&lt;p&gt;The Config Server can use symmetric (shared) or asymmetric keys (RSA key pair). The asymmetric choice is superior in terms of security, but it is often more convenient to use a symmetric key since it is a single property value to configure in &lt;code&gt;bootstrap.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To configure a symmetric key, you need to set &lt;code&gt;encrypt.key&lt;/code&gt; to a secret String (or use the &lt;code&gt;ENCRYPT_KEY&lt;/code&gt; environment variable to keep it out of plain-text configuration files).&lt;/p&gt;
&lt;p&gt;You cannot configure an asymmetric key using &lt;code&gt;encrypt.key&lt;/code&gt;. To configure an asymmetric key use a keystore (e.g. as created by the &lt;code&gt;keytool&lt;/code&gt; utility that comes with the JDK). The keystore properties are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encrypt.keyStore.location&lt;/code&gt; Contains a Resource location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encrypt.keyStore.password&lt;/code&gt; Holds the password that unlocks the keystore&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encrypt.keyStore.alias&lt;/code&gt; Identifies which key in the store to use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encrypt.keyStore.type&lt;/code&gt; The type of KeyStore to create. Defaults to jks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Encryption is done with the public key, and a private key is needed for decryption. Thus, in principle, you can configure only the public key in the server if you want to only encrypt (and are prepared to decrypt the values yourself locally with the private key).&lt;/p&gt;
&lt;p&gt;In practice, you might not want to decrypt locally because it spreads the &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html#_key_management&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;key management&lt;/a&gt; process to all the clients, instead of concentrating it on the server. On the other hand, it can be a useful option if your Config Server is relatively insecure and only a handful of clients need the encrypted properties.&lt;/p&gt;
&lt;h2 id=&#34;using-hashicorp-vault-as-a-secure-external-repository&#34;&gt;Using HashiCorp Vault as a secure external repository&lt;/h2&gt;
&lt;p&gt;Spring Cloud Vault Config provides client-side support for externalized configuration in a distributed system. &lt;a href=&#34;https://learn.hashicorp.com/collections/vault/getting-started&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;HashiCorp’s Vault&lt;/a&gt; is a central place to manage external secret properties for applications across all environments. It can be used to back Config Server instances.This section provides some guidelines for working with a Vault backend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; you can also configure applications to access Vault directly using &lt;a href=&#34;https://cloud.spring.io/spring-cloud-vault/reference/html/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Vault&lt;/a&gt;. Spring Cloud Vault and Spring Cloud Config with a Vault backend are &lt;a href=&#34;https://stackoverflow.com/questions/45502722/difference-between-spring-cloud-vault-and-spring-cloud-config-with-vault-backend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;not the same thing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable Config Server to &lt;a href=&#34;https://cloud.spring.io/spring-cloud-config/reference/html/#vault-backend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;use a Vault backend&lt;/a&gt;, you run your Config Server with the Vault profile. For example, in your Config Server’s &lt;code&gt;application.properties&lt;/code&gt;, add &lt;code&gt;spring.profiles.active=vault&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, Config Server assumes that your Vault server runs at &lt;code&gt;http://127.0.0.1:8200&lt;/code&gt;. It also assumes that the name of &lt;code&gt;backend&lt;/code&gt; is &lt;code&gt;secret&lt;/code&gt; and the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;application&lt;/code&gt;. All of these defaults can be re-configured in your Config Server’s &lt;code&gt;application.properties&lt;/code&gt;. All the configurable properties can be found in &lt;code&gt;org.springframework.cloud.config.server.environment.VaultEnvironmentProperties.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With your Config Server running, you can make HTTP requests to the server to retrieve values from the HashiCorp Vault backend. To do so, you need a token for your Vault server.&lt;/p&gt;
&lt;p&gt;First, place some data in you Vault, as shown in the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vault kv put secret/application foo=bar baz=bam
$ vault kv put secret/myapp foo=myappsbar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Second, make an HTTP request to your config server to retrieve the values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X &amp;quot;GET&amp;quot; &amp;quot;http://localhost:8888/myapp/default&amp;quot; -H &amp;quot;X-Config-Token: yourtoken&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the default way for a client to provide the necessary authentication to let Config Server talk to HashiCorp Vault.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep learning&lt;/h2&gt;
&lt;p&gt;You can use the encryption features of Spring Cloud Config Server with a git repository to improve the security of your configuration service, or use Vault as a backend for situations that require the highest security. Some organizations or projects use a git repository for configuration information that does not need to be secured, plus a HashiCorp Vault repository for secrets.&lt;/p&gt;
&lt;p&gt;You can get started learning about and using Spring Cloud Config with git in the &lt;a href=&#34;https://spring.io/guides/gs/centralized-configuration/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Centralized Configuration Guide&lt;/a&gt;. Although it does not include use of encryption, this guide steps through the process of setting up a Config Server and consuming configuration information from a client. Use that as a starting point to explore the use of encryption as described above.&lt;/p&gt;
&lt;p&gt;If you want to learn more and get started using a Vault backend, this &lt;a href=&#34;https://github.com/spring-cloud-samples/spring-cloud-config-vault&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;sample code on Github&lt;/a&gt; provides an example of a working Config Server with Vault and Config Client plus usage instructions.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Samples: Spring Zipkin Demo</title>
      
      <link>/samples/spring-zipkin-demo/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/spring-zipkin-demo/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Guides: Getting Started with Zipkin and Spring Boot</title>
      
      <link>/guides/spring/spring-zipkin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/spring-zipkin/</guid>
      <description>

        
        &lt;p&gt;The moment you facilitate one application making a request to another over the network, you  introduce significant complexity. Maybe “significant” is relative, but ask yourself, “What could go wrong?” Because the more services you introduce that your application comes to rely on, the harder it becomes to diagnose any problems that crop up. Is the application slow because of the network? Or is it because one of the services is taking a long time to process? Or something else?&lt;/p&gt;
&lt;p&gt;This is where tracing can help. Tracing, at the most basic level, tracks requests as they come into the application and flow through the system. It measures how long a request takes to move from point to point, as well as how long it spends in a specific service. Having this insight makes it easier to quickly home in on a problem, rather than guessing, hunting, or outright assuming where a problem may be.&lt;/p&gt;
&lt;p&gt;There are many tracing solutions out there, but in this post we will look at one of the more popular ones: &lt;a href=&#34;https://zipkin.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Zipkin&lt;/a&gt;. With a powerful community behind it, Zipkin offers instrumentation for numerous languages, frameworks, and data services, and in many cases  getting started is as simple as including a dependency or two and adding a few lines of code. As an example, we will run through  how you can take an existing Spring Boot application and implement Zipkin tracing into it.&lt;/p&gt;
&lt;h2 id=&#34;standing-up-zipkin&#34;&gt;Standing Up Zipkin&lt;/h2&gt;
&lt;p&gt;Before instrumenting your code and collecting traces, you must first stand up an instance of Zipkin to which you can send those collections. You have several options, all documented in the &lt;a href=&#34;https://zipkin.io/pages/quickstart.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Zipkin Quickstart&lt;/a&gt;, with the easiest being to run it on Docker. If you have Docker running locally already, you can get Zipkin running with one command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d -p 9411:9411 openzipkin/zipkin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don’t have Docker locally but you do have Java installed, it’s almost as easy to run it on your machine. You can download a pre-built JAR and run it with the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sSL https://zipkin.io/quickstart.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash -s
java -jar zipkin.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whichever way you choose to run Zipkin, you’ll find it accessible on your machine at http://127.0.0.1:9411. If you open your browser to this address and see Zipkin running, you’re good to go!&lt;/p&gt;
&lt;h2 id=&#34;preparing-the-demo&#34;&gt;Preparing the Demo&lt;/h2&gt;
&lt;p&gt;How you instrument your code largely depends on the language, framework, and libraries that you use. For this post, we’ll look at an example &lt;a href=&#34;https://github.com/BrianMMcClain/spring-zipkin-demo&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;written in Java with Spring Boot&lt;/a&gt;. If you’re not a Java developer, they are more likely than not some &lt;a href=&#34;https://zipkin.io/pages/tracers_instrumentation.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;great examples for your language of choice&lt;/a&gt;. For this example, we’ll instrument a bare-bones Spring Boot application consisting of a frontend that calls a backend service, which will also be a Spring Boot application.&lt;/p&gt;
&lt;p&gt;Let’s assume that both applications started as a basic &lt;a href=&#34;/guides/spring/spring-build-api&#34;&gt;Spring Boot application built with the Spring Web dependency&lt;/a&gt;. The frontend has one endpoint located at &lt;code&gt;/&lt;/code&gt;, which when called, reaches out to the backend. The backend also has a single endpoint, also located at &lt;code&gt;/&lt;/code&gt;, that simply returns the string “backend.” Finally, the frontend sends a response to the user that reads, “Hello from the backend!”&lt;/p&gt;
&lt;h2 id=&#34;instrumenting-the-backend&#34;&gt;Instrumenting the Backend&lt;/h2&gt;
&lt;p&gt;Let’s first start by instrumenting the backend. This can be done with two additions to the existing code. First, add the &lt;code&gt;spring-cloud-starter-zipkin&lt;/code&gt; dependency to the &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-zipkin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, you’ll need an additional configuration to your &lt;code&gt;application.properties&lt;/code&gt; file (or if you prefer, this can also be done in the &lt;code&gt;application.yml&lt;/code&gt; file):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring.application.name=backend
server.port=8082
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will tell Zipkin the name of the application while annotating the different pieces of each trace, which will allow you to easily track requests as they flow from the frontend to the backend. We’ve also configured the backend to start on port 8082 so that it doesn’t try to run on the same port as the frontend.&lt;/p&gt;
&lt;p&gt;That’s it! Much like many of the Spring Boot components, the rest is automatically taken care of for you. All that remains is to instrument the frontend!&lt;/p&gt;
&lt;h2 id=&#34;instrumenting-the-frontend&#34;&gt;Instrumenting the Frontend&lt;/h2&gt;
&lt;p&gt;You will need to add one additional piece to the frontend, but first, you’ll do the same work that you did with the backend. Start by adding the &lt;code&gt;spring-cloud-starter-zipkin&lt;/code&gt; dependency:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-zipkin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, in your &lt;code&gt;application.properties&lt;/code&gt; file, configure the name of the frontend application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring.application.name=frontend
server.port=8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The other piece to configure is how the requests are sent to the backend. We need to create a client that will be automatically configured to capture traces as it sends requests, then combine that data with the requests coming into the frontend. For this, we’ll allow the &lt;code&gt;WebController&lt;/code&gt; class to automatically configure a &lt;code&gt;RestTemplate&lt;/code&gt; object for us. To do this, here is all the necessary code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.github.brianmmcclain.springzipkindemo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WebController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;restTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;helloWorld&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;restTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getForObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:8082&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Hello from the &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;!&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;restTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;WebController&lt;/code&gt; class is given the &lt;code&gt;@RestController&lt;/code&gt; annotation, which tells our application that it will be the class that will handle the logic for HTTP requests as they come in. The class has a variable named &lt;code&gt;restTemplate&lt;/code&gt; of type &lt;code&gt;RestTemplate&lt;/code&gt; and given the &lt;code&gt;@Autowired&lt;/code&gt; annotation that will automatically create the &lt;code&gt;RestTemplate&lt;/code&gt;. It also has the &lt;code&gt;helloWorld&lt;/code&gt; method with the &lt;code&gt;GetMapping(“/”)&lt;/code&gt; annotation, which tells our code to invoke this method when the application receives requests on the &lt;code&gt;/&lt;/code&gt; endpoint. This method sends the request to the backend, constructs the response, and sends it back to the user. Finally, the &lt;code&gt;restTemplate&lt;/code&gt; bean of type &lt;code&gt;RestTemplate&lt;/code&gt; is  what the Autowired &lt;code&gt;restTemplate&lt;/code&gt; variable will look for when being created. In this case, the bean returns a new &lt;code&gt;RestTemplate&lt;/code&gt; object, into which the &lt;code&gt;spring-cloud-starter-zipkin&lt;/code&gt; dependency will hook.&lt;/p&gt;
&lt;h2 id=&#34;running-the-demo&#34;&gt;Running the Demo&lt;/h2&gt;
&lt;p&gt;With Zipkin already running, it’s now time to start up both the frontend and the backend applications. Because they are Spring Boot applications, you can open two terminals, navigate to the two code bases, and run the same command to start both of them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mvnw spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will start the frontend on port 8080 as well as start the backend on port 8082. Once both applications are up and running, send a request or two to the frontend application located at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://localhost:8080&lt;/a&gt;. For each request, you should be greeted with the phrase, “Hello from the backend!” After you’ve sent some traffic to the application, you can reach Zipkin running at &lt;a href=&#34;http://localhost:9411/zipkin/?serviceName=backend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://localhost:9411/zipkin/?serviceName=backend&lt;/a&gt;, click “Run Query,” and will be greeted with all   your application’s recent traces:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/screenshots/zipkin-spring-1.png&#34; alt=&#34;List of traces in Zipkin&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;By clicking on one of these traces, you can dig further into the entire flow of a request. This is great for troubleshooting issues in large, complex distributed applications where figuring out exactly where a request is slowing down can be a real challenge:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/screenshots/zipkin-spring-2.png&#34; alt=&#34;Individual Zipkin trace&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Zipkin also allows you to visualize the services on which your application depends. If you click on the “Dependencies” page on the left-hand panel, you’ll be shown this visualization for your application:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/screenshots/zipkin-spring-3.png&#34; alt=&#34;Zipkin dependency graph&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;While simple for this use case, you can imagine how useful this feature will be as your application’s needs for external services grows.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What’s Next?&lt;/h2&gt;
&lt;p&gt;If you’re not a Java or Spring developer, take a look at some of the available examples out there for your &lt;a href=&#34;https://zipkin.io/pages/tracers_instrumentation.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;language and framework of choice&lt;/a&gt;! There is instrumentation available for many languages, such as &lt;a href=&#34;https://github.com/openzipkin/zipkin-ruby&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://github.com/Yelp/py_zipkin&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/openzipkin-contrib/zipkin-go-opentracing&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Go&lt;/a&gt;, and may more! Looking to dig even deeper into observability? Make sure to check out our collection of &lt;a href=&#34;/patterns/observability/&#34;&gt;content&lt;/a&gt;, which covers metrics, logging, and tracing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Samples: Spring Boot RSocket Sample</title>
      
      <link>/samples/spring-boot-rsocket-demo/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/spring-boot-rsocket-demo/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Samples: Spring Cloud Data Flow Sample</title>
      
      <link>/samples/spring-cloud-data-flow-demo/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/spring-cloud-data-flow-demo/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Blog: What’s New in .NET Core for Containers and Microservices</title>
      
      <link>/blog/whats-new-in-.net-core-for-containers-and-microservices/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/whats-new-in-.net-core-for-containers-and-microservices/</guid>
      <description>

        
        &lt;p&gt;Throughout most of my career as a developer, I have written code using .NET (mostly C#). But lately, I have been spending more time with Spring, and I keep hearing comments about exciting changes in .NET around containers. I decided it was time to go back and check out what I had missed. This article highlights some of these changes, emphasizing the ones most relevant to containers and microservices; after all, I am part of the &lt;a href=&#34;https://tanzu.vmware.com/tanzu&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft released .NET Core 3.0 on Sept. 23, 2019, and a couple of months later, on Dec. 3, 2019, version 3.1 followed. Version 3.0 had already reached its end of life, while version 3.1, with its LTS designation, will have support until Dec. 3, 2022 (more details &lt;a href=&#34;https://dotnet.microsoft.com/platform/support/policy/dotnet-core&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 contains a tiny number of changes compared to version 3.0. These are mainly related to Blazor and Windows Desktop, in addition to the LTS designation. The bulk of significant changes were in version 3.0. I have selected a subset of items that I believe have a more significant impact on my day-to-day role at VMware Tanzu Labs. For the complete list of changes, go &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;from-container-friendly-to-container-aware&#34;&gt;From Container-Friendly to Container-Aware&lt;/h2&gt;
&lt;p&gt;Before version 3, running .NET Core in a container was not for the faint of heart. CoreCLR was inefficient when allocating GC heaps and quickly ran into Out-of-Memory situations. The new version of .NET Core has made significant progress to make it a correct container runtime by adding support for memory and CPU limits.&lt;/p&gt;
&lt;p&gt;Microsoft is actively producing images for multiple platforms (x64, ARM32, ARM64) and operating systems (macOS, Alpine, CentOS, Debian, Fedora, Ubuntu, Windows).&lt;/p&gt;
&lt;p&gt;The example below creates an Alpine-based Docker image for an ASP.NET Core 3.1 application that runs in a container limited to 10MB of memory.&lt;/p&gt;
&lt;h4 id=&#34;dockerfilealpine-x64-slim&#34;&gt;Dockerfile.alpine-x64-slim&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# https://hub.docker.com/_/microsoft-dotnet-core
FROM mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build
WORKDIR /source

# copy csproj and restore as distinct layers
COPY *.sln .
COPY aspnetapp/*.csproj ./aspnetapp/
RUN dotnet restore -r linux-musl-x64

# copy everything else and build app
COPY aspnetapp/. ./aspnetapp/
WORKDIR /source/aspnetapp
RUN dotnet publish -c release -o /app -r linux-musl-x64 --self-contained true --no-restore /p:PublishTrimmed=true /p:PublishReadyToRun=true

# final stage/image
FROM mcr.microsoft.com/dotnet/core/runtime-deps:3.1-alpine
WORKDIR /app
COPY --from=build /app ./

ENTRYPOINT [&amp;quot;./aspnetapp&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;build-the-aspnet-core-app-docker-image&#34;&gt;Build the ASP.NET Core App Docker image&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker build --pull -t aspnetapp:alpine-slim -f Dockerfile.alpine-x64-slim .&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;run-the-aspnet-core-app-docker-container-limiting-memory&#34;&gt;Run the ASP.NET Core App Docker container limiting memory&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker run --rm -d -p 8080:80 -m=10mb --name my-aspnet-app aspnetapp:alpine-slim&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-images-size-improvements&#34;&gt;Docker Images Size Improvements&lt;/h2&gt;
&lt;p&gt;.NET Core 3.0 brings smaller runtime Docker images. For example, the ASP.NET Core runtime Docker image for the Alpine distribution is a little over 100MB. There are also additional size improvement examples from the Linux amd64 images on &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-core-aspnet/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Hub&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Alpine
3.1.6-alpine3.12 = 105MB (34% smaller)
2.1.20-alpine3.12 = 160MB

Debian
3.1.6-buster-slim = 207MB (18% smaller)
2.1.20-stretch-slim = 253MB

Ubuntu
3.1.6-focal = 221MB (20% smaller)
2.1.20-focal = 276MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to smaller runtime images, the SDK includes a tool that analyzes an application and creates self-contained distributions that include only the required runtime libraries, reducing the image size even further (more details &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/deploying/trim-self-contained&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;faster-start-up-time-by-default&#34;&gt;Faster Start-up Time by Default&lt;/h2&gt;
&lt;p&gt;.NET Core 2.x had tiered compilation disabled by default. Version 3.0 enables it by default. With tiered compilation, one can opt to have the first tier compilation load precompiled code from assemblies created using the &lt;code&gt;ReadytoRun&lt;/code&gt; format (more details &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#readytorun-images&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;) ahead of time instead of just-in-time.&lt;/p&gt;
&lt;p&gt;To compile a project using the &lt;code&gt;ReadyToRun&lt;/code&gt; format, add the &lt;code&gt;&amp;lt;PublishReadyToRun&amp;gt;&lt;/code&gt; setting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup&amp;gt;
  &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then publish as a self-contained app. The example below targets the Linux ARM64 runtime.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -c Release -r linux-arm64 --self-contained
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;grpc-support&#34;&gt;gRPC Support&lt;/h2&gt;
&lt;p&gt;ASP.NET Core 3.0 adds support for building gRPC services that are well suited for microservices scenarios requiring low latency and high throughput. In addition, the Protobuf lightweight message payloads are ideal for limited bandwidth channels like 2G and 3G mobile networks.&lt;/p&gt;
&lt;p&gt;Proto files included in .NET applications automatically generate .NET types for gRPC services, client, and messages.&lt;/p&gt;
&lt;h4 id=&#34;proto-file-greeterproto&#34;&gt;Proto file (Greeter.proto)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

service Greeter {
  rpc SayHello (HelloRequest) returns (HelloReply);
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.NET types generated from proto files can be used as base classes and can be connected to other .NET Core features like Dependency Injection, Logging, Authentication, etc.&lt;/p&gt;
&lt;h4 id=&#34;greeterservicecs&#34;&gt;GreeterService.cs&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;public class GreeterService : Greeter.GreeterBase
{
	private readonly ILogger&amp;lt;GreeterService&amp;gt; _logger;

	public GreeterService(ILogger&amp;lt;GreeterService&amp;gt; logger)
	{
    	_logger = logger;
	}

	public override Task&amp;lt;HelloReply&amp;gt; SayHello(HelloRequest request,
    	ServerCallContext context)
	{
    	_logger.LogInformation(&amp;quot;Saying hello to {Name}&amp;quot;, request.Name);
    	return Task.FromResult(new HelloReply
    	{
        	Message = &amp;quot;Hello &amp;quot; + request.Name
    	});
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gRPC services can be hosted on ASP.NET Core applications.&lt;/p&gt;
&lt;h4 id=&#34;startupcs&#34;&gt;Startup.cs&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;app.UseEndpoints(endpoints =&amp;gt;
{
	endpoints.MapGrpcService&amp;lt;GreeterService&amp;gt;();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mode details can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;browser-samesite&#34;&gt;Browser SameSite&lt;/h2&gt;
&lt;p&gt;Changes in the SameSite implementation (an HTTP cookies standard extension) by Chrome and Firefox are breaking authentication mechanisms in sites that use OpenID and other protocols that must opt out by sending the HTTP header &lt;code&gt;SameSite=none&lt;/code&gt;. ASP.NET Core 3.1 updated the default cookie-emitting behaviors to match the changes in the latest versions of popular browsers (more details &lt;a href=&#34;https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;other-changes-worth-calling-out&#34;&gt;Other Changes Worth Calling Out&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C# 8 includes new features, like async streams, nullable reference types, static local functions, using declarations, additional pattern matchings, interfaces default implementations&lt;/li&gt;
&lt;li&gt;Diagnostic improvements (details &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Distributed tracing (details &lt;a href=&#34;https://devblogs.microsoft.com/aspnet/improvements-in-net-core-3-0-for-troubleshooting-and-monitoring-distributed-apps/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Faster JSON serialization based on &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; (details &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&#34;&gt;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-0/&#34;&gt;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-1-hard-limit-for-the-gc-heap/&#34;&gt;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-1-hard-limit-for-the-gc-heap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/aspnet/grpc-vs-http-apis/&#34;&gt;https://devblogs.microsoft.com/aspnet/grpc-vs-http-apis/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.1&amp;amp;tabs=visual-studio&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.1&amp;amp;tabs=visual-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&#34;&gt;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/&#34;&gt;https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/README.md&#34;&gt;https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/richlander/dotnet-docker-limits&#34;&gt;https://github.com/richlander/dotnet-docker-limits&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      
      <title>Samples: Spring Boot REST API Demo</title>
      
      <link>/samples/spring-boot-build-api/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/spring-boot-build-api/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Spring Cloud Stream?</title>
      
      <link>/guides/event-streaming/scs-what-is/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/event-streaming/scs-what-is/</guid>
      <description>

        
        &lt;p&gt;Spring Cloud Stream is a framework for building highly scalable, event-driven microservices connected with shared messaging systems. Spring Cloud Stream provides components that abstract the communication with many message brokers away from the code.&lt;/p&gt;
&lt;h2 id=&#34;why-is-it-important&#34;&gt;Why Is It Important?&lt;/h2&gt;
&lt;p&gt;The components that abstract away the communication with message brokers, referred to as “binders,” allow developers to focus on code that emits and consumes messages without having to write code for a specific broker. Because of this, that also means migrating from one message broker to another can be as simple as the dependencies of your code.&lt;/p&gt;
&lt;p&gt;Since Spring Cloud Stream is a part of the Spring framework, you can easily test your code as well. Spring provides methods for running tests without the need to specifically connect to a message broker, which allows it to fit in nicely with your current CI process.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How Does It Work?&lt;/h2&gt;
&lt;p&gt;Spring Cloud Stream introduces three main components that allow developers to utilize messaging in their code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Binder&lt;/strong&gt; - The component that implements communication with a specific message broker. For example, there is a RabbitMQ Binder, a Kafka Binder, and so on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binding&lt;/strong&gt; - The interface for sending and receiving messages. This component links the abstract channels in your code with a topic or queue that’s handled by the binder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt; - The data structure used to communicate with the bindings between your code and your message broker. How this data is packaged and communicated over the message broker is determined by the binder.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Consider the following scenario of an application that has one input and one output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/spring/diagrams/scs-what-is-01.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;In this scenario, you can see that there are two logical bindings—one for input and another for output—that communicate with the binder. The binder then handles communication with the message broker directly. All of this happens outside of your code, so rather than connecting to the broker, creating the channels, and defining how everything gets routed, Spring will abstract away as much as possible.&lt;/p&gt;
&lt;p&gt;Out of the box, Spring Cloud Stream will automatically create channels if they don’t already exist and use auto-generated names if they aren’t provided, and will serialize your data the best it can. This is all configurable and customizable, however, and as is the case with much of Spring, it makes the best decisions that it can given the data it has.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-use-it&#34;&gt;How Can I Use It?&lt;/h2&gt;
&lt;p&gt;Make sure to check out &lt;a href=&#34;../scs-gs&#34;&gt;Getting Started with Spring Cloud Stream&lt;/a&gt; for a more in-depth walkthrough of Spring Cloud Stream, as well as this great &lt;a href=&#34;https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#_quick_start&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Quick Start doc on Spring.io&lt;/a&gt;. Finally, you can find many code examples in the &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-samples/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud GitHub&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Videos: Spring Live: Azure Spring Cloud</title>
      
      <link>/videos/spring-live-azure-spring-cloud/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/spring-live-azure-spring-cloud/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Spring Live: Production-Ready Spring Boot Applications</title>
      
      <link>/videos/spring-live-prod-ready-spring-boot/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/spring-live-prod-ready-spring-boot/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Samples: Bootiful Microservices</title>
      
      <link>/samples/bootiful-microservices/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/bootiful-microservices/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Samples: Bootiful Reactive Microservices</title>
      
      <link>/samples/bootiful-reactive-microservices/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/bootiful-reactive-microservices/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Samples: Spring Cloud Stream Demo</title>
      
      <link>/samples/spring-cloud-stream-demo/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/spring-cloud-stream-demo/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Samples: The Spring REST Stack</title>
      
      <link>/samples/the-spring-rest-stack/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/samples/the-spring-rest-stack/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Guides: Getting Started with Spring Cloud Gateway</title>
      
      <link>/guides/spring/scg-gs/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/scg-gs/</guid>
      <description>

        
        &lt;p&gt;Spring Cloud Gateway provides a library for building API gateways on top of Spring and Java. It provides a flexible way of routing requests based on a number of criteria, as well as focuses on cross-cutting concerns such as security, resiliency, and monitoring. For more information, make sure to check out &lt;a href=&#34;../scg-what-is&#34;&gt;What is Spring Cloud Gateway?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this guide, you&amp;rsquo;ll stand up a bare-bones gateway using Spring Cloud Gateway, which will do some light request modification. You&amp;rsquo;ll see the basics of Spring Cloud Gateway, which will serve as a great foundation for those just starting out.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;There are a few things you need to do before getting started with Spring Cloud Gateway:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;About 15 minutes&lt;/li&gt;
&lt;li&gt;Your text editor or IDE of choice&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase-downloads.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JDK 1.8&lt;/a&gt; or newer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gradle.org/install/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Gradle 4+&lt;/a&gt; or &lt;a href=&#34;https://maven.apache.org/download.cgi&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Maven 3.2+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-spring-cloud-gateway&#34;&gt;Using Spring Cloud Gateway&lt;/h2&gt;
&lt;p&gt;Since Spring Cloud Gateway is a library built for Spring, there&amp;rsquo;s no infrastructure to set up and no networking to configure. Instead, this guide will be looking at the code that goes around defining your gateway.&lt;/p&gt;
&lt;h3 id=&#34;generating-a-new-spring-application&#34;&gt;Generating a New Spring Application&lt;/h3&gt;
&lt;p&gt;The easiest way to get started with a new Spring application is at &lt;a href=&#34;https://start.spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;start.spring.io&lt;/a&gt;. There are a few personal choices here—such as if you&amp;rsquo;d like to use Maven or Gradle—but for the sake of consistency, here are the settings used in this guide:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project&lt;/strong&gt;: Maven Project&lt;br&gt;
&lt;strong&gt;Language&lt;/strong&gt;: Java&lt;br&gt;
&lt;strong&gt;Spring Boot&lt;/strong&gt;: 2.2.5&lt;br&gt;
&lt;strong&gt;Project Group&lt;/strong&gt;: com.vmware&lt;br&gt;
&lt;strong&gt;Project Artifact&lt;/strong&gt;: scg-getting-started&lt;/p&gt;
&lt;p&gt;Finally, you&amp;rsquo;ll just need one dependency for our application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &amp;ldquo;Generate&amp;rdquo; and you&amp;rsquo;ll download a zip file of the generated code.&lt;/p&gt;
&lt;h3 id=&#34;building-your-gateway&#34;&gt;Building Your Gateway&lt;/h3&gt;
&lt;p&gt;You can configure a basic route by creating a method that takes in a &lt;code&gt;RouteLocatorBuilder&lt;/code&gt; and returns a &lt;code&gt;RouteLocator&lt;/code&gt;. Here&amp;rsquo;s an example of &lt;code&gt;src/main/java/com/vmware/scgettingstarted/ScgGettingStartedApplication.java&lt;/code&gt; complete with a custom route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.vmware.scggettingstarted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.gateway.route.RouteLocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ScgGettingStartedApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScgGettingStartedApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RouteLocator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;myRoutes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RouteLocatorBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;
				&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/get&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addRequestHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
				&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://httpbin.org:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take note of the &lt;code&gt;myRoutes&lt;/code&gt; method. This code will create a route that will take any &lt;code&gt;GET&lt;/code&gt; request, add a header named &lt;code&gt;Hello&lt;/code&gt; and a value of &lt;code&gt;World&lt;/code&gt;, then forward your request to httpbin.org.&lt;/p&gt;
&lt;h3 id=&#34;run-your-gateway&#34;&gt;Run Your Gateway&lt;/h3&gt;
&lt;p&gt;You can run this as a normal Spring Boot application:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./mvnw spring-boot:run&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once running, you can send a request to your application to ensure it&amp;rsquo;s running at &lt;a href=&#34;http://localhost:8080/get&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://localhost:8080/get&lt;/a&gt;. Say your request looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; GET /get HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.65.3
&amp;gt; Accept: */*
&amp;gt; MyHeader: MyValue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ve sent a &lt;code&gt;GET&lt;/code&gt; request to your application, adding a custom header of &lt;code&gt;MyHeader&lt;/code&gt; with a value of &lt;code&gt;MyValue&lt;/code&gt;. Spring Cloud Gateway will return the following response (note that the body of the response is from httpbin.org, which is providing a breakdown of the request that it received):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Fri, 06 Mar 2020 14:22:54 GMT
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 471
&amp;lt; Server: gunicorn/19.9.0
&amp;lt; Access-Control-Allow-Origin: *
&amp;lt; Access-Control-Allow-Credentials: true

{
  &amp;quot;args&amp;quot;: {}, 
  &amp;quot;headers&amp;quot;: {
    &amp;quot;Accept&amp;quot;: &amp;quot;*/*&amp;quot;, 
    &amp;quot;Content-Length&amp;quot;: &amp;quot;0&amp;quot;, 
    &amp;quot;Forwarded&amp;quot;: &amp;quot;proto=http;host=\&amp;quot;localhost:8080\&amp;quot;;for=\&amp;quot;127.0.0.1:58158\&amp;quot;&amp;quot;, 
    &amp;quot;Hello&amp;quot;: &amp;quot;World&amp;quot;, 
    &amp;quot;Host&amp;quot;: &amp;quot;httpbin.org&amp;quot;, 
    &amp;quot;Myheader&amp;quot;: &amp;quot;MyValue&amp;quot;, 
    &amp;quot;User-Agent&amp;quot;: &amp;quot;curl/7.65.3&amp;quot;, 
    &amp;quot;X-Forwarded-Host&amp;quot;: &amp;quot;localhost:8080&amp;quot;
  }, 
  &amp;quot;origin&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, 
  &amp;quot;url&amp;quot;: &amp;quot;http://localhost:8080/get&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here you can see the response from httpbin.org, including the &lt;code&gt;MyHeader&lt;/code&gt; header that you sent in your request, as well as the &lt;code&gt;Hello&lt;/code&gt; header that Spring Cloud Gateway added to your request.&lt;/p&gt;
&lt;h3 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h3&gt;
&lt;p&gt;Check out some of the great guides on the Spring website to learn how you can leverage the amazing Spring ecosystem to accomplish things like &lt;a href=&#34;https://spring.io/blog/2019/07/01/hiding-services-runtime-discovery-with-spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;hiding your backend services&lt;/a&gt; as well as how you can &lt;a href=&#34;https://spring.io/blog/2019/08/16/securing-services-with-spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;secure your services using Spring Cloud Security&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Spring Cloud Gateway?</title>
      
      <link>/guides/spring/scg-what-is/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/spring/scg-what-is/</guid>
      <description>

        
        &lt;p&gt;Spring Cloud Gateway provides a library for building API gateways on top of Spring and Java. It provides a flexible way of routing requests based on a number of criteria, as well as focuses on cross-cutting concerns such as security, resiliency, and monitoring.&lt;/p&gt;
&lt;h2 id=&#34;why-is-it-important&#34;&gt;Why Is It Important?&lt;/h2&gt;
&lt;p&gt;An API gateway can help simplify the communication between a client and a service, whether that be between a user&amp;rsquo;s web browser and a server miles away, or between a frontend application and the backend services that it relies on.&lt;/p&gt;
&lt;p&gt;Consider a scenario in which you have a web application that relies on three backend services. As each of those services are updated, experience instability, or have the network between them become unstable, your web application will need to know where all three services are and what to do if those services move or go down.&lt;/p&gt;
&lt;p&gt;An API gateway allows you to implement the complexity separately from the client, moving that responsibility from user side to server side. All the client needs to know is how to talk to the gateway. It doesn&amp;rsquo;t matter if the backend services move, go offline, or become unstable so long as the gateway knows how to handle these situations.&lt;/p&gt;
&lt;p&gt;As luck would have it, &lt;a href=&#34;https://tanzu.vmware.com/content/blog/microservices-essentials-getting-started-with-spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Gateway&lt;/a&gt; benefits from the entirety of the Spring ecosystem. Even better, the Spring ecosystem has done a lot of work to handle this sort of complexity. From security to stability to monitoring, the Spring ecosystem can do a lot for you and your API gateway.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How Does It Work?&lt;/h2&gt;
&lt;p&gt;Spring Cloud Gateway is a library for building an API gateway, so it looks like any another Spring Boot application. If you&amp;rsquo;re a Spring developer, you&amp;rsquo;ll find it&amp;rsquo;s very easy to &lt;a href=&#34;../scg-gs&#34;&gt;get started with Spring Cloud Gateway&lt;/a&gt; with just a few lines of code.&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway is intended to sit between a requester and a resource that&amp;rsquo;s being requested, where it intercepts, analyzes, and modifies every request. That means you can route requests based on their context. Did a developer include a header indicating an API version? We can route that request to the appropriately versioned backend. Does the request require sticky sessions? The gateway can keep track of each user&amp;rsquo;s session, even if your backend can&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Since every request is going through your gateway, you get a few extras on top of simple routing. In fact, since your gateway is just another Spring Boot application, you have access to the entire Spring ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud&lt;/a&gt; allows developers to implement things such as distributed configuration, service registration, load balancing, the circuit breaker pattern, and more. It provides these tools to implement many common patterns in distributed systems.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.spring.io/spring-cloud-security&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Security&lt;/a&gt; allows you to lock down access to your backend services. Since all requests are going through your gateway, that security propagates to all of your services that are sitting behind that gateway. For example, you can enable single sign-on (SSO) with your gateway and then control which role each route requires a user to have. This can be as granular as it needs to be, including requiring different roles for different scenarios such as GET vs POST requests, different paths, or even different parameters within the request itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot Actuator&lt;/a&gt; allows developers to easily emit metrics to their monitoring platform of choice. Out of the box, Spring ships with a variety of actuators that you can use to monitor any Java application. Additionally, it&amp;rsquo;s easy to create your own metrics to keep an eye on specific cases as needed. For example, you could record each time a route is hit to see trends over time, or measure the latency of each request.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-use-it&#34;&gt;How Can I Use It?&lt;/h2&gt;
&lt;p&gt;Check out our guide on &lt;a href=&#34;../scg-gs&#34;&gt;Getting Started With Spring Cloud Gateway&lt;/a&gt;, as well as the &lt;a href=&#34;https://spring.io/projects/spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;great content on spring.io&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Spring Cloud Stream Kafka</title>
      
      <link>/guides/event-streaming/spring-cloud-stream-kafka-p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/event-streaming/spring-cloud-stream-kafka-p1/</guid>
      <description>

        
        &lt;p&gt;This document provides a simple demonstration of how to implement your Java application with Kafka using the least amount of code. The goal is to achieve a lot out of the box, without having to reinvent the wheel and implement it in your Spring Boot application.&lt;/p&gt;
&lt;h2 id=&#34;audience&#34;&gt;Audience&lt;/h2&gt;
&lt;p&gt;This document has been written for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developers with Java (intermediate), Spring Boot (basic) and Maven dependency management.&lt;/li&gt;
&lt;li&gt;Developers interested in migrating from &amp;ldquo;Java EE&amp;rdquo; (&lt;code&gt;J2EE&lt;/code&gt;, please visit &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javanaming.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; for naming details) into modern application development (&lt;a href=&#34;https://12factor.net&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;12Factor&lt;/a&gt;) and application containerization.&lt;/li&gt;
&lt;li&gt;Basic Kafka knowledge, including Brokers, Topic, and Partitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more about Spring Boot Background Modern Application Development or Kafka, refer to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/spring-boot/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanzu.vmware.com/content/videos/12-factor-or-cloud-native-apps-what-exactly-does-that-mean-for-spring-developers-thomas-gamble&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;12 Factor, or Cloud-Native Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kafka.apache.org/intro&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kafka Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;To do this tutorial, make sure that the following software is on your workstation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 (preferably Java 11)&lt;/li&gt;
&lt;li&gt;Maven 2 or greater
&lt;ul&gt;
&lt;li&gt;(For Gradle builds: Gradle 6.0 or greater, and run &lt;code&gt;gradle init&lt;/code&gt; to convert current maven into gradle)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java Editor such as IntelliJ or Eclipse.&lt;/li&gt;
&lt;li&gt;Docker (Docker Compose)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The complete running code for this tutorial is available in &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-099&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;spring-cloud-stream-kafka&#34;&gt;Spring Cloud Stream Kafka&lt;/h2&gt;
&lt;p&gt;This tutorial provides examples on how to enable the Apache Kafka binder with Spring Cloud Stream Kafka.&lt;/p&gt;
&lt;p&gt;The following diagram shows Spring Cloud Stream Kafka enabling Apache Kafka Binder on top of &lt;a href=&#34;https://spring.io/projects/spring-cloud-stream&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://spring.io/projects/spring-cloud-stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-099-1.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-a-dependency-to-the-project&#34;&gt;Add a Dependency to the Project&lt;/h3&gt;
&lt;p&gt;For this example, we are using the following dependency: &lt;code&gt;spring-cloud-stream-binder-kafka&lt;/code&gt; (&lt;em&gt;&lt;a href=&#34;https://docs.spring.io/spring-cloud/docs/Hoxton.SR11/reference/html/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Hoxton.SR11&lt;/a&gt;&lt;/em&gt;). In later versions, the &lt;code&gt;@EnableBinding&lt;/code&gt; feature will be &lt;em&gt;&lt;del&gt;deprecated&lt;/del&gt;&lt;/em&gt; in favor of &lt;em&gt;Functional Programming&lt;/em&gt;, which we will look into later. (for more information, see &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-kafka&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-stream-binder-kafka&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configure-the-binders&#34;&gt;Configure the Binders&lt;/h3&gt;
&lt;p&gt;The next step is to configure the binders.
For more information, see &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-099/src/main/java/com/ehsaniara/scs_kafka_intro/scs099/MyBinder.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MyBinder.java&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we are using a modified version of the &lt;code&gt;sink.class&lt;/code&gt; interface, rather than &lt;code&gt;@EnableBinding(sink.class)&lt;/code&gt;. Channel has also referred as &lt;code&gt;order&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyBinder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ORDER_IN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;order-in&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ORDER_OUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;order-out&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;nd&#34;&gt;@Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ORDER_IN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;SubscribableChannel&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

   &lt;span class=&#34;nd&#34;&gt;@Output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ORDER_OUT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;MessageChannel&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orderOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the following example,  the order has been enabled  through &lt;code&gt;@EnableBinding(value = {MyBinder.class})&lt;/code&gt;. The schedule has also been set to create 10 messages, every 5 seconds  , and write it into our topic (for this example: “&lt;code&gt;scs-099.order&lt;/code&gt;”).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Scheduled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialDelay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fixedDelay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;producer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;IntStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

         &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TestString of %s - %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;myBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orderOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withPayload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

         &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;warn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message produced: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

      &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following code shows 10 messages publishing  in the topic and logging in the console. The code also increments the counter per every scheduler attempt to keep logs clean.&lt;/p&gt;
&lt;p&gt;You can make it a &lt;code&gt;WARN&lt;/code&gt; log. A &lt;code&gt;WARN&lt;/code&gt; log has different colors, making it stand out from other logs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.. 08:42:19.433  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 0
.. 08:42:19.434  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 1
.. 08:42:19.434  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 2
.. 08:42:19.435  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 3
.. 08:42:19.435  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 4
.. 08:42:19.435  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 5
.. 08:42:19.435  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 6
.. 08:42:19.436  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 7
.. 08:42:19.436  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 8
.. 08:42:19.436  WARN 47569 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So far, we&amp;rsquo;ve created messages on the topic. As you can see, Spring Cloud Streams make this job very easy. If you add the following line, you can publish your message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;myBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orderOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withPayload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;“&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…”&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, it’s time to consume the message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@StreamListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ORDER_IN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Payload&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message consumed: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the application subscribes to our Kafka topic and logs them in the console. Now, you also need to bind your publisher and subscriber channels to the Kafka topic using  the least amount of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud.stream.bindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;order-out.destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-099.order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Topic Name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;order-in.destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-099.order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Topic Name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;TopicName: scs-099&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;its-showtime&#34;&gt;It’s Showtime!&lt;/h2&gt;
&lt;p&gt;Make sure Kafka is running, then run the following &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/docker-compose.yml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;docker-compose&lt;/a&gt; file in the same path where the docker-compose file is located. Address it by adding &lt;code&gt;-f path_to_docker_compose_file.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build the project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the generated &lt;strong&gt;jar&lt;/strong&gt; file in the &lt;code&gt;target&lt;/code&gt; folder, Make sure you are in the same directory when you run the &lt;strong&gt;jar&lt;/strong&gt; file.  Or, give the full path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -jar scs-099-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-099-2.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The application starts to listen on port 8080. The port cannot be occupied by any other app. If it is, try to pass the following parameter before &lt;code&gt;-jar&lt;/code&gt; by adding &lt;code&gt;-Dserver.port=8081&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, the console shows  10 messages from the producer (when it’s producing messages) and 10 messages from the consumer.&lt;/p&gt;
&lt;p&gt;Based on the current default configuration, the consumer app has only one concurrent threat,   to consume the message: &lt;code&gt;container-0-C-1&lt;/code&gt;. Note, all messages have been produced from the same thread.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;You can simulate a busy consumer and long-running process by adding a 200ms delay.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.. 19:31:51.475  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 0
.. 19:31:51.475  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 1
.. 19:31:51.476  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 2
.. 19:31:51.476  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 3
.. 19:31:51.476  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 4
.. 19:31:51.477  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 5
.. 19:31:51.477  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 6
.. 19:31:51.477  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 7
.. 19:31:51.477  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 8
.. 19:31:51.478  WARN 59692 --- [   scheduling-1] c.e.s.scs099.PobSubService               : message produced: TestString of 0 - 9
.. 19:31:51.708 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 0
.. 19:31:51.913 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 1
.. 19:31:52.118 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 2
.. 19:31:52.321 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 3
.. 19:31:52.526 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 4
.. 19:31:52.731 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 5
.. 19:31:52.932 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 6
.. 19:31:53.137 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 7
.. 19:31:53.343 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 8
.. 19:31:53.544 DEBUG 59692 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 0 - 9
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;single-producer-and-single-consumer-with-3-threads&#34;&gt;Single Producer and Single Consumer with 3 Threads&lt;/h2&gt;
&lt;p&gt;What if you want to use parallelism and involve more threads to consume your messages?&lt;/p&gt;
&lt;p&gt;Now you can! First, stop the previous Java process. Then, try the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dspring.profiles.active&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;test3 -jar scs-099-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the logs now, you’ll notice this time is a bit different in the consumer log.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.. 19:36:38.380 DEBUG 59798 --- [container-1-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 0
.. 19:36:38.385 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 2
.. 19:36:38.388 DEBUG 59798 --- [container-2-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 3
.. 19:36:38.585 DEBUG 59798 --- [container-1-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 1
.. 19:36:38.598 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 4
.. 19:36:38.603 DEBUG 59798 --- [container-2-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 5
.. 19:36:38.805 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 6
.. 19:36:39.010 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 7
.. 19:36:39.216 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 8
.. 19:36:39.422 DEBUG 59798 --- [container-0-C-1] c.e.s.scs099.PobSubService               : message consumed: TestString of 1 - 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By activating a different profile (test3), a couple of more features append to the current configuration, similar to the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud.stream.bindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Order-out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-099.order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Topic Name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;producer.partition-count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Order-in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-099.order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Topic Name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;consumer.concurrency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud.stream.kafka.binder.autoAddPartitions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;whats-happened-so-far&#34;&gt;What’s happened so far?&lt;/h3&gt;
&lt;p&gt;There are &lt;strong&gt;3 concurrent threads&lt;/strong&gt; to execute the consumer method. The partition size is sized-up (&amp;gt; consumer number) so that every consumer has its own partition to subscribe. In addition, all consumers are now  in that same consumer group to prevent duplicate processing of the same message by a different consumer (&lt;code&gt;consumerGroup: scs-099-group&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;As you see, by using Spring Cloud Stream this happened by  only adding a few lines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-099-4.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;All messages have been consumed based on the 200ms delay introduced in the consumer. Therefore, the total number of messages cannot be fully consumed in less than 2 Seconds (200ms  X 10 = 2000ms).&lt;/p&gt;
&lt;h2 id=&#34;single-producer-and-3-consumer-app-3-separate-jvm-processes&#34;&gt;Single Producer and 3 Consumer App (3 Separate JVM Processes)&lt;/h2&gt;
&lt;p&gt;Depending on your topic traffic or consumer performance, the best way you can scale up or down is to run your consumer in a different JVM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;In future tutorials you’ll see how to containerize and scale this application.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So now, let&amp;rsquo;s stop the previous Java process to make port 8080 available again.&lt;/p&gt;
&lt;p&gt;Run the following java application in &lt;strong&gt;3 different terminals&lt;/strong&gt; as follows:&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;Terminal-1:&lt;/code&gt; This app has one producer and one consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dspring.profiles.active&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;test2 -jar scs-099-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: I have added the port check, so you only have one producer for our Kafka topic regardless of the number of apps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;Terminal-2:&lt;/code&gt; This app has only one consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dspring.profiles.active&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;test2 -Dserver.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8081&lt;/span&gt; -jar scs-099-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On &lt;code&gt;Terminal-3:&lt;/code&gt; This app has only one consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dspring.profiles.active&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;test2 -Dserver.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8082&lt;/span&gt; -jar scs-099-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-099-3.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;To avoid having multiple producers, we just let only one app to create messages in the topic in the &lt;strong&gt;producer&lt;/strong&gt; method by checking the (app port == 8080)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;whats-happening-now&#34;&gt;What’s happening now?&lt;/h3&gt;
&lt;p&gt;We only have one application running (producer and consumer on the same app). Similar to the previous example, we basically consume all messages based on the 200ms delay introduced in the consumer. Therefore, the total number of messages cannot be fully consumed in less than 2 seconds &lt;em&gt;(200ms  X 10 = 2000ms)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However, this time it’s running in different (JVM)s. Now, it  can be decoupled out and run in different machines or containers in the future. Our primary intention is to have &lt;strong&gt;horizontal scalability&lt;/strong&gt; in the app.&lt;/p&gt;
&lt;p&gt;When you run the app in the second terminal, you basically tell Kafka to distribute the message to the newly introduced consumer app. You see the new application start consuming some produced messages, but not the same ones from the first app.&lt;/p&gt;
&lt;p&gt;At the same time, when you look at the first application you see Kafka is informing the app that a new consumer has subscribed to your topic on the given consumer group (as &lt;code&gt;INFO&lt;/code&gt; logs).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The environments in which you have a fast producer but slower consumer are good examples and use cases for Kafka. In reality, consumers are slower. You don’t want them affecting your application producer performances.&lt;/p&gt;
&lt;p&gt;For example, you want to make a log processing system and do some keyword search in the incoming messages. On the other hand, even though your application is producing a high amount of logs, adding the log processor system should not affect your actual application performance. Also, in case of a changing amount of logs, you want your system to be able to scale up or down easily and have a failover mechanism and resiliency.&lt;/p&gt;
&lt;p&gt;The complete running code for this tutorial is available in &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-099&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What’s Next&lt;/h2&gt;
&lt;p&gt;In the next tutorial &lt;a href=&#34;/guides/event-streaming/spring-cloud-stream-kafka-p2&#34;&gt;Part 2&lt;/a&gt;, I’ll show a real life example such as the &lt;strong&gt;PubSub&lt;/strong&gt; module, multiple Kafka topics and failover handling.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Spring Cloud Stream Kafka (Part 2)</title>
      
      <link>/guides/event-streaming/spring-cloud-stream-kafka-p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/event-streaming/spring-cloud-stream-kafka-p2/</guid>
      <description>

        
        &lt;p&gt;Based on our previous demo in &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p1/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 1&lt;/a&gt;, you are now ready to simulate a scenario to get a better sense of what we have previously discussed. Let’s say you need to design a system where you can place an order and ship it after some verification process.
To demonstrate how &lt;code&gt;SCS&lt;/code&gt; can help you make your application development simpler, we are not going to cover all the edge or corner cases where this design can fail.&lt;/p&gt;
&lt;p&gt;NOTE: The complete running code for this tutorial is available in &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-100&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;
&lt;p&gt;In high level, you are going to experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Touch on an Event Driven approach - EDA (AKA: Event Driven Architecture)&lt;/li&gt;
&lt;li&gt;Asynchronous communication between applications (Services)&lt;/li&gt;
&lt;li&gt;Using Apache Kafka as broker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case you are going to have two &lt;strong&gt;back-end&lt;/strong&gt; checks, which are referred to as your &lt;em&gt;inventory check&lt;/em&gt; and &lt;em&gt;shipment services&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Things to consider: the back-end process for this scenario may take a long time.There is a risk that the front-end (or UI app) call may timeout throughout this path at any point.&lt;/p&gt;
&lt;p&gt;One way to move away from traditional request and response methods is to approach it with the event driven method - EDA (AKA: Event Driven Architecture). As a result, the UI can check the process through a State Store.&lt;/p&gt;
&lt;p&gt;This may be a little difficult to understand right away, but this is something you have been doing for a long time in real life.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A good example is your Mailing Service. You send a mailing envelope to a company, await a  response, and keep having to check your mailbox. In this case, your mailbox is the State Store.&lt;/p&gt;
&lt;p&gt;There are other, alternative frameworks such as &lt;a href=&#34;https://spring.io/projects/spring-integration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Integration&lt;/a&gt; or &lt;a href=&#34;https://spring.io/projects/spring-cloud-dataflow&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Data-Flow&lt;/a&gt; that you can use for this use case.&lt;/p&gt;
&lt;h4 id=&#34;note-in-this-demo-state-store-is-just-a-hashmap-order-id-is-the-key&#34;&gt;Note: In this demo, State Store is just a &lt;code&gt;HashMap&lt;/code&gt;. Order ID is the key.&lt;/h4&gt;
&lt;h2 id=&#34;the-work-flow&#34;&gt;The Work Flow&lt;/h2&gt;
&lt;p&gt;In order to visualize our goal, let’s take it to as high a level as possible and see this problem in three major services, while keeping in mind the future scalability. Each service has individual responsibilities (as stateless as possible)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-100-3.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-an-order-request&#34;&gt;Create an Order Request&lt;/h2&gt;
&lt;p&gt;A REST call is a &lt;strong&gt;create request&lt;/strong&gt; through the controller and ordering service. It can also be a UI or any other service.&lt;/p&gt;
&lt;p&gt;Since you are expecting a series of processes and operations in the back-end, you don&amp;rsquo;t need to make the UI wait for the entire flow and keep the request thread occupied (blocked).&lt;/p&gt;
&lt;p&gt;Simply create an order ID and create a lookup operation for checking the status of the order, while waiting for the order back-end processes to finish.&lt;/p&gt;
&lt;p&gt;For the purpose of this document, you may use a simple local hash map in the application (as there is only a single application for this example).&lt;/p&gt;
&lt;h4 id=&#34;note-although-all-service-methods-are-in-the-same-service-class-they-are-distributed-in-different-methods-in-the-source-code-lets-refer-to-them-as-services-but-eventually-they-can-become-separated-services&#34;&gt;Note: Although all service methods are in the same Service class, they are distributed in different methods in the source code, let’s refer to them as services, but eventually they can become separated services.&lt;/h4&gt;
&lt;p&gt;Some ideas related to your Kafka topic responsibilities:&lt;/p&gt;
&lt;div class=&#34;table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Topic Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Object&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;scs-100.inventoryChecking&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Orders need to be processed for Inventory Check Operation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;scs-100.shipping&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Orders need to be shipped (Ready to go)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;scs-100.ordering_dlq&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Orders need to be canceled (For Unexpected Behaviors)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;order-service&#34;&gt;Order Service&lt;/h2&gt;
&lt;p&gt;This is where you create the order ID — which can have simple validation checks for sanity. Having a lookup can reduce a lot of complexities and at the same time introduce new challenges that we will discuss later.&lt;/p&gt;
&lt;h4 id=&#34;note-you-will-only-have-one-write-but-many-reads-operations-at-a-time-per-order&#34;&gt;Note: You will only have one &lt;strong&gt;Write&lt;/strong&gt; but many &lt;strong&gt;Reads&lt;/strong&gt; operations at a time, per order.&lt;/h4&gt;
&lt;p&gt;Having this method of breaking the processes in the application design can have its own challenges, especially in lookup check. The lookup check process usually happens in one of the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The application informs the UI (end-user or order creator service) as order changes its status. It can be any one of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicast&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;Unicast&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Multicast&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;Multicast&lt;/code&gt;&lt;/a&gt; approaches.&lt;/li&gt;
&lt;li&gt;UI or end-user calls a specific API to see the latest status of a particular order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can choose 1 of 2 approaches, depending on the use case and implementation of the application. To keep the demo simple, the second approach is preferred.&lt;/p&gt;
&lt;p&gt;The service is putting the order into topic (&lt;code&gt;scs-100.inventoryChecking&lt;/code&gt;). It is a producer for this topic.&lt;/p&gt;
&lt;p&gt;This process is simplified by using &lt;code&gt;SCS&lt;/code&gt; (Spring Cloud Stream). You need to create a binder and its configuration only.&lt;/p&gt;
&lt;p&gt;Producer part with Initializing the Order (&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/6604387604742fc43b9afa8ff71dc3288cdefae6/scs-100/src/main/java/com/ehsaniara/scs_kafka_intro/scs100/OrderService.java#L54&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OrderService.java&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;placeOrder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;itemName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getItemName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;randomUUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PENDING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//update the status
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;orderDataBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//send it for inventory check
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;orderBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;inventoryCheckingOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withPayload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHeaders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;CONTENT_TYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MimeTypeUtils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Binder part (&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/6604387604742fc43b9afa8ff71dc3288cdefae6/scs-100/src/main/java/com/ehsaniara/scs_kafka_intro/scs100/OrderBinder.java#L10&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OrderBinder.java&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//spring.cloud.stream.bindings.inventoryChecking-in
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INVENTORY_CHECKING_IN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;inventoryChecking-in&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INVENTORY_CHECKING_OUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;inventoryChecking-out&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INVENTORY_CHECKING_IN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SubscribableChannel&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inventoryCheckingIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INVENTORY_CHECKING_OUT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MessageChannel&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inventoryCheckingOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Application Configuration part (&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100/src/main/resources/application.yml#L8&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;application.yml&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring.cloud.stream.bindings.inventoryChecking-out.destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-100.inventoryChecking&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our expectation from this service is to create the order and produce it in the topic. You may also separate this component into different applications and scale it. Eventually, this service can also be the only point of interaction between the front-end and back-end applications. You may refer to this component as your &lt;strong&gt;Event Source&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inventory-service&#34;&gt;Inventory Service&lt;/h2&gt;
&lt;p&gt;Inventory Service is also referred to as Event Processor. Here you have a consumer to your inventory check topic, and every message in this topic represents an order that needs to be checked for inventory. This is called an &amp;ldquo;Inventory Check&amp;rdquo; but it can vary in the real scenario, such as payments, supplier delivery, custom delivery, state tax calculator, etc.&lt;/p&gt;
&lt;p&gt;At this point, you can have multiples of these services for other purposes. Theoretically speaking, it doesn&amp;rsquo;t matter how much time this process takes since you are not blocking the original request thread.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100/src/main/java/com/ehsaniara/scs_kafka_intro/scs100/OrderService.java#L68&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OrderService.java&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@StreamListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;INVENTORY_CHECKING_IN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SneakyThrows&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkInventory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Payload&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;checkInventory orderIn: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;INVENTORY_CHECKING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;orderDataBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

   &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//5 sec delay
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// just a simulation of create exception for random orders (1 in 2) in case of inventory insufficiency
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;OUT_OF_STOCK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;orderDataBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;warn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Let&amp;#39;s assume we ran out of stock for item: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getItemName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//5 sec delay
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderFailedException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;insufficient inventory for order: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

   &lt;span class=&#34;c1&#34;&gt;//Order is good to go for shipping
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;orderBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;shippingOut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withPayload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHeaders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;CONTENT_TYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MimeTypeUtils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;This method is the consumer and produce order event&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this method, you’ve intentionally thrown a runtime exception to simulate one of the cool features of &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-stream-binder-kafka&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;SCS&lt;/code&gt;&lt;/a&gt; which is provided out of the box, “Retry Mechanism”. It can easily be configured in &lt;code&gt;application.yml&lt;/code&gt; with no extra coding. It also supports the “Back off and retry mechanism”. The retry value is 3 seconds, by default, and the &lt;code&gt;backoff&lt;/code&gt; value is 5 seconds, by default.&lt;/p&gt;
&lt;p&gt;Eventually, when this method throws an exception, it doesn&amp;rsquo;t immediately fail  unless it hits its built-in retry threshold.&lt;/p&gt;
&lt;p&gt;For example, let’s say, you need to call a third party service, but the call failed in the first attempt due to some networking issues or unhealthy nodes. However, you know that if you try one more time, you can get the results by hitting the healthy one. It’s recommended that you visit &lt;a href=&#34;https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.3.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#_kafka_binder_properties&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100/src/main/resources/application.yml#L28&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;application.yml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring.cloud.stream.kafka&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inventoryChecking-in.consumer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enableDlq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dlqName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scs-100.ordering_dlq&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;autoCommitOnError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;AutoCommitOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many other configurations that you can apply. Go &lt;a href=&#34;https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.0.12.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#_apache_kafka_binder&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Potentially, you could put the order in &lt;code&gt;DLQ&lt;/code&gt; manually and exit the method immediately (“return;”) within the “if” statement, but i &lt;code&gt;SCS&lt;/code&gt; wouldn’t understand if something went wrong and that it needs to “retry” the method (throughout the document we keep referring to it as service).&lt;/p&gt;
&lt;p&gt;Keep in mind that you can configure from application.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;l&#34;&gt;cloud.stream.bindings.inventoryChecking-in.consumer.maxAttempts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you are done with the inventory check service, you can put the order into &lt;code&gt;scs-100.shipping&lt;/code&gt; topic and you are done with the service. The instance of service is ready to pick up the next order for checking, and the workflow keeps going on.&lt;/p&gt;
&lt;h2 id=&#34;shipping-service&#34;&gt;Shipping Service&lt;/h2&gt;
&lt;p&gt;This is your &lt;strong&gt;Event Sink&lt;/strong&gt; process. In your final step, you are going to ship out the order that has been passed from all the verification steps you have designed. You can mark your order as SHIPPED.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@StreamListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderBinder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SHIPPING_IN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shipIt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Payload&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;shipIt orderIn: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SHIPPED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;orderDataBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

   &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ItemID: {} has been Shipped&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: Any failure on this step also drives the order to your &lt;code&gt;DLQ&lt;/code&gt;, by configuration.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;cancellation-service&#34;&gt;Cancellation Service&lt;/h2&gt;
&lt;p&gt;Basically, you are handling all &lt;code&gt;DLQ&lt;/code&gt; messages (orders) in this topic. Eventually, orders which end up here should be canceled so that the canceling process applies to them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-100-1.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;show-time&#34;&gt;Show Time!&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s run the application now by running the following line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -jar scs-100-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the application is running on the port 8080, as you expected. To create an order and see the flow, let’s run the following command line. Before that, make sure you have already installed the &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt; (command-line JSON processor).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORDER_UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;{\&amp;#34;itemName\&amp;#34;:\&amp;#34;book\&amp;#34;}&amp;#34;&lt;/span&gt; http://localhost:8080/order &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.orderUuid&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 15&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/order/status/&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ORDER_UUID&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here you have created an order and keep calling its status every second for a total of 15 seconds.&lt;/p&gt;
&lt;h6 id=&#34;in-case-of-inventory-available-and-order-shipped-the-results-will-be-similar-to-this&#34;&gt;In case of inventory available and order shipped, the results will be similar to this:&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHIPPED&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Eventually, once you see the “SHIPPED” status you can exit the loop.&lt;/em&gt;&lt;/p&gt;
&lt;h6 id=&#34;in-case-of-shortage-of-supply-the-results-will-be-similar-to-this&#34;&gt;In case of shortage of supply, the results will be similar to this:&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;INVENTORY_CHECKING&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;OUT_OF_STOCK&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;OUT_OF_STOCK&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;OUT_OF_STOCK&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;OUT_OF_STOCK&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;OUT_OF_STOCK&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Basically, once you see the “CANCELED” status you can exit the loop. You may also notice the “OrderFailedException” on your application console, which is intentional.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Spring Cloud Stream, which is represented as the &lt;strong&gt;green layer&lt;/strong&gt; in the following diagram, helps us to focus on solving the business problem rather than taking care of plumbing issues with the application.
&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-100-2.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;The complete running code for this tutorial is available in &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-100&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;known-issues&#34;&gt;Known Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;State Store Database (you just temporarily left it as &lt;code&gt;HashMap&lt;/code&gt;), which is only available for the local app, can cause issues when you horizontally scale the application instances or break the application into smaller modules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCS&lt;/code&gt; Binder features are &lt;del&gt;deprecated&lt;/del&gt; in the next versions of &lt;code&gt;SCS&lt;/code&gt; in favor of Functional Programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What’s Next?&lt;/h3&gt;
&lt;p&gt;In the next tutorial, Part 3, you are going to learn how to overcome the known issues. You will also be introduced to topics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State Stores&lt;/li&gt;
&lt;li&gt;Materialized View&lt;/li&gt;
&lt;li&gt;Interactive Queries&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Spring Cloud Stream Kafka (Part 3) - Functional Programming</title>
      
      <link>/guides/event-streaming/spring-cloud-stream-kafka-p3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/event-streaming/spring-cloud-stream-kafka-p3/</guid>
      <description>

        
        &lt;p&gt;This tutorial is going to use the same example (Ordering System) from &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;, and craft it into a Stream Process with a modern Java Functional Programming Model by using &lt;code&gt;SCS&lt;/code&gt; (Spring Cloud Stream Kafka).&lt;/p&gt;
&lt;p&gt;The Ordering System from &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt; may not be the perfect scenario for Streaming, but the purpose of this tutorial is  to look at the problem with a Streaming approach and demonstrate how &lt;code&gt;SCS&lt;/code&gt; can be helpful during this process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The complete running code for this tutorial is available in &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-100-2&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Looking back to the previous tutorial &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;, we see how it tracks the order status changes and overrides the status every time. However, there are some real-life use cases where you may need to know when  the status changed (AKA change history).&lt;/p&gt;
&lt;p&gt;For example: If someone asks you “What time is it?”, or “What is the time now?, they actually want to know the current value of the time. They are not asking  how time becomes the value.&lt;/p&gt;
&lt;p&gt;Conversely, if someone asks you “How did you get here?”, despite the fact that your current location is known, the intention is about the series of locations over time that got you here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-p0.png&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Telematics or sensor data, app logs, and similar systems are the types of structures we are going to discuss when we talk about streaming.&lt;/p&gt;
&lt;h2 id=&#34;audience&#34;&gt;Audience&lt;/h2&gt;
&lt;p&gt;This document is written for those who:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Review and understand the previous tutorials &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p1/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 1&lt;/a&gt; and &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Have good knowledge of Java Functional Programming (preferably, Java 11).&lt;/li&gt;
&lt;li&gt;Have a basic understanding of Kafka Stream and Topology, as well as &lt;a href=&#34;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html#streams_concepts_kstream&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;KStream&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html#streams_concepts_ktable&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ktable&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html#aggregating&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Aggregation&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html#joining&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Joins&lt;/a&gt; and &lt;a href=&#34;https://kafka.apache.org/20/documentation/streams/architecture.html#streams_architecture_state&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;State Store&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, now it&amp;rsquo;s the time to switch from what we used in &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p1/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 1&lt;/a&gt; and &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-stream-binder-kafka&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-stream-binder-kafka-streams&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By replacing the dependency to Spring Cloud Stream (&lt;code&gt;SCS&lt;/code&gt;) for Kafka, we include new libraries that will help make the Kafka Topology. The library already has &lt;code&gt;rocksdbjni&lt;/code&gt; and &lt;code&gt;org.apache.kafka:kafka-streams&lt;/code&gt; where we need it for &lt;code&gt;KStream&lt;/code&gt; and &lt;code&gt;KTable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;, here is the conversion of the Ordering System into what the Kafka Stream Topology will look like.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: There are many ways to create the Topology for this problem. The following example is not the only solution.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-2.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;To overcome the &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/#known-issues&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Known Issues&lt;/a&gt; mentioned in the previous tutorial, we have a continued flow from the time the &amp;ldquo;order&amp;rdquo; is created and put in the Kafka topic through &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L69&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;orderAggConsumer&lt;/code&gt;&lt;/a&gt;. This materializes the aggregate state value of the order per each &lt;code&gt;orderUuid&lt;/code&gt;, so the temporary &lt;code&gt;HashMap&lt;/code&gt; lookup can go away with it.&lt;/p&gt;
&lt;p&gt;Here is how we eventually manage our &lt;code&gt;StateStore&lt;/code&gt;. Events are flowing through this &lt;code&gt;@Bean&lt;/code&gt; every time it completes a step of it. All steps become an individual &lt;code&gt;@Bean&lt;/code&gt;, where in the next tutorial they will become individual micro-services.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L69&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;orderAggConsumer&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orderAggConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuidOrderKStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;KTable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuidStringKTable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kStreamKTableStringFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuidOrderKStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

       &lt;span class=&#34;c1&#34;&gt;//then join the stream with its original stream to keep the flow
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuidOrderKStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;leftJoin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuidStringKTable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;Joined&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serdes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderJsonSerde&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Serdes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the topology to create a &lt;code&gt;KTable&lt;/code&gt; for &lt;code&gt;orderUuid&lt;/code&gt; and the latest order status as String, which materializes it in &lt;code&gt;STATE_STORE_NAME&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KTable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kStreamKTableStringFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;Grouped&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonSerde&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())))&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aggregate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;Materialized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyValueStore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;STATE_STORE_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withKeySerde&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serdes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;
                       &lt;span class=&#34;n&#34;&gt;withValueSerde&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Serdes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: If you run multiple of these applications on the same machine, you may have a different value for &amp;ldquo;&lt;a href=&#34;https://kafka.apache.org/10/documentation/streams/developer-guide/config-streams.html#state-dir&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;state.dir&lt;/a&gt;&amp;rdquo; in each application. You may notice &lt;code&gt;state-scs-100-2-*&lt;/code&gt; folder in the parent root directory. This is where RocksDB stores its data. It can be modified from &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/resources/application.yml#L40&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;application.yml&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With the current design, you only see the latest order status. The missing parameter here is  TIME.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-0.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;KStream&lt;/p&gt;
&lt;div class=&#34;table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;OrderUuid&lt;/code&gt; (Key)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;Status&lt;/code&gt; (Value)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Timestamp (MetaData, but It can be added to Value)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;..-8064d09b661e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PENDING&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;00:00:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;..-8064d09b661e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;INVENTORY_CHECKING&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;00:00:05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;..-8064d09b661e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SHIPPED&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;00:00:10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;KTable&lt;/p&gt;
&lt;div class=&#34;table&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;OrderUuid&lt;/code&gt; (Key)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;Status&lt;/code&gt; (Value)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;..-8064d09b661e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SHIPPED&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Expected stream topology:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-1.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;At this point, if the application wants the order status, it does a rest call to &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderController.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Order Controller&lt;/a&gt; and gets it from the following method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;statusCheck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderUuid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReadOnlyKeyValueStore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;interactiveQueryService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getQueryableStore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;STATE_STORE_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QueryableStoreTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keyValueStore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ofNullable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;orElseThrow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderNotFoundException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Order not found&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this is not the correct way. There is a big issue with it! Basically, this only works if you have one instance of the application. When you scale up the application, your &lt;code&gt;StateStore&lt;/code&gt; may not be on the same machine where you registered it earlier, resulting in a 404 Page Not Found error to display.&lt;/p&gt;
&lt;p&gt;Let’s check the &amp;ldquo;key’s &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L46&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Host Info&lt;/a&gt;&amp;rdquo; before calling it.&lt;/p&gt;
&lt;p&gt;Note: The key’s &lt;code&gt;HostInfo&lt;/code&gt; is stored locally in the application’s &lt;code&gt;RocksDb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;HostInfo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostInfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;interactiveQueryService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getHostInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;STATE_STORE_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;orderUuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUIDSerializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, Kafka needs to know the app server information.  It’s already documented &lt;a href=&#34;https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.1.3/reference/html/spring-cloud-stream-binder-kafka.html#_interactive_queries&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;, based on the project’s cloud version).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring.cloud.stream.kafka.streams.binder.configuration.application.server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;localhost:${server.port}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the following &lt;code&gt;@Bean&lt;/code&gt; methods, the application decides what the next stream is going to be based on the current order status.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L96&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@Bean (&amp;ldquo;orderProcess&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orderProcess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Predicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isOrderMadePredicate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PENDING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Predicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isInventoryCheckedPredicate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;INVENTORY_CHECKING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Predicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isShippedPredicate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SHIPPED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Routing Order: {} [status: {}]&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOrderMadePredicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isInventoryCheckedPredicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isShippedPredicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the following, &lt;strong&gt;@Bean(s)&lt;/strong&gt; are the demonstrations of processes you may want to add in the Ordering System.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L114&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@Bean (&amp;ldquo;inventoryCheck&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inventoryCheck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Checking order inventory, Order: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;INVENTORY_CHECKING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L121&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@Bean (&amp;ldquo;shipping&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shipping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Applying Shipping Process, Order: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setOrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OrderStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SHIPPED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/java/com/ehsaniara/scs_kafka_intro/scs1002/OrderService.java#L130&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@Bean (&amp;ldquo;shippedConsumer&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shippedConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;THIS IS THE END! key: {} value: {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another important point in this demonstration is in (&lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/blob/main/scs-100-2/src/main/resources/application.yml#L23&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;application.yml&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring.cloud.stream.kafka.streams.bindings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;orderStateStoreProcessor-in-0.consumer.configuration.application.id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-orderStateStoreProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;orderProcess-in-0.consumer.configuration.application.id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-orderProcess&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inventoryCheck-in-0.consumer.configuration.application.id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-inventoryCheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shipping-in-0.consumer.configuration.application.id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-shipping&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shippedConsumer-in-0.consumer.configuration.application.id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${spring.application.name}-shipped&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need it since we have all the &lt;code&gt;@Bean&lt;/code&gt;s in the same application (required for Kafka 2.6.x and later)&lt;/p&gt;
&lt;h2 id=&#34;its-showtime&#34;&gt;It’s Showtime!&lt;/h2&gt;
&lt;p&gt;Let’s build the project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, run the project from the project root “scs-100-2”:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -jar target/scs-100-2-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the application has started completely, this should display in the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;…..RocksDBTimestampedStore      : Opening store scs-100-2-order-events in regular mode
…
…
… State transition from REBALANCING to RUNNING
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, run the test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORDER_UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;{\&amp;#34;itemName\&amp;#34;:\&amp;#34;book\&amp;#34;}&amp;#34;&lt;/span&gt; http://localhost:8080/order &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.orderUuid&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 15&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/order/status/&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ORDER_UUID&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to &lt;a href=&#34;https://tanzu.vmware.com/developer/guides/event-streaming/spring-cloud-stream-kafka-p2/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Part 2&lt;/a&gt;, you create an order and check its status every second for the next 15 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;PENDING&amp;#34;
&amp;#34;PENDING&amp;#34;
&amp;#34;PENDING&amp;#34;
&amp;#34;PENDING&amp;#34;
&amp;#34;PENDING&amp;#34;
&amp;#34;PENDING&amp;#34;
&amp;#34;INVENTORY_CHECKING&amp;#34;
&amp;#34;INVENTORY_CHECKING&amp;#34;
&amp;#34;INVENTORY_CHECKING&amp;#34;
&amp;#34;INVENTORY_CHECKING&amp;#34;
&amp;#34;INVENTORY_CHECKING&amp;#34;
&amp;#34;SHIPPED&amp;#34;
&amp;#34;SHIPPED&amp;#34;
&amp;#34;SHIPPED&amp;#34;
&amp;#34;SHIPPED&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;running-multi-instances&#34;&gt;Running Multi-instances&lt;/h2&gt;
&lt;p&gt;Now, let’s run the same application multiple times, at the same time, to simulate the application redundancy.
Before doing that, make sure that the current application is &lt;strong&gt;not running&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-100-2&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;project code&lt;/a&gt; comes with Nginx as a Load Balancer. It’s  preconfigured to distribute the incoming traffic from port &lt;strong&gt;8080&lt;/strong&gt; and route it into &lt;em&gt;&lt;strong&gt;8081&lt;/strong&gt;&lt;/em&gt; and &lt;strong&gt;&lt;em&gt;8082&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First, let’s start a different docker-compose from root on this project &lt;a href=&#34;https://github.com/ehsaniara/scs-kafka-intro/tree/main/scs-100-2&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;scs-100-2&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose -f nginx/docker-compose.yml up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since port 8080 is already occupied by Nginx, we can run the Ordering application &lt;strong&gt;in 2 separate terminals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Terminal 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dserver.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8081&lt;/span&gt; -jar target/scs-100-2-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Terminal 2:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java -Dserver.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8082&lt;/span&gt; -jar target/scs-100-2-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-3.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Then, run our curl call command again (same as the earlier one)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ORDER_UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;{\&amp;#34;itemName\&amp;#34;:\&amp;#34;book\&amp;#34;}&amp;#34;&lt;/span&gt; http://localhost:8080/order &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.orderUuid&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 15&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl --silent &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/order/status/&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ORDER_UUID&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/guides/event-streaming/kafka-events-intro-1002-4.svg&#34; alt=&#34;General Flow Diagram&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;When you review the logs, you&amp;rsquo;ll notice some calls are going into App 1 and others into App 2.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s review what is happening:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incoming Request meets the Nginx on port 8080 and gets round-robin to either Application 1 or 2.&lt;/li&gt;
&lt;li&gt;In the case of the “create order” request, depending on which application Nginx is routing the call, the order state will get materialized and stored in that instance of the application. In a real scenario, this can happen on a different machine.&lt;/li&gt;
&lt;li&gt;For the following lookup calls, the application &lt;code&gt;InteractiveQueryService&lt;/code&gt; checks the &lt;code&gt;HostInfo&lt;/code&gt; for the requested key (&lt;code&gt;orderUuid&lt;/code&gt;) and decides to look it up on its local storage or ask the counterpart application (the other instance which &lt;code&gt;HostInfo&lt;/code&gt; addressed) through the &lt;code&gt;RestTemplate&lt;/code&gt; calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: In case the hosted application instance dies (where the key is located), the KTable change logs will be Re-Aggregated during the partition re-balancing, and the results will be materialized in the newly selected application instance.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What’s Next?&lt;/h2&gt;
&lt;p&gt;We are going to break this application down into smaller micro-services and apply the Modern Application Best Practices.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
