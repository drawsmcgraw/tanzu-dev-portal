<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VMware Tanzu Developer Center ‚Äì Python</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on VMware Tanzu Developer Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 08 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      
      <title>Guides: Python</title>
      
      <link>/guides/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/</guid>
      <description>

        
        &lt;p&gt;Python is one of the world&amp;rsquo;s most popular programming languages, thanks in no small part to its sheer versatility. People use Python for all sorts of coding tasks from Artificial Intelligence and Data Analysis to DevOps Scripting, Websites, and building Microservices. It&amp;rsquo;s a real Swiss Army Knife programming language! Learn more about how Tanzu and Python perfectly complement each other with our handy &lt;a href=&#34;/guides/python&#34;&gt;Python guides&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Data Science with Python &amp; JupyterHub on Kubernetes - Part 1</title>
      
      <link>/blog/data-science-with-python-jupyterhub-on-kubernetes-part-1/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/data-science-with-python-jupyterhub-on-kubernetes-part-1/</guid>
      <description>

        
        &lt;p&gt;Provisioning environments for data scientists and analysts to run simulations, test new models, or experiment with new datasets can be time-consuming and error-prone. Python is a popular choice for data science use cases, and one of the easiest ways to leverage Python is through Jupyter Notebooks. A web-based development environment for multiple languages, Jupyter Notebooks support the creation and sharing of documents that contain code, equations, visualizations, output, and markup text all in the same document. Because Jupyter Notebooks are just text files, they can be easily stored and managed in a source code repository such as GitLab or GitHub. JupyterHub, meanwhile, is a multiuser hub that spawns, manages, isolates, and proxies multiple instances of a single-user Jupyter Notebook server.&lt;/p&gt;
&lt;p&gt;Kubernetes provides the perfect abstractions and API to automate consistent and isolated environments for data scientists to conduct their work. Combining these three things‚ÄîJupyter Notebooks, Python, and Kubernetes‚Äîinto one powerful platform therefore makes a lot of sense.&lt;/p&gt;
&lt;p&gt;In the first post in this two-part series, you will learn how to deploy a Kubernetes cluster using kind on a Mac, then how to install JupyterHub into that cluster. In the second post, we will show you how to use the data science and machine learning notebooks you have created on your newly deployed JupyterHub service running on Kubernetes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s/p1-jh-ex.png&#34; alt=&#34;Example notebook in JupyterHub&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;There are a few things you‚Äôll need before getting started with Jupyter Notebooks on Kubernetes. These instructions leverage the kind project (&lt;a href=&#34;https://kind.sigs.k8s.io/),&#34;&gt;https://kind.sigs.k8s.io/),&lt;/a&gt; which stands for Kubernetes in Docker. I ran through this example on my MacBook, but any system that has Docker installed can be used; kind will create a default storage class for your cluster using a local path persistent volume. For a production deployment of JupyterHub, you want to make sure you have persistent storage (using the CSI) that maps to a shared storage solution such as NFS, iSCSI, or FC. The default JupyterHub Helm chart settings create a service type load balancer because most managed Kubernetes offerings come configured with a cloud load balancer. To keep this tutorial brief, we will use Kubernetes port forwarding to forward a local port to our proxy-public service, which would normally be exposed through the cloud load balancer.&lt;/p&gt;
&lt;h2 id=&#34;install-kind-and-create-your-kubernetes-cluster&#34;&gt;Install kind and Create Your Kubernetes Cluster&lt;/h2&gt;
&lt;p&gt;Start by taking the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open your favorite terminal emulator on your Mac, which should be running OS X&lt;/li&gt;
&lt;li&gt;Use the Brew package manager, which makes installing kind on Mac OS X simple&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ brew install &lt;span class=&#34;nv&#34;&gt;kind&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/kind-0.9.0.catalina.bottle.1.tar.gz
&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/e5ba99b5f14711e0dcb121a992d74c5ee6c6b0468b27e5200bf796d4987e13c0?response-content-disposition&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;attachme
&lt;span class=&#34;c1&#34;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Pouring kind-0.9.0.catalina.bottle.1.tar.gz
&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Caveats
zsh completions have been installed to:
  /usr/local/share/zsh/site-functions

/usr/local/share/zsh/site-functions is not in your zsh FPATH!
Add it by following these steps:
  https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh
&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; Summary
üç∫  /usr/local/Cellar/kind/0.9.0: &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; files, 9.2MB
&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&amp;gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;brew cleanup&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; has not been run in &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; days, running now...
Removing: /Users/kraustvmware.com/Library/Caches/Homebrew/pcre2--10.35.catalina.bottle.tar.gz... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2.0MB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Caches/Homebrew/sqlite--3.33.0.catalina.bottle.tar.gz... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1.9MB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Caches/Homebrew/Cask/iterm2--3.3.12.zip... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;13.5MB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/fdupes... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/gdbm... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/readline... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/sqlite... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/xz... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/pcre2... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/openssl@1.1... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;64B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Removing: /Users/kraustvmware.com/Library/Logs/Homebrew/python@3.8... &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; files, 172.3KB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Pruned &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; symbolic links from /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Download a kind cluster configuration manifest or create your own. This is my config:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ cat multinode-conf.yaml

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  apiServerAddress: &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;
  apiServerPort: &lt;span class=&#34;m&#34;&gt;6443&lt;/span&gt;
nodes:
- role: control-plane
- role: worker
- role: worker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Create your local Kubernetes cluster:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ kind create cluster --config ./multinode-conf.yaml --name jupyter
Creating cluster &lt;span class=&#34;s2&#34;&gt;&amp;#34;jupyter&amp;#34;&lt;/span&gt; ...
 ‚úì Ensuring node image &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;kindest/node:v1.19.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; üñº
 ‚úì Preparing nodes üì¶ üì¶ üì¶
 ‚úì Writing configuration üìú
 ‚úì Starting control-plane üïπÔ∏è
 ‚úì Installing CNI üîå
 ‚úì Installing StorageClass üíæ
 ‚úì Joining worker nodes üöú
Set kubectl context to &lt;span class=&#34;s2&#34;&gt;&amp;#34;kind-jupyter&amp;#34;&lt;/span&gt;
You can now use your cluster with:

kubectl cluster-info --context kind-jupyter

Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community üôÇ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Test your Kubernetes cluster:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ kubectl config get-contexts
CURRENT   NAME           CLUSTER        AUTHINFO       NAMESPACE
*         kind-jupyter   kind-jupyter   kind-jupyter

‚ùØ kubectl get nodes
NAME                    STATUS   ROLES    AGE     VERSION
jupyter-control-plane   Ready    master   2m31s   v1.19.1
jupyter-worker          Ready    &amp;lt;none&amp;gt;   2m1s    v1.19.1
jupyter-worker2         Ready    &amp;lt;none&amp;gt;   2m1s    v1.19.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;helm-install&#34;&gt;HELM Install&lt;/h2&gt;
&lt;p&gt;Before we can install the JupyterHub Helm chart, we need to ensure Helm is installed. If you don‚Äôt already have it, follow the instructions below for OS X or reference this &lt;a href=&#34;/guides/kubernetes/helm-gs/&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On your Mac, download and install the &lt;a href=&#34;https://github.com/helm/helm/releases&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm CLI&lt;/a&gt; if you haven&amp;rsquo;t already done so.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
‚ùØ chmod &lt;span class=&#34;m&#34;&gt;700&lt;/span&gt; get_helm.sh
‚ùØ ./get_helm.sh
Downloading https://get.helm.sh/helm-v3.4.1-darwin-amd64.tar.gz
Verifying checksum... Done.
Preparing to install helm into /usr/local/bin
Password:
helm installed into /usr/local/bin/helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-jupyterhub&#34;&gt;Install JupyterHub&lt;/h2&gt;
&lt;p&gt;We are now going to leverage the Helm package manager for Kubernetes to install JupyterHub. Follow the instructions below to deploy JupyterHub notebooks on your Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;Add the Jupyter Helm chart repo to Helm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
‚ùØ helm repo update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On a Linux machine, generate a random hex string to be used as a security token by JupyterHub:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ openssl rand -hex &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;
  c46350ed823f94.......20dff86cc63a570d3be
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the existence of the ‚Äústandard‚Äù storage class, which will be used for the persistent volume for each instance spawned by JupyterHub. This will allow each user to have a 10GB persistent volume so that their work will persist through restarts of their instance or pod and be mounted to their home directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ kubectl get storageclass                                      

NAME                 PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
standard &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   rancher.io/local-path   Delete          WaitForFirstConsumer   &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;                  3m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Modify the configuration of a Helm chart. This is done at deployment time with a values YAML file. To simplify your experience, we have already created a &lt;a href=&#34;https://raw.githubusercontent.com/tkrausjr/k8s-manifests/master/jupyter-hub/scipy-jhub-values-kind.yaml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;configuration YAML&lt;/a&gt; file for the JupyterHub Helm package, which you can download and edit. We have preconfigured this values file to configure several things for your JupyterHub installation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thanks to the new Docker image pull changes on Docker Hub, you will need to configure an &lt;code&gt;imagePullSecret&lt;/code&gt; with your Docker Hub account to pull the required images. Read more about it &lt;a href=&#34;https://docs.docker.com/docker-hub/download-rate-limit/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Change the default interface to the newer &lt;a href=&#34;https://jupyter.org/#:~:text=JupyterLab%20is%20a%20web%2Dbased,scientific%20computing%2C%20and%20machine%20learning.&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Jupyter Lab&lt;/a&gt; interface. This recent improvement provides some aesthetic and functional benefits, such as providing a terminal interface to your Jupyter Notebook instance to do things like git checkouts.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ wget https://raw.githubusercontent.com/tkrausjr/k8s-manifests/master/jupyter-hub/scipy-jhub-values-kind.yaml

‚ùØ vi scipy-jhub-values-kind.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change the following in the &lt;code&gt;scipy-jhub-values-kind.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put in your Docker Hub account the username, email, and password.&lt;/li&gt;
&lt;li&gt;Put in the generated hex string from Step 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# imagePullSecret is configuration to create a k8s Secret that Helm chart&amp;#39;s pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# can get credentials from to pull their images.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;automaticReferenceInjection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;DockerHub-Username&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;&amp;lt;Change to your User Name&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;DockerHub-Email&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;&amp;lt;Change to your Email&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;DockerHub-Password&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;&amp;lt;Change to your Pass&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deploymentStrategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Recreate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sqlite-pvc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;upgrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pvc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteOnce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storageClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;standard &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;Change to your Storage Class&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;singleuser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jupyter/scipy-notebook&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5G&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;guarantee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5G&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/lab&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storageClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;standard &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;Change to your Storage Class&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;c86a373144e4e8b1341fa5661cdc70f165856ba48eb54028eb844d41f1f2aeb4d4a0cca29b9548d52cb9b4c2fb901aa00537a9d37451a6f77953add34039ca56&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## &amp;lt;&amp;lt;Change the token to your random hex string from Step 1&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We have chosen the latest version of the &lt;code&gt;jupyter/scipy-notebook&lt;/code&gt;, which comes with all the required libraries for the machine learning and data science use cases we will demonstrate in the second post of this two-part series. Specifically, the &lt;code&gt;scipy-notebook&lt;/code&gt; comes preinstalled with pandas, matplotlib, scikit-learn, beautifulsoup, and seaborn. For a list of the Docker images that the Jupyter team maintains, you can look &lt;a href=&#34;https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a dedicated Kubernetes namespace to house the JupyterHub Kubernetes components:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  kubectl create namespace jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install JupyterHub using the Helm chart and reference the values file you modified in Step 3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  helm install jhub-datascience jupyterhub/jupyterhub -f scipy-jhub-values-kind.yaml -n jupyter --timeout 180s
WARNING: You should switch to &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://charts.helm.sh/stable&amp;#34;&lt;/span&gt;
NAME: jhub-datascience
LAST DEPLOYED: Thu Oct &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt; 13:58:01 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
NAMESPACE: jupyter
STATUS: deployed
REVISION: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
TEST SUITE: None
NOTES:
Thank you &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; installing JupyterHub!
Your release is named jhub-datascience and installed into the namespace jupyter.
You can find &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; the hub and proxy is ready by doing:
 kubectl --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;jupyter get pod
and watching &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; both those pods to be in status &lt;span class=&#34;s1&#34;&gt;&amp;#39;Running&amp;#39;&lt;/span&gt;.
You can find the public IP of the JupyterHub by doing:
 kubectl --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;jupyter get svc proxy-public
It might take a few minutes &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; it to appear!
Note that this is still an alpha release! If you have questions, feel free to
  1. Read the guide at https://z2jh.jupyter.org
  2. Chat with us at https://gitter.im/jupyterhub/jupyterhub
  3. File issues at https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues
directly instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This installation will take a while to pull down all the images required to use JupyterHub and bootstrap the installation process.&lt;/p&gt;
&lt;p&gt;You can monitor and troubleshoot the JupyterHub installation by watching the pod creations in the &lt;code&gt;jupyter&lt;/code&gt; namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  kubectl get po -n jupyter -w                        

NAME                              READY   STATUS    RESTARTS   AGE
continuous-image-puller-4lpbv     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
continuous-image-puller-cw8vd     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
continuous-image-puller-hr75f     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
continuous-image-puller-skspt     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
hub-7d9698c5d4-dh4ld              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
proxy-7c5f54cb77-t8l4d            1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
user-scheduler-67f756d5d6-4gb6b   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
user-scheduler-67f756d5d6-f4z4c   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          90s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also monitor for errors by putting a watch on Kubernetes events happening during the installation of the Helm release inside the &lt;code&gt;jupyter&lt;/code&gt; namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  kubectl get events -n jupyter -w

0s          Normal    Pulled                   pod/continuous-image-puller-6ksn9      Container image &lt;span class=&#34;s2&#34;&gt;&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span&gt; already present on machine
0s          Normal    Created                  pod/continuous-image-puller-6ksn9      Created container pause
0s          Normal    Started                  pod/continuous-image-puller-6ksn9      Started container pause
0s          Normal    EnsuringLoadBalancer     service/proxy-public                   Ensuring load balancer
0s          Normal    EnsuredLoadBalancer      service/proxy-public                   Ensured load balancer
0s          Warning   FailedScheduling         pod/hub-7b9c7b96d5-2l4sd               running &lt;span class=&#34;s2&#34;&gt;&amp;#34;VolumeBinding&amp;#34;&lt;/span&gt; filter plugin &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; pod &lt;span class=&#34;s2&#34;&gt;&amp;#34;hub-7b9c7b96d5-2l4sd&amp;#34;&lt;/span&gt;: pod has unbound immediate PersistentVolumeClaims
0s          Warning   ProvisioningFailed       persistentvolumeclaim/hub-db-dir       storageclass.storage.k8s.io &lt;span class=&#34;s2&#34;&gt;&amp;#34;standard&amp;#34;&lt;/span&gt; not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To look at a failed Helm release in Kubernetes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  helm list -A                              
WARNING: &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-charts.storage.googleapis.com&amp;#34;&lt;/span&gt; is deprecated &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stable&amp;#34;&lt;/span&gt; and will be deleted Nov. 13, 2020.
WARNING: You should switch to &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://charts.helm.sh/stable&amp;#34;&lt;/span&gt;
NAME      	NAMESPACE	REVISION	UPDATED                                	STATUS	CHART            	APP VERSION
jhub-scipy	jupyter  	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       	2020-11-04 09:25:17.906053349 -0800 PST	failed	jupyterhub-0.10.0	1.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To uninstall a failed Helm release in Kubernetes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  helm uninstall jhub-scipy -n jupyter                                                                                               

WARNING: &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-charts.storage.googleapis.com&amp;#34;&lt;/span&gt; is deprecated &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stable&amp;#34;&lt;/span&gt; and will be deleted Nov. 13, 2020.
WARNING: You should switch to &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://charts.helm.sh/stable&amp;#34;&lt;/span&gt;
release &lt;span class=&#34;s2&#34;&gt;&amp;#34;jhub-scipy&amp;#34;&lt;/span&gt; uninstalled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jupyter-hub-access&#34;&gt;Jupyter Hub Access&lt;/h2&gt;
&lt;p&gt;To verify that your Jupyter Hub deployment is successful, the following Kubernetes objects should be running in the &lt;code&gt;jupyter&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ  kubectl get deploy,po,svc,pvc -n jupyter     

NAME                             READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hub              1/1     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;           3m
deployment.apps/proxy            1/1     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;           3m
deployment.apps/user-scheduler   2/2     &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;           3m

NAME                                  READY   STATUS    RESTARTS   AGE
pod/continuous-image-puller-4lpbv     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/continuous-image-puller-cw8vd     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/continuous-image-puller-hr75f     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/continuous-image-puller-skspt     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/hub-7d9698c5d4-dh4ld              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/proxy-7c5f54cb77-t8l4d            1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/user-scheduler-67f756d5d6-4gb6b   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m
pod/user-scheduler-67f756d5d6-f4z4c   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3m

NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;    AGE
hub            ClusterIP   10.96.151.178   &amp;lt;none&amp;gt;        8081/TCP   3m
proxy-api      ClusterIP   10.96.90.242    &amp;lt;none&amp;gt;        8001/TCP   3m
proxy-public   ClusterIP   10.96.66.108    &amp;lt;none&amp;gt;        80/TCP     3m

NAME          STATUS   VOLUME            CAPACITY   ACCESS MODES   STORAGECLASS   AGE
claim-admin   Bound    pvc-46f13b00-580a-435a-b263-22b4cfd2376d   10Gi       RWO            
standard       20m
hub-db-dir    Bound    pvc-96243b44-2088-44df-828a-d9abf75cea46   3Gi        RWO            standard       51m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final step is to expose the proxy-public Kubernetes service locally on your Mac using port forwarding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ kubectl port-forward -n jupyter svc/proxy-public 8080:80 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;39859&lt;/span&gt;
Forwarding from 127.0.0.1:8080 -&amp;gt; &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;                                                     
Forwarding from &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:8080 -&amp;gt; &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access the JupyterHub web UI from your Mac, use your web browser and enter your local IP address with the port specified above (8080), so http://localhost:8080/.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s/p1-jh-login.png&#34; alt=&#34;JupyterHub login screen&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! You are now ready to consume the service you have created and developed using Python Jupyter Notebooks running on JupyterHub on Kubernetes. In &lt;a href=&#34;/blog/data-science-with-python-jupyterhub-on-kubernetes-part-2/&#34;&gt;Part 2 of this series&lt;/a&gt;, we will focus on how to use JupyterHub and use Jupyter Notebooks on Kubernetes.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Data Science with Python &amp; JupyterHub on Kubernetes - Part 2</title>
      
      <link>/blog/data-science-with-python-jupyterhub-on-kubernetes-part-2/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/data-science-with-python-jupyterhub-on-kubernetes-part-2/</guid>
      <description>

        
        &lt;p&gt;In a &lt;a href=&#34;/blog/data-science-with-python-jupyterhub-on-kubernetes-part-1&#34;&gt;previous post&lt;/a&gt;, we discussed the advantages of running JupyterHub on Kubernetes. We also showed you how to install a local Kubernetes cluster using kind on your Mac, as well as how to install the JupyterHub Helm chart on a Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;In this post, we will focus on the experience of the developers, who are going to be leveraging our service to develop new models using &lt;code&gt;scikit-learn&lt;/code&gt; or perform calculations and transformations of large datasets using pandas. To illustrate the value that Jupyter Notebooks and JupyterHub provide in a multiuser environment, we will clone a Git repository containing two example Jupyter Notebooks that we can work with.&lt;/p&gt;
&lt;h2 id=&#34;using-jupyterhub&#34;&gt;Using JupyterHub&lt;/h2&gt;
&lt;p&gt;Each user that accesses JupyterHub will have their own workspace complete with a single-user Jupyter Notebook server, which uses the JupyterLab Interface. To demonstrate the capabilities of JupyterHub and Python, we will check out the following sample notebooks that we have written and executed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;industry-revenue-analysis.ipynb&lt;/strong&gt; ‚Äì Analysis of historical financial data organized by industry that leverages the pandas library&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ml-stock-predictor-knn-v4.ipynb&lt;/strong&gt; ‚Äì Machine learning (ML) based on revenue data from public financial statements that leverages the &lt;code&gt;scikit-learn&lt;/code&gt; library for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each time a user logs into the JupyterHub web page, an additional pod will be instantiated for that user and a 10GB persistent volume will be mapped to the user‚Äôs home directory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In &lt;a href=&#34;/blog/data-science-with-python-jupyterhub-on-kubernetes-part-1&#34;&gt;Part 1&lt;/a&gt;, we showed you how to expose the JupyterHub proxy-public Kubernetes service locally on your Mac using port forwarding. If you have not already done this, execute the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;‚ùØ kubectl port-forward -n jupyter svc/proxy-public 8080:80 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;39859&lt;/span&gt;
Forwarding from 127.0.0.1:8080 -&amp;gt; &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;                                                     
Forwarding from &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:8080 -&amp;gt; &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;To access the JupyterHub web UI, from your Mac you would use a web browser and enter the localhost IP (127.0.0.1) or localhost with the port specified above (8080), so http://localhost:8080/. JupyterHub is running with a default dummy authenticator, so entering any username and password combination will let you enter the hub.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/login-admin.png&#34; alt=&#34;Jupyter login screen&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Once you are authenticated, you will be brought to the workspaces screen, which will allow you to open a local terminal inside the container, run interactive Python in a console, or create a new Python3 Jupyter notebook. You can also get interactive help or browse the local container‚Äôs directory structure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/ui.png&#34; alt=&#34;JupyterHub UI&#34;  /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Click the Terminal button under Other on the main workspace screen.
At the Terminal prompt, type the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/tkrausjr/data-science-demos.git data-science
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/terminal.png&#34; alt=&#34;Running git clone in a terminal in JupyterHub&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;running-the-machine-learning-notebook&#34;&gt;Running the Machine Learning Notebook&lt;/h2&gt;
&lt;p&gt;To jumpstart your data science learning, two sample notebooks are in the data science directory created by your git clone operation in the previous step. The repos and sample datasets are here: &lt;a href=&#34;https://github.com/tkrausjr/finance-analysis.git&#34;&gt;https://github.com/tkrausjr/finance-analysis.git&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;/data-science/jupyter-hub&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/terminal-dir.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;To run the machine learning notebook, double-click the &lt;code&gt;ml-stock-predictor-knn-v4.ipynb&lt;/code&gt; file. You can run each cell individually by clicking in the cell and then hitting the &lt;code&gt;&amp;gt;| Run&lt;/code&gt; button or using keyboard shortcut &lt;strong&gt;Shift + Enter&lt;/strong&gt;. To run all cells from top to bottom (in other words, the entire program) you can go to &lt;strong&gt;Menu &amp;ndash;&amp;gt; Run &amp;ndash;&amp;gt; Run All Cells&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/run-all-cells-stock.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;This notebook aims to classify companies as high growth or low growth according to their historical annual revenue growth, using supervised learning with the k-nearest neighbor (KNN) classification algorithm. As such, it will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the pandas library, create a data frame from a CSV containing real public companies‚Äô annual sales figures and stock price data.&lt;/li&gt;
&lt;li&gt;Clean up the data frame and calculate and create new columns representing year-over-year sales growth. In our classification problem, the annual revenue growth becomes the features or attributes that will be put into our ML model.&lt;/li&gt;
&lt;li&gt;Filter out the highest-growth companies by labeling them with a 0 or 1 to represent low growth or high growth, respectively. In supervised learning we have to label our data so the algorithm can determine upon which answers it should base its learning.&lt;/li&gt;
&lt;li&gt;Visualize and explore the data with the pandas and seaborn libraries.&lt;/li&gt;
&lt;li&gt;Train, test, and split the data with the &lt;code&gt;scikit-learn&lt;/code&gt; library.&lt;/li&gt;
&lt;li&gt;Run a KNN ML model against the dataset and evaluate it using the &lt;code&gt;scikit-learn&lt;/code&gt; library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/graph-1.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/stock.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/graph-2.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;The output of the classification report in cell 36 shows us that although the model seems to be working, it is actually just choosing the value for the majority class, which is ‚Äú0‚Äù every time. To make this model work as a classification problem, we would need to do some additional work, namely to undersample from the majority class or oversample from the minority class in order to create a more balanced dataset.&lt;/p&gt;
&lt;h2 id=&#34;running-the-data-analytics-notebook&#34;&gt;Running the Data Analytics Notebook&lt;/h2&gt;
&lt;p&gt;To run the pandas data analysis notebook, double-click the &lt;code&gt;industry-revenue-analysis.ipynb&lt;/code&gt; file. You can run each cell individually by clicking in the cell and then hitting the &lt;code&gt;&amp;gt;| Run&lt;/code&gt; button or using keyboard shortcut &lt;strong&gt;Shift + Enter&lt;/strong&gt;. To run all cells from top to bottom (in other words, the entire program) you can go to &lt;strong&gt;Menu &amp;ndash;&amp;gt; Run &amp;ndash;&amp;gt; Run All Cells&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/run-all-cells-ind.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;This notebook will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the pandas library, create two data frames from two separate CSVs containing real public companies‚Äô annual sales figures and industry sector data.&lt;/li&gt;
&lt;li&gt;Merge the two data frames using ‚Äúticker‚Äù as the key value.&lt;/li&gt;
&lt;li&gt;Aggregate the historical revenue data by industry and year and create a pandas pivot table.&lt;/li&gt;
&lt;li&gt;Calculate the annual percentage change in revenue per industry and sort from highest to lowest for the most recent period.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/table.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;multiuser-support&#34;&gt;Multiuser Support&lt;/h2&gt;
&lt;p&gt;When another data scientist wants to use the platform, they just need to login to JupyterHub and it will take care of the rest.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/login-john.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/jupyter-hub-on-k8s-p2/ui.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;When a second data scientist (in this case, myself, Thomas) logs into JupyterHub, a second persistent volume claim, persistent volume, and pod will be provisioned for the new user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pvc -n jupyter                    
NAME                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
claim-admin           Bound    pvc-6e02d65b-c47a-4cf4-a1ad-489dc7cc49de   10Gi       RWO            standard       45m
claim-john            Bound    pvc-3c1ee9a3-68ab-4d71-a1f4-8cf8c04fb975   10Gi       RWO            standard       109s
hub-db-dir            Bound    pvc-b0a0657d-a9f8-4a17-9002-2a3c8f2cade6   3Gi        RWO            standard       88m


$ kubectl get po -n jupyter -l &lt;span class=&#34;nv&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;singleuser-server            
NAME            READY   STATUS    RESTARTS   AGE
jupyter-admin   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          73m
jupyter-john    1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m15s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we have shown how deploying JupyterHub on top of Kubernetes provides various benefits, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An isolated workspace where each data scientist will have their own dedicated CPU and memory guaranteed instance of a Jupyter Notebook server that will be spawned on demand and run on a shared Kubernetes platform.&lt;/li&gt;
&lt;li&gt;Efficient usage of resources, including the culling of unused Jupyter instances with the ability to shut down (defaults to an hour) unused Jupyter instances and autosave any additions or changes that have been made to running Notebooks. Users can log back in and be reconnected to their Jupyter Notebook instance with all their previous work thanks to the persistent volumes allocated to each Jupyter pod.&lt;/li&gt;
&lt;li&gt;Data persistence for data scientists‚Äô work to be persisted to a dynamically created persistent volume so they either can log out and back in to JupyterHub and resume where they left off or have their work survive a pod failure.&lt;/li&gt;
&lt;li&gt;A way to provide data scientists with a lower-cost alternative to more expensive compute options for certain tasks, such as data cleanup, exploration, and model development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully you now better understand how a JupyterHub implementation running on Kubernetes can provide a scalable, simple, and powerful platform for data science teams to work with. If you are new to Jupyter Notebooks in general, I would recommend experimenting with the sample notebooks used in this post or walking through a Jupyter Notebook tutorial that goes into more detail on developing in Jupyter Notebooks with &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, or &lt;code&gt;scikit-learn&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: Managing Global Packages</title>
      
      <link>/guides/python/gs-python-installing-global-packages/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/gs-python-installing-global-packages/</guid>
      <description>

        
        &lt;h2 id=&#34;why-you-need-this-guide&#34;&gt;Why You Need This Guide&lt;/h2&gt;
&lt;p&gt;There are loads of super-useful Python-based tools available in the &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Python Package Installer&lt;/a&gt; &amp;mdash; also known as &amp;lsquo;pip&amp;rsquo;. &lt;a href=&#34;http://www.mypy-lang.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;MyPy&lt;/a&gt; the static type checker, &lt;a href=&#34;https://flake8.pycqa.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Flake8&lt;/a&gt; the awesome code linter, &lt;a href=&#34;https://black.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Black&lt;/a&gt; the &amp;lsquo;uncompromising code formatter,&amp;rsquo; and &lt;a href=&#34;https://nicolargo.github.io/glances/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Glances&lt;/a&gt; the &amp;lsquo;eye on your system,&amp;rsquo; are all great examples. These are Python packages that are useful globally, across all your Python projects, and beyond!&lt;/p&gt;
&lt;p&gt;But, as detailed in &lt;a href=&#34;https://packaging.python.org/guides/installing-stand-alone-command-line-tools/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pip&amp;rsquo;s CLI tools documentation&lt;/a&gt;, &amp;ldquo;&lt;em&gt;installing packages and their dependencies to the same global environment can cause version conflicts, and break dependencies that the operating system has on Python packages&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, the bright folks in &amp;lsquo;python-land&amp;rsquo; have a solution to this problem &amp;mdash; in the form of &lt;a href=&#34;https://pipxproject.github.io/pipx/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;PipX&lt;/a&gt;. PipX is a tool that allows the installation of Python packages in an isolated environment. Because PipX isolates them, their installation won&amp;rsquo;t disrupt each other or your system.&lt;/p&gt;
&lt;p&gt;Follow the steps below to get started with PipX.&lt;/p&gt;
&lt;h2 id=&#34;before-you-start&#34;&gt;Before You Start&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ubuntu.com/download/desktop&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ubuntu 20.04 LTS&lt;/a&gt; provides the reference baseline operating system for this guide. Many Python developers use Linux, and Ubuntu is the most popular Linux distribution. Microsoft also distributes Ubuntu as part of the &lt;a href=&#34;https://ubuntu.com/wsl&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;, so it&amp;rsquo;s available to most Windows 10 users. On Mac OS, most of the tools shown here are available from Homebrew.&lt;/p&gt;
&lt;p&gt;When following this guide, it helps if you&amp;rsquo;re starting from a clean system. That way, any existing or additional Python installs can&amp;rsquo;t cause issues or confusion as you follow the steps below. If your system isn&amp;rsquo;t clean, try following this guide in a new virtual machine first, so you know what to expect when you try it for real.&lt;/p&gt;
&lt;p&gt;Finally, if you&amp;rsquo;d prefer to watch a video on this guide, scroll down to the bottom of the page and hit &amp;lsquo;play.&amp;rsquo;&lt;/p&gt;
&lt;h3 id=&#34;step-1-install-pip-and-pipx&#34;&gt;Step 1: Install Pip And PipX&lt;/h3&gt;
&lt;p&gt;To install &lt;a href=&#34;https://pipxproject.github.io/pipx/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;PipX&lt;/a&gt;, you first need to install &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pip&lt;/a&gt; into your system&amp;rsquo;s Python environment. In Ubuntu &amp;mdash; and WSL environments based upon Ubuntu &amp;mdash; that means adding some packages from the built-in Ubuntu package manager like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install python3-pip python3-venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now those packages are installed, go ahead and install &lt;a href=&#34;https://pipxproject.github.io/pipx/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pipx&lt;/a&gt; using pip, the system version of Python, and the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 -m pip install --user pipx
python3 -m pipx ensurepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now close your terminal for those changes to take effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-install-a-global-command-line-package-with-pipx&#34;&gt;Step 2: Install A Global Command Line Package With PipX&lt;/h3&gt;
&lt;p&gt;Open a new terminal window and test that &lt;code&gt;pipx&lt;/code&gt; works by calling up pipx&amp;rsquo;s built-in help.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pipx --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The help details all the PipX commands. Now try installing the &lt;a href=&#34;https://nicolargo.github.io/glances/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Glances&lt;/a&gt; package globally using &lt;code&gt;pipx install&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pipx install glances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After you see the message confirming the installation is complete, run the glances command-line tool by typing &lt;code&gt;glances&lt;/code&gt; at the prompt as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;glances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Glances tool will start and show you various live statistics about your computer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/python/screenshots/gs-python-global-packages-screenshot-python-glances.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s cool about &lt;a href=&#34;https://nicolargo.github.io/glances/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Glances&lt;/a&gt; is that it&amp;rsquo;s cross-platform, can run in the terminal, but also offers a way for you to access the machine stats over the network using a web browser. Pretty neat!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quit glances by issuing the stop command &lt;code&gt;Ctrl-C&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To check the installation of Glances has not altered your system&amp;rsquo;s &lt;code&gt;pip&lt;/code&gt; packages, use the &lt;code&gt;pip list&lt;/code&gt; command.  Glances will &lt;em&gt;not&lt;/em&gt; appear on this list.&lt;/p&gt;
&lt;p&gt;To see a list of tools installed by &lt;code&gt;pipx&lt;/code&gt;, use the &lt;code&gt;pipx list&lt;/code&gt; command. You will see that Glances &lt;em&gt;is&lt;/em&gt; present on this list.&lt;/p&gt;
&lt;h3 id=&#34;step-3-run-a-tool-without-installation-with-pipx&#34;&gt;Step 3: Run A Tool Without Installation With PipX&lt;/h3&gt;
&lt;p&gt;When you&amp;rsquo;re unsure if a package is right for you, PipX offers a way to try the package without installing it. Let&amp;rsquo;s try this feature using the fun &amp;mdash; but mostly useless &amp;mdash; &lt;code&gt;pycowsay&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pipx run pycowsay mooooooo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first argument after &lt;code&gt;pipx run&lt;/code&gt; is always assumed to be the name of the package you would like to run. PipX will download &lt;code&gt;pycowsay&lt;/code&gt; and run it in a temporary virtual environment. Any arguments after the package name go straight to the package you&amp;rsquo;re running. The result of the command is the classic cow saying &lt;code&gt;moooooo&lt;/code&gt; as seen in the screenshot below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/python/screenshots/gs-python-global-packages-screenshot-python-pycowsay.png&#34; alt=&#34;img&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;If you decide that &lt;code&gt;pycowsay&lt;/code&gt; is definitely for you, you can install it permanently using the &lt;code&gt;pipx install&lt;/code&gt; command you saw in Step 2.&lt;/p&gt;
&lt;h2 id=&#34;keep-leaning&#34;&gt;Keep Leaning&lt;/h2&gt;
&lt;p&gt;To find out more about PipX, check out the &lt;a href=&#34;https://pipxproject.github.io/pipx/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;PipX website&lt;/a&gt;, the &lt;a href=&#34;https://pipxproject.github.io/pipx/docs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;PipX docs&lt;/a&gt; or try &lt;code&gt;pipx --help&lt;/code&gt;. To get help on a specific command type &lt;code&gt;pipx &amp;lt;command&amp;gt; --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might like the others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Install Python Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-managing-python-packages&#34;&gt;Managing Python Project Dependencies Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;Build Python Docker Containers Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cf-gs&#34;&gt;Run Python In Production Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the video to accompany this guide.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/CKtaKhKOo-Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: Managing Project Dependencies</title>
      
      <link>/guides/python/gs-managing-python-packages/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/gs-managing-python-packages/</guid>
      <description>

        
        &lt;h2 id=&#34;why-do-you-need-this-guide&#34;&gt;Why Do You Need This Guide?&lt;/h2&gt;
&lt;p&gt;Suppose you&amp;rsquo;ve already mastered the fine art of &lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;installing multiple versions of Python&lt;/a&gt; on your computer using &lt;a href=&#34;https://github.com/pyenv/pyenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Pyenv&lt;/a&gt;. In that case, you&amp;rsquo;re probably keen to control your Python projects and the packages they use.&lt;/p&gt;
&lt;p&gt;For a pro-developer, this means mastering some additional tools &amp;mdash; tools designed to help you maintain a healthy degree of separation between your &amp;lsquo;system&amp;rsquo; dependencies and your project dependencies. Without these tools, your system quickly becomes a tangled mess of incompatible packages that break your projects and disrupt your flow.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;This guide follows on where &amp;lsquo;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Python Like A Pro: Installing Python&lt;/a&gt;&amp;rsquo; left off. To complete it, you&amp;rsquo;ll need the &lt;code&gt;pyenv&lt;/code&gt; tool installed on your system and Python 3.8.5 and Python 2.7.18, both installed using the &lt;code&gt;pyenv install&lt;/code&gt; command as discussed in that earlier guide.&lt;/p&gt;
&lt;p&gt;Check you have Pyenv and the Python versions required using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If successful, you&amp;rsquo;ll see output similar to that below, confirming that &lt;code&gt;pyenv&lt;/code&gt; is working and that Python 3.8.5 and 2.7.18 are available. If not successful, go back to the &lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;earlier guide&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;* system &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /home/ben/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  2.7.18
  3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, if you&amp;rsquo;d prefer to watch a video on this guide, scroll down to the bottom of the page and hit &amp;lsquo;play.&amp;rsquo;&lt;/p&gt;
&lt;h2 id=&#34;managing-python-project-dependencies&#34;&gt;Managing Python Project Dependencies&lt;/h2&gt;
&lt;p&gt;As a rule of thumb, it&amp;rsquo;s best if each Python project you work on has its own set of dependencies, both on the version of Python it needs, but also on any dependencies you install via &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pip&lt;/a&gt;. This model is especially true if your work involves tens or even hundreds of Python projects &amp;mdash; like a microservices project.&lt;/p&gt;
&lt;p&gt;In the past, giving each Python project its independence was difficult. There was no built-in way to achieve isolation between &lt;em&gt;all&lt;/em&gt; your Python projects.  Fortunately, the &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Pyenv &amp;lsquo;VirtualEnv&amp;rsquo;&lt;/a&gt; project can fix this issue, and it works with all Python versions including version 2.&lt;/p&gt;
&lt;p&gt;Pyenv-virtualenv lets you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isolate Python projects using a workspace known as a &amp;lsquo;virtual environment.&amp;rsquo;&lt;/li&gt;
&lt;li&gt;link a Python project to a specific Python version.&lt;/li&gt;
&lt;li&gt;isolate the pip dependencies within a Python project.&lt;/li&gt;
&lt;li&gt;automatically switch to the correct virtual environment for the current project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get &amp;lsquo;hands-on&amp;rsquo; and take a closer look at &lt;code&gt;pyenv virtualenv&lt;/code&gt; in action.&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-a-python-385-project&#34;&gt;Step 1: Create A Python 3.8.5 Project&lt;/h3&gt;
&lt;p&gt;Make a new folder and in this folder begin a new Python 3 project by adding a ready-made Python program file like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir python-3-project
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; python-3-project
curl https://raw.githubusercontent.com/benwilcock/buildpacks-python-demo/master/web.py -o web.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;To see the sample code in the hello world program you just downloaded, use &lt;code&gt;cat web.py&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, still within the &lt;code&gt;python-3-project&lt;/code&gt; folder, create a new Python 3.8.5 virtual environment using &lt;code&gt;pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;project-name&amp;gt;&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv virtualenv 3.8.5 py3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, activate the new &lt;code&gt;py3&lt;/code&gt; virtual environment within the &lt;code&gt;python-3-project&lt;/code&gt; folder as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; py3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, your prompt may change slightly to confirm that the virtual environment is active. The folder will contain a new hidden file called &lt;code&gt;.python-version&lt;/code&gt;. This file contains the name of the virtual environment currently active for this folder &amp;mdash; in this case, &lt;code&gt;py3&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# .python-version&lt;/span&gt;
py3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-add-some-package-dependencies&#34;&gt;Step 2: Add Some Package Dependencies&lt;/h3&gt;
&lt;p&gt;From this point on, any dependencies you install while in this folder will be specific to the &lt;code&gt;py3&lt;/code&gt; virtual environment. Add the &lt;a href=&#34;https://palletsprojects.com/p/flask/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Flask&lt;/a&gt; and &lt;a href=&#34;https://gunicorn.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Gunicorn&lt;/a&gt; packages as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install Flask gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, when you list the currently installed pip packages with &lt;code&gt;pip list&lt;/code&gt;, the list displayed includes Flask and Gunicorn. The version of Gunicorn should be &lt;code&gt;20.x.x&lt;/code&gt; or higher because this was the first version designed exclusively for Python 3. Freeze the pip installed packages and their versions into a file with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The contents of the &lt;code&gt;requirements.txt&lt;/code&gt; file should be similar to those shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# requirements.txt&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;7.1.2
&lt;span class=&#34;nv&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;1.1.2
&lt;span class=&#34;nv&#34;&gt;gunicorn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;20.0.4
&lt;span class=&#34;nv&#34;&gt;itsdangerous&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;1.1.0
&lt;span class=&#34;nv&#34;&gt;Jinja2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.11.2
&lt;span class=&#34;nv&#34;&gt;MarkupSafe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;1.1.1
&lt;span class=&#34;nv&#34;&gt;Werkzeug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-test-the-application&#34;&gt;Step 3: Test The Application&lt;/h3&gt;
&lt;p&gt;Use Gunicorn and Flask to run the &lt;code&gt;web.py&lt;/code&gt; application as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gunicorn --bind&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0.0.0.0:8080 web:app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When Gunicorn starts, it reports its version as &lt;code&gt;20.x.x&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2020-08-19 10:37:08 +0100&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;11875&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Starting gunicorn 20.0.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, point your browser to &lt;code&gt;http://localhost:8080&lt;/code&gt; and you&amp;rsquo;ll be greeted with the legend &lt;strong&gt;&amp;ldquo;Hello, World!&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-4-leave-the-project-folder&#34;&gt;Step 4: Leave The Project Folder&lt;/h3&gt;
&lt;p&gt;Finally, leave the &lt;code&gt;python-3-project&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;py3&lt;/code&gt; virtual environment will deactivate itself, and your regular command prompt will reappear. The command &lt;code&gt;pyenv version&lt;/code&gt; will confirm which version of Python is currently active now you&amp;rsquo;ve left the &lt;code&gt;python-3-project&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# result of &amp;#39;pyenv version&amp;#39; (in my case)&lt;/span&gt;
system &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /home/ben/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Should you ever move back into the &lt;code&gt;python-3-project&lt;/code&gt; folder, pyenv will automatically activate the &lt;code&gt;py3&lt;/code&gt; virtual environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;step-5-rinse-and-repeat-with-python-2817&#34;&gt;Step 5: Rinse And Repeat With Python 2.8.17&lt;/h3&gt;
&lt;p&gt;Repeat steps 1-4 above, but this time, create a folder called &lt;code&gt;python-2-project&lt;/code&gt; and use Python version 2.7.18 as the basis of your virtual environment. The updated commands for step 1 are as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir python-2-project
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; python-2-project
pyenv virtualenv 2.8.17 py2
pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; py2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In step 2, install the same packages via &lt;code&gt;pip&lt;/code&gt;, but this time notice how the version of Gunicorn that pip installs changes to &lt;code&gt;19.x.x&lt;/code&gt;. Version 19 of Gunicorn was the last version to support Python 2.&lt;/p&gt;
&lt;p&gt;In step 3, run your app in Gunicorn as before, but this time, you&amp;rsquo;ll notice that it&amp;rsquo;s Gunicorn version &lt;code&gt;19.x.x&lt;/code&gt; that has started:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2020-08-19 11:14:52 +0000&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;15150&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Starting gunicorn 19.10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;To discover more of what &lt;code&gt;pyenv&lt;/code&gt; can do for you, check out the &lt;a href=&#34;https://github.com/pyenv/pyenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pyenv website&lt;/a&gt; or try &lt;code&gt;pyenv --help&lt;/code&gt;. To get help on a specific command in pyenv type &lt;code&gt;pyenv &amp;lt;command&amp;gt; --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might find these others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Install Python Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-installing-global-packages&#34;&gt;Managing Python Global Packages Like A Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;Build Python Docker Containers Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cf-gs&#34;&gt;Run Python In Production Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here‚Äôs the video to accompany this guide:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/7Id2EU0zjw8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: How to Install Python</title>
      
      <link>/guides/python/gs-python-like-a-pro/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/gs-python-like-a-pro/</guid>
      <description>

        
        &lt;h3 id=&#34;why-do-you-need-this-guide&#34;&gt;Why do you need this guide?&lt;/h3&gt;
&lt;p&gt;As a professional Python developer, you&amp;rsquo;ll be asked to work on a wide variety of projects. The tools you&amp;rsquo;ll use to do that work may need to change on a project-by-project basis. One day you may be maintaining some legacy code written in Python 2; the next day, you may be prototyping in the very latest version of Python 3.&lt;/p&gt;
&lt;p&gt;And here lies the problem. The &lt;a href=&#34;https://www.jetbrains.com/lp/python-developers-survey-2019/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;2019 Python Developers Survey&lt;/a&gt; found that 66% of Python developers get their Python interpreter either from their operating system or from a downloaded installer. For these developers, switching between Python versions is not easy and could result in a broken system.&lt;/p&gt;
&lt;p&gt;So in this guide, you&amp;rsquo;ll learn how to install many different versions of Python at the same time and discover how to switch between them with ease.&lt;/p&gt;
&lt;h3 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a lot of different OS and package management choices out there.  But in the &lt;a href=&#34;https://www.jetbrains.com/lp/python-developers-survey-2019/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Python Survey&lt;/a&gt; mentioned earlier, Linux was shown to be the most popular OS. &lt;a href=&#34;https://ubuntu.com/download/desktop&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ubuntu 20.04&lt;/a&gt; has been chosen as the baseline for this guide because it&amp;rsquo;s the latest LTS of the most popular Linux distribution. Ubuntu is also used in the &lt;a href=&#34;https://ubuntu.com/wsl&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;, so it&amp;rsquo;s available to most Windows 10 based developers. On Mac OS, most of the tools shown here can be added via Homebrew.&lt;/p&gt;
&lt;p&gt;When following this guide, it helps if you&amp;rsquo;re starting from a clean system. That way, any existing or additional Python installs can&amp;rsquo;t cause issues or confusion as you follow the steps below. If your system isn&amp;rsquo;t clean, try following this guide in a new Ubuntu virtual machine first, just so you know what to expect.&lt;/p&gt;
&lt;p&gt;Finally, if you&amp;rsquo;d prefer to watch a video on this guide, scroll down to the bottom of the page and hit &amp;lsquo;play.&amp;rsquo;&lt;/p&gt;
&lt;h3 id=&#34;installing-python-like-a-pro&#34;&gt;Installing Python Like A Pro&lt;/h3&gt;
&lt;p&gt;Having the ability to install and switch between Python versions in seconds &amp;mdash; without affecting your operating system &amp;mdash; will make your job much easier. Fortunately, there&amp;rsquo;s a tool that can help.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pyenv/pyenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Pyenv&lt;/a&gt; is an open-source command-line tool that&amp;rsquo;s easy to install and takes care of the messy business of installing and managing multiple Python versions.&lt;/p&gt;
&lt;p&gt;Pyenv lets you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install multiple versions of Python at the same time.&lt;/li&gt;
&lt;li&gt;change your global version at any time.&lt;/li&gt;
&lt;li&gt;use different Python versions &amp;lsquo;per-project&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;override your Python version with an environment variable.&lt;/li&gt;
&lt;li&gt;search for commands present in multiple versions of Python at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the steps below to install the &lt;code&gt;pyenv&lt;/code&gt; tool on your system.&lt;/p&gt;
&lt;h4 id=&#34;step-1-getting-your-system-ready&#34;&gt;Step 1: Getting Your System Ready&lt;/h4&gt;
&lt;p&gt;Ubuntu 20.04 ships with version 3.8.2 of Python pre-installed as the &amp;lsquo;system&amp;rsquo; version of Python. You&amp;rsquo;ll want to keep this, but it&amp;rsquo;s helpful to make it respond to all &lt;code&gt;python&lt;/code&gt; commands. By default, it will only respond to &lt;code&gt;python3&lt;/code&gt;. To fix this, you can install the &lt;code&gt;python-is-python3&lt;/code&gt; command like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install python-is-python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re not using Ubuntu 20.04, your system may already respond to the command &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;step-2-installing-pyenv&#34;&gt;Step 2: Installing Pyenv&lt;/h4&gt;
&lt;p&gt;Installation is simple. A script in the open-source &lt;a href=&#34;https://github.com/pyenv/pyenv-installer&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pyenv-installer&lt;/a&gt; project installs everything you need onto your computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl https://pyenv.run &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the script has run, you&amp;rsquo;ll need to add the following lines to the bottom of your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.pyenv/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pyenv init -&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re new to Linux, you can do this by opening the Terminal application and typing &lt;code&gt;nano .bashrc&lt;/code&gt;. Nano uses arrows to navigate, &lt;code&gt;ctrl-o&lt;/code&gt; to write the changes out, and &lt;code&gt;ctrl-x&lt;/code&gt; to quit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once that&amp;rsquo;s done, close your terminal session (type &lt;code&gt;exit&lt;/code&gt;) and then open a new terminal.&lt;/p&gt;
&lt;p&gt;Next, we need to add some system libraries so that Pyenv can build Python directly from the Python source code. This list may change from time to time, so always check for the latest advice in the &lt;a href=&#34;https://github.com/pyenv/pyenv/wiki/Common-build-problems&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Pyenv Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can check if your installation is ready with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this command reports, &lt;code&gt;&amp;quot;Congratulations! You are ready to build pythons!&amp;quot;&lt;/code&gt; then you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h4 id=&#34;step-3-installing-python-385&#34;&gt;Step 3: Installing Python 3.8.5&lt;/h4&gt;
&lt;p&gt;First of all, to see the full list of the available Python versions &amp;mdash; there are a lot &amp;mdash; type the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv install --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s install the very latest version of Python &amp;mdash; which is 3.8.5 &amp;mdash; using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv install 3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pyenv will now download, build, and install the requested version of Python.&lt;/p&gt;
&lt;p&gt;Finally, tell &lt;code&gt;pyenv&lt;/code&gt; to rehash its list of &amp;lsquo;shims&amp;rsquo; to make sure the new version of Python you just added is ready for use. Shims are the programs &lt;code&gt;pyenv&lt;/code&gt; uses to redirect your Python calls. Rehashing instructs &lt;code&gt;pyenv&lt;/code&gt; to install shims for all Python binaries known to &lt;code&gt;pyenv&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv rehash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-4-switching-between-python-versions&#34;&gt;Step 4: Switching Between Python Versions&lt;/h4&gt;
&lt;p&gt;Now that Python 3.8.5 is installed, let&amp;rsquo;s take a look at the Python versions that &lt;code&gt;pyenv&lt;/code&gt; reports are available for use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your versions list might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;* system &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /home/ben/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; next to &amp;lsquo;system&amp;rsquo; tells you that the system version of Python is currently the global default. To change the global default to the 3.8.5 release that you just installed, type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv global 3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check which version of Python your system is now using globally, ask Python for its version number like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The answer should be &amp;lsquo;Python 3.8.5.&amp;rsquo;&lt;/p&gt;
&lt;p&gt;To switch back to your system version of Python, you can use the special &amp;lsquo;system&amp;rsquo; keyword like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pyenv global system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it. You can now install and switch between many different versions of Python any time you like!&lt;/p&gt;
&lt;h3 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h3&gt;
&lt;p&gt;To find out more about what pyenv can do for you, check out the &lt;a href=&#34;https://github.com/pyenv/pyenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;website&lt;/a&gt; or try &lt;code&gt;pyenv --help&lt;/code&gt;. To get help on a specific command type &lt;code&gt;pyenv &amp;lt;command&amp;gt; --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might find these others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-managing-python-packages&#34;&gt;Managing Python Project Dependencies Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-installing-global-packages&#34;&gt;Managing Python Global Packages Like A Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;Build Python Docker Containers Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cf-gs&#34;&gt;Run Python In Production Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the video to accompany this guide:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/nXbe6Hmb_k0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Hello Python, My Old Friend: Revisiting Python in a Cloud-Native Climate</title>
      
      <link>/blog/hello-python-my-old-friend-revisiting-python-in-a-cloud-native-climate/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/hello-python-my-old-friend-revisiting-python-in-a-cloud-native-climate/</guid>
      <description>

        
        &lt;p&gt;For quite a while now, I‚Äôve kept an eye on &lt;a href=&#34;https://redmonk.com/sogrady/2020/07/27/language-rankings-6-20/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;RedMonk‚Äôs programming language rankings&lt;/a&gt; ‚Äî which track the usage of all programming languages based on data from GitHub, as well as discussion about them on Stack Overflow ‚Äî‚Äî to get insight into the various language trends. In the &lt;a href=&#34;https://redmonk.com/sogrady/2020/02/28/language-rankings-1-20/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;January 2020 update,&lt;/a&gt; something interesting happened: Python reached  No. 2 on the list, taking over Java.&lt;/p&gt;
&lt;p&gt;As RedMonk pointed out, ‚Äú[T]he numerical ranking is substantially less relevant than the language‚Äôs tier or grouping. In many cases, one spot on the list is not distinguishable from the next.‚Äù However, it‚Äôs still interesting, especially as Python has continued to hold the No. 2 spot into the latest ranking after spending approximately seven years ranked third or fourth.&lt;/p&gt;
&lt;p&gt;RedMonk isn‚Äôt alone in its findings, either. GitHub‚Äôs report, &lt;a href=&#34;https://octoverse.github.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The State of the Octoverse&lt;/a&gt; also ranked Python as the second most-popular language used on that website, just behind JavaScript. Not only that, it also found Python remains among the top 10 fastest-growing languages in the community, despite already having a foothold with developers. In the &lt;a href=&#34;https://www.jetbrains.com/lp/python-developers-survey-2019/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JetBrains Python Developers Survey in 2019&lt;/a&gt;, it found that one of the most popular things developers use Python for is web development, with Flask and Django fighting for the top web framework.&lt;/p&gt;
&lt;p&gt;At one time Python was my main language of choice. For the past few years, I‚Äôve primarily been a Java developer, and a Ruby developer before that. Since the time that Python was my go-to, the landscape of software development has changed significantly. Microservices-based architecture continued to gain popularity at mach speed and the adoption of serverless began. Perhaps  most significantly, we saw the rise of Kubernetes.&lt;/p&gt;
&lt;p&gt;So now that Java‚Äôs been bumped out of the top spot for more than six months running, it seems like an especially good time to revisit how to build an application in Python.&lt;/p&gt;
&lt;h2 id=&#34;building-the-application&#34;&gt;Building the Application&lt;/h2&gt;
&lt;p&gt;For the purposes of this post, I wanted to keep the application simple. I chose a two-tier application: a &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-backend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;backend app&lt;/a&gt; that serves up a list of items in an inventory, and a &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-frontend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;frontend app&lt;/a&gt; to display the inventory. Both applications were written using &lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Flask&lt;/a&gt;, a lightweight web application framework for Python. Flask provides a lot to make developing web apps in Python easy, with features such as routing, response templates, logging, session management, and more. For this app, we‚Äôre using it just for basic request routing and template rendering.&lt;/p&gt;
&lt;p&gt;If you‚Äôve written in Python before, much of the code should look pretty standard. The backend application has one endpoint served at &lt;code&gt;/&lt;/code&gt; , which returns a JSON array of objects. The frontend app has a single endpoint, also at &lt;code&gt;/&lt;/code&gt;, which requests the lists of items from the backend and passes them to a &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-frontend/blob/main/templates/index.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;template that it renders&lt;/a&gt;. One thing that should be pointed out is the &lt;code&gt;getBackendURI()&lt;/code&gt; function in the &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-frontend/blob/main/app.py&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;app.py file&lt;/a&gt; for the frontend. This function is called when the frontend needs to know where to request data from the backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;CONFIG_PATH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/config/config.cfg&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getBackendURI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONFIG_PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_pyfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONFIG_PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;BACKEND_URI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8082&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method reads the contents of &lt;code&gt;/config/config.cfg&lt;/code&gt; to know where to send requests when reaching out to the backend. If the file doesn‚Äôt exist, it sends requests to localhost. You may notice that this file doesn‚Äôt exist anywhere in the code; that‚Äôs because we‚Äôll be generating it when we deploy our application to Kubernetes.  Be sure to keep that in mind.&lt;/p&gt;
&lt;h2 id=&#34;packaging-the-application&#34;&gt;Packaging the Application&lt;/h2&gt;
&lt;p&gt;Speaking of deploying to Kubernetes, now we need to package our code into containers. We could write a Dockerfile ourselves, but lucky for us, &lt;a href=&#34;/guides/containers/cnb-what-is/&#34;&gt;Cloud Native Buildpacks&lt;/a&gt; can build the container automatically! If you‚Äôre new to using Cloud Native Buildpacks with Python, I recommend reading &lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;this guide&lt;/a&gt; from my teammate &lt;a href=&#34;/team/ben-wilcock/&#34;&gt;Ben Wilcock&lt;/a&gt; which explains how to get started.&lt;/p&gt;
&lt;p&gt;Since I just use &lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Hub&lt;/a&gt; as my container registry, you can use the following commands yourself so long as you replace my username with your own. While we‚Äôre in the directory containing the &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-backend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;python-shop-backend&lt;/code&gt;&lt;/a&gt; code, let‚Äôs build and push a container image for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pack build brianmmcclain/python-shop-backend  --builder gcr.io/buildpacks/builder:v1
‚Ä¶
Successfully built image brianmmcclain/python-shop-backend

$ docker push brianmmcclain/python-shop-backend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, I‚Äôve used the &lt;a href=&#34;/guides/containers/cnb-gs-pack/&#34;&gt;pack CLI&lt;/a&gt; to build a container from my code, telling it to use a specific builder. In this case, the builder can tell that we‚Äôre building a container for a Python application, so it pulls in the dependencies with &lt;code&gt;pip&lt;/code&gt; by reading the &lt;code&gt;requirements.txt&lt;/code&gt; file.   It knows how to run the application, thanks to the &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we‚Äôll do the same thing in the directory containing the &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-frontend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;python-shop-frontend&lt;/code&gt;&lt;/a&gt; code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pack build brianmmcclain/python-shop-frontend  --builder gcr.io/buildpacks/builder:v1
‚Ä¶
Successfully built image brianmmcclain/python-shop-frontend

$ docker push brianmmcclain/python-shop-frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just as we saw with the backend code, &lt;code&gt;pack&lt;/code&gt; builds the container, then we push it up to Docker Hub. Now all that‚Äôs left is to run it!&lt;/p&gt;
&lt;h2 id=&#34;deploying-to-kubernetes&#34;&gt;Deploying to Kubernetes&lt;/h2&gt;
&lt;p&gt;In the &lt;code&gt;python-shop-frontend&lt;/code&gt; codebase, I‚Äôve included a file named &lt;a href=&#34;https://github.com/BrianMMcClain/python-shop-frontend/blob/main/deploy.yaml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;deploy.yaml, &lt;/a&gt; which contains all of the resources we need to deploy to Kubernetes. In my case, I‚Äôm just deploying to Minikube, but you can &lt;a href=&#34;/blog/kubernetes-at-home-local-k8s-options/&#34;&gt;use other solutions&lt;/a&gt; if you‚Äôd like. You can apply this YAML to Kubernetes with the &lt;code&gt;kubectl apply&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f deploy.yaml
deployment.apps/python-shop-backend created
service/python-shop-backend-service created
configmap/python-shop-frontend-config created
deployment.apps/python-shop-frontend created
service/python-shop-frontend-service created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see a couple of deployments created: one for the frontend and one for the backend. We‚Äôve also created two services for each deployment to attach to. Finally, we‚Äôve created a ConfigMap named &lt;code&gt;python-shop-frontend-config&lt;/code&gt;. Remember when we were looking at the code and noticed a reference to a file at &lt;code&gt;/config/config.cfg&lt;/code&gt;? Here‚Äôs where that data lives. Take a look at this ConfigMap definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config.cfg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;BACKEND_URI=&amp;#34;http://python-shop-backend-service:8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here‚Äôs where we‚Äôve defined that &lt;code&gt;BACKEND_URI&lt;/code&gt; will point to the &lt;code&gt;python-shop-backend-service&lt;/code&gt; service in port 8080. We then reference this ConfigMap in the Deployment for the frontend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;brianmmcclain/python-shop-frontend:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend-config-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend-config-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the volume defined in the &lt;code&gt;volumes&lt;/code&gt; section named &lt;code&gt;python-shop-frontend-config-volume&lt;/code&gt;, which references the &lt;code&gt;python-shop-frontend-config&lt;/code&gt; ConfigMap. In the container specification, we then mount this volume to the container running the frontend at &lt;code&gt;/config&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;brianmmcclain/python-shop-frontend:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python-shop-frontend-config-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this configuration, a file is created from the ConfigMap named &lt;code&gt;config.cfg&lt;/code&gt; and mounted at &lt;code&gt;/config&lt;/code&gt;, which our application reads to know the value of &lt;code&gt;BACKEND_URI&lt;/code&gt;. By configuring our code this way, if the address of the backend ever changes we can update the ConfigMap without having to restart our frontend container.&lt;/p&gt;
&lt;h2 id=&#34;so-whats-the-verdict&#34;&gt;So What‚Äôs the Verdict?&lt;/h2&gt;
&lt;p&gt;In putting together this post, I was reminded of what an enjoyable experience it is to write in Python. I was also very happy to see how easily we can use it to leverage more modern technologies, such as Kubernetes and Cloud Native Buildpacks. Indeed, Python is lightweight, and can result in fairly slim container images.  Flask, meanwhile, proves to be a great framework for developing modern applications.&lt;/p&gt;
&lt;p&gt;Of course, there would be a lot more to consider if we were writing a production application, such as logging, metrics, a proper web server to back our code, and much more. But it makes sense that Python has had such a hold on the software community, and it‚Äôs exciting to see that it‚Äôs only getting stronger. If, like me, you want to learn more, I suggest checking out some of the other content that &lt;a href=&#34;/team/ben-wilcock&#34;&gt;Ben&lt;/a&gt; has been making, such as &lt;a href=&#34;/guides/python/cf-gs/&#34;&gt;running Python in production&lt;/a&gt;. For even more Python content, make sure to check out the Python section of the &lt;a href=&#34;/topics/python/&#34;&gt;Python topic page&lt;/a&gt; for guides and videos!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/JS_YIn49xuw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Building Docker Containers</title>
      
      <link>/videos/python-build-containers-for-python-apps-the-easy-way-with-buildpacks/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-build-containers-for-python-apps-the-easy-way-with-buildpacks/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Installing Python &amp; Switching Versions</title>
      
      <link>/videos/python-installing-python-like-a-pro/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-installing-python-like-a-pro/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Managing Global Packages</title>
      
      <link>/videos/python-managing-global-deps-like-a-pro-with-pipx/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-managing-global-deps-like-a-pro-with-pipx/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Managing Project Packages</title>
      
      <link>/videos/python-managing-python-dependencies-like-a-pro/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-managing-python-dependencies-like-a-pro/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Run In Production</title>
      
      <link>/videos/python-deploy-python-to-production-in-seconds/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-deploy-python-to-production-in-seconds/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: How To Deploy Python Application Into Production</title>
      
      <link>/guides/python/cf-gs/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/cf-gs/</guid>
      <description>

        
        &lt;p&gt;In this guide, you&amp;rsquo;ll learn how to get a Python application into production in seconds.&lt;/p&gt;
&lt;p&gt;Production is super important. It&amp;rsquo;s where your users meet your code and where you get recognition for all the hard work you&amp;rsquo;ve put in. Production is where your company competes, and where it gets rewarded for all the risks it&amp;rsquo;s taken &amp;mdash; large and small.&lt;/p&gt;
&lt;p&gt;Getting code into production quickly and regularly is life changing for developers like yourself. It opens the door to true agility &amp;mdash; a huge win for you, your team, and your company. But if the path to production is littered with roadblocks, getting your applications out there will be tiring and time consuming.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s where Cloud Foundry comes in.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cloud-foundry&#34;&gt;What Is Cloud Foundry?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudfoundry.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cloud Foundry&lt;/a&gt; is an open-source platform that simplifies the lives of developers. Cloud Foundry&amp;rsquo;s &lt;a href=&#34;https://www.cloudfoundry.org/application-runtime/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&amp;lsquo;Application Runtime&amp;rsquo;&lt;/a&gt; takes your application code &amp;mdash; written in Python or a number of other languages or frameworks &amp;mdash; and runs it on any cloud, including Azure, AWS, GCP, Kubernetes, or even vSphere VMs.&lt;/p&gt;
&lt;p&gt;A unique feature of Cloud Foundry is its smooth developer experience. Using a single command you can have your code running in a safe, secure, and stable environment in seconds. Once running, Cloud Foundry takes care of everything else including log streaming, health monitoring, scaling, networking, load-balancing, and makes everyday chores like starting and stopping applications a breeze.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;There are a few things you need to do before getting started with Cloud Foundry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&#34;https://docs.cloudfoundry.org/cf-cli/install-go-cli.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cloud Foundry CLI&lt;/a&gt; tool on your computer. This is the tool you will use to interact with Cloud Foundry. You can check that the tool is working by issuing the command &lt;code&gt;cf help&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decide which Cloud Foundry you&amp;rsquo;re going to use and obtain it&amp;rsquo;s endpoint URL. If you don&amp;rsquo;t have a Cloud Foundry to work with, consider installing Cloud Foundry locally onto Kubernetes on your computer by following the steps in &lt;a href=&#34;/guides/kubernetes/cf4k8s-gs&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Cloud Foundry goes by many names. There are many &lt;a href=&#34;https://www.cloudfoundry.org/thefoundry/#cert-distros&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&amp;lsquo;certified distributions&amp;rsquo;&lt;/a&gt; that offer Cloud Foundry as a commercial product. The &lt;a href=&#34;https://tanzu.vmware.com/application-service&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Application Service&lt;/a&gt; is one example. It is certified to meet the Cloud Foundry open-source standard and is fully compatible with the &lt;a href=&#34;https://docs.cloudfoundry.org/cf-cli/install-go-cli.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;cf CLI&lt;/a&gt; tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;get-the-sample-python-application&#34;&gt;Get The Sample Python Application&lt;/h2&gt;
&lt;p&gt;Download the sample Python application from Github and make the sample application&amp;rsquo;s folder your current working directory as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; git clone https://github.com/benwilcock/buildpacks-python-demo.git
&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; buildpacks-python-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the folder you will notice three text files, &lt;code&gt;web.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, and &lt;code&gt;Procfile&lt;/code&gt;. If you already know what each of these files is for, you can skip ahead to the next section. If you want to know more about them, read on.&lt;/p&gt;
&lt;p&gt;The file &lt;code&gt;web.py&lt;/code&gt; contains a hello-world web application written in &lt;code&gt;Python3&lt;/code&gt; using the &lt;code&gt;Flask&lt;/code&gt; and &lt;code&gt;MarkupSafe&lt;/code&gt; libraries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;markupsafe&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/hello/&amp;lt;username&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# say hello to that user&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The file &lt;code&gt;requirements.txt&lt;/code&gt; clarifies which libraries your application is dependent on, and their versions. Pip can generate the contents of this file for you using the command &lt;code&gt;pip freeze&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;click==7.1.2
Flask==1.1.2
itsdangerous==1.1.0
Jinja2==2.11.2
MarkupSafe==1.1.1
Werkzeug==1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Procfile&lt;/code&gt; specifies the command-line used to execute the application at runtime. In this case the Procfile declares that the &lt;code&gt;web.py&lt;/code&gt; file contains your &lt;code&gt;FLASK_APP&lt;/code&gt;, calls &lt;code&gt;flask run&lt;/code&gt;, and binds the web-server to the &lt;code&gt;--host&lt;/code&gt; with the IP address &lt;code&gt;0.0.0.0&lt;/code&gt;. It is expected that the &lt;code&gt;--port&lt;/code&gt; to bind the application to will be set as an environment variable using the name &lt;code&gt;$PORT&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;web: FLASK_APP=web.py python3 -m flask run --host=0.0.0.0 --port=$PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cloud Foundry&amp;rsquo;s buildpack system uses these files to determine that your application is a Python application. Follow the steps below to run this application in Cloud Foundry.&lt;/p&gt;
&lt;h2 id=&#34;login-to-cloud-foundry&#34;&gt;Login To Cloud Foundry&lt;/h2&gt;
&lt;p&gt;You can login to your Cloud Foundry application service using the &lt;code&gt;cf login&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf login -a &amp;lt;your-api-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;cf&lt;/code&gt; tool will then prompt you for your credentials and ask you to select an &amp;lsquo;org&amp;rsquo; and a &amp;lsquo;space&amp;rsquo;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf login -a CF_API_ENDPOINT_URL
API endpoint: CF_API_ENDPOINT_URL

Email: &amp;lt;enter-your-email&amp;gt;

Password: &amp;lt;enter-your-password&amp;gt;

Select an org:
1. tanzu-devrel

&amp;lt;enter-selected-org-number&amp;gt;

Select a space:
1. development
2. production

&amp;lt;enter-selected-space-number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re using your employers Cloud Foundry, the login process may be different. For example, you may have single sign on (SSO) rather than a username and password and you may be restricted in terms of which orgs and spaces are available to you.&lt;/p&gt;
&lt;p&gt;&amp;lsquo;Org and space&amp;rsquo; are simply Cloud Foundry terms for application partitioning. Depending on how your cloud foundry was set up, you may see very different names and options. Cloud Foundry doesn&amp;rsquo;t attach any special meaning to these names. Production could just as easily be called &amp;lsquo;bob&amp;rsquo; if that makes sense in your organization. Ask your platform team for advice on which space to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Don&amp;rsquo;t really push apps to production unless it&amp;rsquo;s definitely safe for you to do so!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If at any point you need to remind yourself which API url, org, or space you are currently using, you can use the &lt;code&gt;cf target&lt;/code&gt; command like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf target

api endpoint:   CF_API_ENDPOINT_URL
api version:    2.151.0
user:           &amp;lt;your-email&amp;gt;
org:            tanzu-devrel
space:          production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If at any time you need help with a specific command such as &lt;code&gt;cf login&lt;/code&gt; simply ask for context specific help using the &lt;code&gt;--help&lt;/code&gt; option as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf login --help

NAME:
   login - Log user in

USAGE:
   cf login &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-a API_URL&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-u USERNAME&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p PASSWORD&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-o ORG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-s SPACE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--sso &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; --sso-passcode PASSCODE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--origin ORIGIN&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-your-python-application-in-the-production-space&#34;&gt;Run Your Python Application In The &amp;lsquo;Production&amp;rsquo; Space&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;cf target&lt;/code&gt; command above confirmed that the &lt;code&gt;production&lt;/code&gt; space is the current target for your applications. Any space is fine, it doesn&amp;rsquo;t have to be production, the process is the same.&lt;/p&gt;
&lt;p&gt;The command you use to run your application on Cloud Foundry is &lt;code&gt;cf push&lt;/code&gt;. You must give the application a name when you push it. In the example below the name &lt;code&gt;python-demo&lt;/code&gt; has been used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf push python-demo --random-route
Pushing app python-demo to org tanzu-devrel / space production as &amp;lt;your-email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t have to use &lt;code&gt;--random-route&lt;/code&gt; either, it just prevents clashes when an app exists with the same name elsewhere on your Cloud Foundry instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;cf push&lt;/code&gt; command uses a technology called &amp;lsquo;&lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;buildpacks&lt;/a&gt;&amp;rsquo; to put your Python application into a Docker container before running it. The process takes no more than a minute or two on average. During that time, Cloud Foundry will communicate what the buildpack is doing before finally confirming that your application is running.&lt;/p&gt;
&lt;p&gt;When the application has started, Cloud Foundry will alert you and give you the route (URL) that has been assigned to the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app to start...

name:              python-demo
requested state:   started
routes:            python-demo-lean-quokka-sc.cfapps.io
last uploaded:     Tue &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; Jul 16:32:38 BST &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
stack:             cflinuxfs3
buildpacks:        python

type:            web
instances:       1/1
memory usage:    1024M
start command:   &lt;span class=&#34;nv&#34;&gt;FLASK_APP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;web.py python3 -m flask run --host&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0.0.0.0 --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt;
     state     since                  cpu    memory       disk           details
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   running   2020-07-28T15:32:55Z   0.0%   4.3M of 1G   214.6M of 1G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the route assigned to this application by Cloud Foundry is &lt;code&gt;python-demo-lean-quokka-sc.cfapps.io&lt;/code&gt;. Your application&amp;rsquo;s route will be different. You will use the route &lt;strong&gt;you&lt;/strong&gt; have been given to test that you can communicate with the application.&lt;/p&gt;
&lt;h2 id=&#34;test-your-python-application-is-running&#34;&gt;Test Your Python Application Is Running&lt;/h2&gt;
&lt;p&gt;To test the application is running, issue a HTTP GET request to the route Cloud Foundry gave to you when you used the &lt;code&gt;cf push&lt;/code&gt; command in the previous step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; http python-demo-lean-quokka-sc.cfapps.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The application will respond with the legend &amp;lsquo;Hello, World!&amp;rsquo; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
Connection: keep-alive
Content-Length: &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;
Content-Type: text/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
Date: Tue, &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 15:37:41 GMT
Server: Werkzeug/1.0.1 Python/3.8.3
X-Vcap-Request-Id: 7b49d6ff-30d3-46c1-75d8-0bb75275b75d

Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test above uses the &lt;a href=&#34;https://httpie.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;HTTPie&lt;/a&gt; tool, but you could also use &lt;code&gt;curl&lt;/code&gt; or a regular web browser. It&amp;rsquo;s up to you.&lt;/p&gt;
&lt;h2 id=&#34;theres-more&#34;&gt;There&amp;rsquo;s More&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a few more commonly used &lt;code&gt;cf&lt;/code&gt; commands for you. Don&amp;rsquo;t forget, you can use &lt;code&gt;cf help&lt;/code&gt; to get a full list of all the available commands at any time, and &lt;code&gt;cf &amp;lt;command&amp;gt; --help&lt;/code&gt; will give you detailed information on each of them.&lt;/p&gt;
&lt;h3 id=&#34;listing-your-applications&#34;&gt;Listing Your Applications&lt;/h3&gt;
&lt;p&gt;You can see a list of all the applications you have running in your current space at any time using the &lt;code&gt;cf apps&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf apps
Getting apps in org tanzu-devrel / space production as &amp;lt;your-email&amp;gt;...
OK

name          requested state   instances   memory   disk   urls
python-demo   started           1/1         1G       1G     python-demo-lean-quokka-sc.cfapps.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;getting-detailed-application-status&#34;&gt;Getting Detailed Application Status&lt;/h3&gt;
&lt;p&gt;You can get fine-grained application status using the &lt;code&gt;cf app&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf app python-demo
Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app python-demo in org tanzu-devrel / space production as &amp;lt;your-email&amp;gt;...

name:              python-demo
requested state:   started
routes:            python-demo-lean-quokka-sc.cfapps.io
last uploaded:     Tue &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; Jul 16:32:38 BST &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
stack:             cflinuxfs3
buildpacks:        python

type:           web
instances:      1/1
memory usage:   1024M
     state     since                  cpu    memory        disk           details
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   running   2020-07-28T15:32:55Z   0.5%   30.8M of 1G   214.6M of 1G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tailing-an-applications-log&#34;&gt;Tailing An Applications Log&lt;/h3&gt;
&lt;p&gt;You can view the log stream for your application in realtime with the &lt;code&gt;cf logs&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf logs python-demo
Retrieving logs &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app python-demo in org tanzu-devrel / space production as &amp;lt;your-email&amp;gt;...

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can get recent logs (rather than a tail of the log) using the &lt;code&gt;--recent&lt;/code&gt; option.&lt;/p&gt;
&lt;h3 id=&#34;deleting-removing-an-application&#34;&gt;Deleting (Removing) An Application&lt;/h3&gt;
&lt;p&gt;You can remove and delete your application from Cloud Foundry at any time using the &lt;code&gt;cf delete&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; cf delete python-demo
Really delete the app python-demo?&amp;gt; y
Deleting app python-demo in org tanzu-devrel / space production as &amp;lt;your-email&amp;gt;...
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Most Cloud Foundry installations include a Python Buildpack. But did you know that you can use buildpacks without using Cloud Foundry? Buildpacks are a fabulous, sustainable, stress-free way to get code into Docker containers. To find out how to use them in your Python tool chain take a look at our &lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;Python buildpack guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Did you know that can push Docker images directly to Cloud Foundry? You use the same &lt;code&gt;cf push&lt;/code&gt; command but add the &lt;code&gt;--docker-image&lt;/code&gt; option. Take a look at the help for the push command for more information or read the docs &lt;a href=&#34;http://cli.cloudfoundry.org/en-US/cf/push.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Did you know that you can run Cloud Foundry directly on top of Kubernetes? That means you can get the same smooth &lt;code&gt;cf push&lt;/code&gt; experience on your Kubernetes cluster. Just think, less YAML, less &lt;code&gt;kubectl&lt;/code&gt;, less stress! You can get started with our &lt;a href=&#34;/guides/kubernetes/cf4k8s-gs&#34;&gt;CF for K8s guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might find these others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Install Python Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-managing-python-packages&#34;&gt;Managing Python Project Dependencies Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-installing-global-packages&#34;&gt;Managing Python Global Packages Like A Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cnb-gs-python&#34;&gt;Build Python Docker Containers Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you&amp;rsquo;d prefer to see Cloud Foundry in action without actually following the steps above, check out our video guide:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qLg2xtQ5kTA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: Building Docker Containers</title>
      
      <link>/guides/python/cnb-gs-python/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/cnb-gs-python/</guid>
      <description>

        
        &lt;p&gt;Packaging your application code into Docker containers is a tricky business. Python code is no exception. There are a &lt;em&gt;ton&lt;/em&gt; of best practices that you need to know about if you&amp;rsquo;re going to build a container that is safe, secure, and maintainable over the long term. &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks&lt;/a&gt; codify these best practices, and they&amp;rsquo;re open-source, so they&amp;rsquo;re a great way to turn your application code into runnable containers.&lt;/p&gt;
&lt;p&gt;And because buildpacks completely remove the need for a &lt;code&gt;Dockerfile&lt;/code&gt;, they dramatically simplify the maintenance of your container images &amp;mdash; particularly useful if you have multiple images to maintain. They&amp;rsquo;re no &amp;lsquo;flash-in-the-pan&amp;rsquo; either. Developed by Heroku in 2011, and also used in Cloud Foundry, buildpacks have built and run millions of production workloads!&lt;/p&gt;
&lt;p&gt;For Python developers, there are currently two implementations of the Buildpack standard which provide Python compatible buildpacks. One is from Google and the other is from Heroku. In this guide, you&amp;rsquo;ll learn how to use Heroku&amp;rsquo;s Python buildpack to create a container image for a sample Python application.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;There are a few things you need to do before getting started with Python Buildpacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://hub.docker.com/search?type=edition&amp;amp;offering=community&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Desktop&lt;/a&gt;. The &lt;code&gt;pack&lt;/code&gt; CLI requires the Docker daemon, so you&amp;rsquo;ll need to have that installed and running locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://kube.academy/courses/containers-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Containers 101&lt;/a&gt; on KubeAcademy, particularly if you&amp;rsquo;ve never worked with containers or Docker before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the documentation for &lt;a href=&#34;https://buildpacks.io/docs/install-pack/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;installing &lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; in your local environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Optional] If you are completely new to buildpacks, you might prefer to first read up on &lt;a href=&#34;/guides/containers/cnb-what-is&#34;&gt;what are buildpacks?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-buildpacks-with-python&#34;&gt;Using Buildpacks With Python&lt;/h2&gt;
&lt;p&gt;Buildpacks work the same way no matter what language the code is written in. In this guide you&amp;rsquo;ll use a simple Python application, but remember that the process works in the same way for Node.JS, Java, Go, PHP, and more.&lt;/p&gt;
&lt;p&gt;Follow the steps below to quickly create a container image for a Python application using the Heroku Python Buildpack.&lt;/p&gt;
&lt;h3 id=&#34;get-the-sample-python-application&#34;&gt;Get The Sample Python Application&lt;/h3&gt;
&lt;p&gt;Download the sample Python application from Github and make the sample application&amp;rsquo;s folder your current working directory as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; git clone https://github.com/benwilcock/buildpacks-python-demo.git
&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; buildpacks-python-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the folder you will notice three text files, &lt;code&gt;web.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, and &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The file &lt;code&gt;web.py&lt;/code&gt; contains a hello-world web application written in &lt;code&gt;Python3&lt;/code&gt; using the &lt;code&gt;Flask&lt;/code&gt; and &lt;code&gt;MarkupSafe&lt;/code&gt; libraries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;markupsafe&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/hello/&amp;lt;username&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# say hello to that user&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The file &lt;code&gt;requirements.txt&lt;/code&gt; clarifies which libraries your application is dependent on, and their versions. Pip can generate the contents of this file for you using the command &lt;code&gt;pip freeze&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;click==7.1.2
Flask==1.1.2
itsdangerous==1.1.0
Jinja2==2.11.2
MarkupSafe==1.1.1
Werkzeug==1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Procfile&lt;/code&gt; specifies the command-line used to execute the application at runtime. In this case the Procfile declares that the &lt;code&gt;web.py&lt;/code&gt; file contains your &lt;code&gt;FLASK_APP&lt;/code&gt;, calls &lt;code&gt;flask run&lt;/code&gt;, and binds the web-server to the &lt;code&gt;--host&lt;/code&gt; with the IP address &lt;code&gt;0.0.0.0&lt;/code&gt;. It is expected that the &lt;code&gt;--port&lt;/code&gt; to bind the application to will be set as an environment variable using the name &lt;code&gt;$PORT&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;web: FLASK_APP=web.py python3 -m flask run --host=0.0.0.0 --port=$PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-the-list-of-suggested-builders&#34;&gt;Get The List Of Suggested Builders&lt;/h3&gt;
&lt;p&gt;There are many implementations of the &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks&lt;/a&gt; standard. These implementations are called &amp;lsquo;builders&amp;rsquo;. To discover the very latest list of suggested builders, use the &lt;code&gt;pack suggest-builders&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack suggest-builders

Suggested builders:
	Google:                gcr.io/buildpacks/builder:v1                 Ubuntu &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; .NET, Go, Java, Node.js, and Python
	Heroku:                heroku/buildpacks:18                         heroku-18 base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ruby, Java, Node.js, Python, Golang, &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; PHP
	Paketo Buildpacks:     gcr.io/paketo-buildpacks/builder:full-cf     cflinuxfs3 base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX
        ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, both &lt;a href=&#34;https://github.com/heroku/heroku-buildpack-python&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Heroku&lt;/a&gt; and &lt;a href=&#34;https://github.com/GoogleCloudPlatform/buildpacks&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Google Cloud Platform&lt;/a&gt; offer open-source Python compatible builders. For this exercise, you&amp;rsquo;ll use the Heroku builder, but you could just as easily use Google&amp;rsquo;s.&lt;/p&gt;
&lt;h3 id=&#34;set-heroku-as-your-default-builder&#34;&gt;Set Heroku As Your Default Builder&lt;/h3&gt;
&lt;p&gt;Copy the name of the builder that you want to set as your default from the list above &amp;mdash; in this case it&amp;rsquo;s &lt;code&gt;heroku/buildpacks:18&lt;/code&gt; &amp;mdash; and use the &lt;code&gt;pack set-default-builder&lt;/code&gt; command to set this buildpack as the default as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack set-default-builder heroku/buildpacks:18
Builder heroku/buildpacks:18 is now the default builder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-pack-to-create-your-container-image&#34;&gt;Use &lt;code&gt;pack&lt;/code&gt; To Create Your Container Image&lt;/h3&gt;
&lt;p&gt;To run the builder and create your Python application container image, use the command &lt;code&gt;pack build&lt;/code&gt;. Be sure to also specify an image name for the container in the format &amp;ldquo;&amp;lt;repository&amp;gt;/&amp;lt;container-name&amp;gt;:&amp;lt;tag&amp;gt;&amp;rdquo; as shown in the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack build benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process of building the image will now begin. The first time you do this, you will notice that docker is downloading a series of container image &amp;lsquo;layers.&amp;rsquo; This is because buildpacks are also containers, so they must first be pulled by Docker before the buildpack can be run locally. Once these images are in your cache, the process is much quicker. The output looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;18: Pulling from heroku/buildpacks
4e20becbd46f: Pull &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
3c742a4a0f38: Already exists
ab0f59294661: Downloading &lt;span class=&#34;o&#34;&gt;[=============================&lt;/span&gt;&amp;gt;                     &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  16.05MB/26.96MB
Digest: sha256:296e4f3394e3147a61bd8b08d3c46c0dfa2bf2d4266ed598241cf2419dc96fa3
Status: Image is up to date &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; heroku/buildpacks:18
18: Pulling from heroku/pack
Digest: sha256:219a7621db58790ace66a87d33a200cd89aeda03192994e11a05967fbf8892f6
Status: Image is up to date &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; heroku/pack:18
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; DETECTING
heroku/python   0.2
heroku/procfile 0.5
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; ANALYZING
Restoring metadata &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;heroku/python:shim&amp;#34;&lt;/span&gt; from &lt;span class=&#34;nv&#34;&gt;cache&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; RESTORING
Restoring data &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;heroku/python:shim&amp;#34;&lt;/span&gt; from &lt;span class=&#34;nv&#34;&gt;cache&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; BUILDING
-----&amp;gt; No change in requirements detected, installing from cache
-----&amp;gt; Installing SQLite3
-----&amp;gt; Installing requirements with pip
-----&amp;gt; Discovering process types
       Procfile declares types     -&amp;gt; &lt;span class=&#34;nv&#34;&gt;web&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; EXPORTING
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;launcher&amp;#39;&lt;/span&gt;
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;heroku/python:profile&amp;#39;&lt;/span&gt;
Adding 1/1 app layer&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;
*** Images &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;a904788f7748&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
      index.docker.io/benwilcock/python-sample:1.0.0
Adding cache layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;heroku/python:shim&amp;#39;&lt;/span&gt;
Successfully built image benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you see the words &amp;ldquo;Successfully built image&amp;rdquo; the process is complete. Your new container image will now be available in your local Docker image repository. You can list the images in your local repository with the command &lt;code&gt;docker images&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker images
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
benwilcock/python-sample    1.0.0               59843a212207        &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; years ago        651MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Already we&amp;rsquo;re benefiting from buildpack engineering! Notice that the &lt;code&gt;CREATED&lt;/code&gt; date says &amp;ldquo;40 years ago&amp;rdquo;. This is a best practice whereby the timestamps of layers are &amp;lsquo;zeroed&amp;rsquo; to make container builds more reproducible, cache-able, and to avoid unnecessary image downloads. You can read more &lt;a href=&#34;https://buildpacks.io/docs/reference/reproducibility/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;test-the-container-image&#34;&gt;Test The Container Image&lt;/h3&gt;
&lt;p&gt;Testing the container is no more difficult than running the image with the &lt;code&gt;docker run&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker run -d -ePORT&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; -p8080:8080 --name python-sample benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the container image of your application is running in the background, simply query the &lt;code&gt;http://localhost:8080&lt;/code&gt; endpoint, either using a command-line tool like &lt;a href=&#34;https://httpie.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Httpie&lt;/a&gt; as shown below, or a regular web browser.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; http localhost:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your application will respond with the legend &amp;ldquo;Hello, World!&amp;rdquo; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Content-Length: 13
Content-Type: text/html; charset=utf-8
Date: Tue, 21 Jul 2020 10:27:47 GMT
Server: Werkzeug/1.0.1 Python/3.6.11

Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you&amp;rsquo;re done! You built your sample Python application into an OCI compliant Docker container image without resorting to a &lt;code&gt;Dockerfile&lt;/code&gt;. Heroku will take care of most of the underlying maintenance tasks on the operating system and the Python interpreter. All you need to do is re-run &lt;code&gt;pack build&lt;/code&gt; and you&amp;rsquo;ll get a fresh image. If nothing changed, neither will your image.&lt;/p&gt;
&lt;h3 id=&#34;tidy-up&#34;&gt;Tidy Up&lt;/h3&gt;
&lt;p&gt;You can stop and remove the container from Docker as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker stop python-sample
&amp;gt; docker rm python-sample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h3&gt;
&lt;p&gt;Learn more about buildpacks right here on the Tanzu Developer Center with these great guides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-what-is&#34;&gt;Buildpacks: What Are They?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-gs-pack&#34;&gt;Getting Started With The &lt;code&gt;pack&lt;/code&gt; CLI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-gs-kpack&#34;&gt;Getting Started With Automated Builds Using &lt;code&gt;kpack&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find out more about what the &lt;code&gt;pack&lt;/code&gt; tool can do by using the &lt;code&gt;--help&lt;/code&gt; command and browsing the &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks.io&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might find these others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Install Python Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-managing-python-packages&#34;&gt;Managing Python Project Dependencies Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-installing-global-packages&#34;&gt;Managing Python Global Packages Like A Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cf-gs&#34;&gt;Run Python In Production Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you&amp;rsquo;d prefer to see the buildpack in action without actually following the steps above, check out the accompanying YouTube video guide:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/JS_YIn49xuw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
  </channel>
</rss>
