<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VMware Tanzu Developer Center – Containers</title>
    <link>/tags/containers/</link>
    <description>Recent content in Containers on VMware Tanzu Developer Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      
      <title>Guides: What are Containers?</title>
      
      <link>/guides/containers/what-are-containers/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/containers/what-are-containers/</guid>
      <description>

        
        &lt;p&gt;Containers are logical constructs that contain the binaries for an application. Container binaries run at a higher level of infrastructure abstraction than virtual machines. In contrast to a virtual machine, which provides an entire operating system to provide a runtime environment for an application&amp;rsquo;s binaries, a container bundles only an application&amp;rsquo;s binaries and its required libraries.&lt;/p&gt;
&lt;p&gt;It’s important to note that VMs and containers are not mutually exclusive.  The infrastructure (networks, servers, and storage) required to support containers can often be more easily managed using virtualization, and therefore the two technologies are complementary.&lt;/p&gt;
&lt;p&gt;In general, the term &lt;strong&gt;container&lt;/strong&gt; is used to refer to either a container image or an instance of a running container. When you run a container, an abstraction layer, the container runtime, schedules access to a shared operating system. Container standards are being developed by the &lt;a href=&#34;https://opencontainers.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open Container Initiative&lt;/a&gt;, which currently has specifications for both the container runtime and the container image.&lt;/p&gt;
&lt;h2 id=&#34;the-container-runtime&#34;&gt;The Container Runtime&lt;/h2&gt;
&lt;p&gt;Although Docker is the most popular example of a container runtime, there are others, such as containerd, rkt etc.&lt;/p&gt;
&lt;p&gt;Similar to how a Linux kernel helps run application processes by providing hardware resources, a container runtime helps partition the Linux kernel to run isolated Linux processes with specific resource limits around CPU, memory, etc. The runtime also helps isolate application processes using two Linux kernel primitives: &lt;a href=&#34;https://man7.org/linux/man-pages/man7/cgroups.7.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;control groups (cgroups)&lt;/a&gt; and &lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;namespaces&lt;/a&gt;. Cgroups limit resources to a set of processes running on a Linux host, and namespaces isolate processes from one another.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/containers/linux-kernel-without-containers.png&#34; alt=&#34;Linux Kernel Without Containers&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;A running container is the set of processes (typically an application) that the container runtime supports, ensuring the necessary constructs in the kernel are created to limit resource consumption and provide isolation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/containers/linux-kernel-with-containers.png&#34; alt=&#34;Linux Kernel With Containers&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-containers-help&#34;&gt;How Do Containers Help?&lt;/h2&gt;
&lt;p&gt;Because containers operate at a higher level of abstraction than VMs, they improve &lt;strong&gt;application portability, server elasticity, and server resource utilization&lt;/strong&gt;. A container runtime can schedule multiple containers on a shared operating system, benefitting both infrastructure operators and application developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefits for Operations, Infrastructure, and IT Teams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lowers the operating system footprint that has to be managed across servers&lt;/li&gt;
&lt;li&gt;Reduces an application&amp;rsquo;s dependencies on an operating system&lt;/li&gt;
&lt;li&gt;Eases maintenance and shortens maintenance windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Benefits for Application Development Teams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because containers decouple an application and its dependencies from the operating system, development teams can skip creating multiple test environments with various operating systems for validating application behavior&lt;/li&gt;
&lt;li&gt;Streamlines the development pipeline to reduce the time to build and ship applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these benefits produce a compelling result: Containers shorten the time it takes to build, test, and ship applications.&lt;/p&gt;
&lt;p&gt;Containers help accelerate development pipelines by streamlining dev/test cycles and reducing the effort needed to deploy applications. They execute consistently in each deployment, providing portability between platforms and between clouds. Containers increase the efficiency and agility of an organization.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;Containers enable consistent deployment and execution of applications across development and test environments and across multiple clouds. See our &lt;a href=&#34;/topics/containers/&#34;&gt;Containers topic page&lt;/a&gt; for more container-related content. You may also want to check out our &lt;a href=&#34;/workshops/lab-container-basics/&#34;&gt;Container Basics Workshop&lt;/a&gt; to keep learning about containers, as well as &lt;a href=&#34;https://kube.academy&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;KubeAcademy&lt;/a&gt; that has an excellent series on &lt;a href=&#34;https://kube.academy/courses/containers-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Containers 101&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started learning about container orchestration with Kubernetes, see &lt;a href=&#34;/guides/kubernetes/what-is-kubernetes&#34;&gt;What is Kubernetes?&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Containers</title>
      
      <link>/guides/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/containers/</guid>
      <description>

        
        &lt;p&gt;Containers are one of the most common ways to package applications and their dependencies to make them reliably portable across different environments. &lt;a href=&#34;https://www.opencontainers.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Open Container Initiative (OCI)&lt;/a&gt; is the standard that most container systems follow. To learn more, try the &lt;a href=&#34;https://kube.academy/courses/containers-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Containers 101&lt;/a&gt; course on &lt;a href=&#34;https://kube.academy&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;KubeAcademy&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Workshops: Container Basics</title>
      
      <link>/workshops/lab-container-basics/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/workshops/lab-container-basics/</guid>
      <description>

        
        &lt;p&gt;Containers are a lightweight form of OS-level virtualization. They enable a set of application processes to be run in their own isolated environment, without the need to run a full operating system. In this workshop, you’ll learn the basics of how to build container images and run them. We’ll be using the Docker tool.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: How to use Harbor Registry to Eliminate Docker Hub Rate Limits</title>
      
      <link>/guides/kubernetes/harbor-as-docker-proxy/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/harbor-as-docker-proxy/</guid>
      <description>

        
        
&lt;div class=&#34;youtube-video-shortcode&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KSH2Hzk-E7U&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div align=&#34;center&#34;&gt;&lt;i&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KSH2Hzk-E7U&amp;feature=youtu.be&#34;&gt;Watch Paul Walk through this guide on Tanzu.TV Shortcuts.&lt;/a&gt;&lt;/i&gt;&lt;/div&gt;
&lt;p&gt;On August 24 2020 &lt;a href=&#34;https://docker.com&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker&lt;/a&gt; announced they would be
implementing
&lt;a href=&#34;https://www.docker.com/blog/scaling-docker-to-serve-millions-more-developers-network-egress/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Rate Limits on the Docker Hub&lt;/a&gt;
and they were
&lt;a href=&#34;https://www.docker.com/blog/what-you-need-to-know-about-upcoming-docker-hub-rate-limiting/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;implemented on November 2 2020&lt;/a&gt;
thus ending our free ride of unlimited Docker Image pulls.&lt;/p&gt;
&lt;p&gt;Unless you&amp;rsquo;re a paid customer of Docker or very lucky you&amp;rsquo;ve probably started to
see errors like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR: toomanyrequests: Too Many Requests.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You have reached your pull rate limit. You may increase
the limit by authenticating and upgrading:
https://www.docker.com/increase-rate-limits.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be very frustrating, especially in Kubernetes where it might not be
apparent why your new Pod is just sitting there in a &lt;code&gt;Pending&lt;/code&gt; state. Imagine
this happening right as you need to scale your Deployments to serve a sudden
increase in traffic.&lt;/p&gt;
&lt;p&gt;This would be where a troll on Reddit (You know the sort, the kind that will
&amp;ldquo;&lt;a href=&#34;https://news.ycombinator.com/item?id=6277943&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;What you guys are referring to as Linux, is in fact, GNU/Linux&amp;rdquo;&lt;/a&gt;
at you would proclaim
&amp;ldquo;&lt;a href=&#34;https://www.whoownsmyavailability.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;You own your availability&lt;/a&gt;&amp;rdquo;. He&amp;rsquo;s not
wrong &amp;hellip; but also not helpful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/tweet-who-owns-your-availability.png&#34; alt=&#34;that twitter troll&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Thankfully the team developing the &lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Harbor Registry&lt;/a&gt; have
been hard at work to ensure that you can access the images you need without
downloading the whole internet to your server.&lt;/p&gt;
&lt;p&gt;There are actually two features in Harbor that will let us work around the rate
limits, Registry Replication, and Registry Proxy.&lt;/p&gt;
&lt;p&gt;Registry Replication allows you to replicate images between registries, whereas
Proxy lets you keep a local copy of images on an as-requested basis.&lt;/p&gt;
&lt;p&gt;In a production scenario you would probably look to Replication so that you can
be very specific about what Images to allow, however in a Development scenario
you might use Proxy-ing as you don&amp;rsquo;t necessarily know ahead of time what Images
you might need access to. Further using Proxy-ing can be really useful for a
home lab to cut down on internet traffic as you pull images.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll explore both options below.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before you get started, you&amp;rsquo;ll need Harbor (ideally version 2.1.3 or newer)
installed somewhere. If you don&amp;rsquo;t already have it installed, we&amp;rsquo;ve made it
incredibly easy for your with our &lt;a href=&#34;../harbor-gs/&#34;&gt;Getting Started with Harbor&lt;/a&gt;
Guide.&lt;/p&gt;
&lt;p&gt;Once you have a Harbor registry installed, log into it&amp;rsquo;s Web UI as an Admin user.&lt;/p&gt;


&lt;div class=&#34;aside aside-info&#34;&gt;
    &lt;div class=&#34;aside aside-title&#34;&gt;
        &lt;i class=&#34;fas fa-exclamation-circle&#34;&gt;&lt;/i&gt;
        &lt;div&gt;Confirm Versions&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;aside aside-content&#34;&gt;
    &lt;p&gt;Note: Docker has been rapidly changing both the Docker Hub and the Docker CLI,
this makes it difficult for Integrations such as Harbor&amp;rsquo;s replication / proxy
features to keep pace. To ensure the best chance of functionality, ensure you&amp;rsquo;re
using the versions stated in this document.&lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;set-up-a-registry-endpoint&#34;&gt;Set up a Registry Endpoint&lt;/h2&gt;
&lt;p&gt;Whether doing replication or proxy, you need to configure Dockerhub as a
replication endpoint.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;Administration&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Registries&lt;/strong&gt; and click the &lt;strong&gt;+ New Endpoint&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;strong&gt;Provider&lt;/strong&gt; and &lt;strong&gt;Name&lt;/strong&gt; both to &lt;code&gt;Docker Hub&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can leave the rest of the settings as default, unless you want access to
private images, in which case add in your &lt;strong&gt;Access ID&lt;/strong&gt; and &lt;strong&gt;Access
Secret&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/create-endpoint.png&#34; alt=&#34;Create Endpoint&#34;  /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press the &lt;strong&gt;Test Connection&lt;/strong&gt; button and an a successful test hit &lt;strong&gt;OK&lt;/strong&gt; to save.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-a-dockerhub-proxy&#34;&gt;Create a Dockerhub Proxy&lt;/h2&gt;
&lt;p&gt;For more information about how Proxy Projects work, see the
&lt;a href=&#34;https://goharbor.io/docs/2.1.0/administration/configure-proxy-cache/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;Projects&lt;/strong&gt; and click the &lt;strong&gt;+ New Project&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Project Name&lt;/strong&gt; to &lt;code&gt;dockerhub-proxy&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Access Level&lt;/strong&gt; to &lt;code&gt;Public&lt;/code&gt; (unless you intend to make it private and require login).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave &lt;strong&gt;Storage Quota&lt;/strong&gt; at the default &lt;code&gt;-1 GB&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Proxy Cache&lt;/strong&gt; to &lt;code&gt;Docker Hub&lt;/code&gt; (the Endpoint we created earlier).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/create-proxy-project.png&#34; alt=&#34;Create Proxy Project&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the proxy is working with &lt;code&gt;docker pull&lt;/code&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker pull &amp;lt;url-of-registry&amp;gt;/dockerhub-proxy/library/ubuntu:20.04
20.04: Pulling from dockerhub-proxy/library/ubuntu
83ee3a23efb7: Pull &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
db98fc6f11f0: Pull &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
f611acd52c6c: Pull &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715
Status: Downloaded newer image &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; harbor.aws.paulczar.wtf/dockerhub-proxy/library/ubuntu:20.04
harbor.aws.paulczar.wtf/dockerhub-proxy/library/ubuntu:20.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;aside aside-warning&#34;&gt;
    &lt;div class=&#34;aside aside-title&#34;&gt;
        &lt;i class=&#34;fas fa-exclamation-circle&#34;&gt;&lt;/i&gt;
        &lt;div&gt;Content-Type Error&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;aside aside-content&#34;&gt;
    &lt;p&gt;If you receive error
&lt;code&gt;Error response from daemon: missing or empty Content-Type header&lt;/code&gt;, you&amp;rsquo;ll need
to upgrade Harbor to version 2.1.3 as some changes in Docker have had downstream
ripple effects. Older versions of Docker will still work.&lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;configure-docker-hub-replication&#34;&gt;Configure Docker Hub Replication&lt;/h2&gt;
&lt;h3 id=&#34;create-a-project-to-replicate-to&#34;&gt;Create a Project to replicate to&lt;/h3&gt;
&lt;p&gt;With Proxy-ing enabled, let&amp;rsquo;s now turn our eyes to Replication. This is where we
can surgically select which images we want to make available.&lt;/p&gt;
&lt;p&gt;For more information about how Replication works, see the
&lt;a href=&#34;https://goharbor.io/docs/2.1.0/administration/configuring-replication/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;Projects&lt;/strong&gt; and click the &lt;strong&gt;+ New Project&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Project Name&lt;/strong&gt; to &lt;code&gt;dockerhub-replica&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave all other settings as their defaults.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/create-replica-project.png&#34; alt=&#34;Create Replica Project&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-a-replication-rule&#34;&gt;Create a Replication Rule&lt;/h3&gt;
&lt;p&gt;Next we create a Replication Rule to determine the specific Images we want to
replicate. In this case we want only the &lt;code&gt;library/python:3.8.2-slim&lt;/code&gt; image. We
restrict this as Replication can quickly hit the Docker Hub rate limits.&lt;/p&gt;
&lt;p&gt;The resource filters support basic pattern recognition, so you could use
&lt;code&gt;library/**&lt;/code&gt; if you wanted to replicate all of the official images, however this
would quickly hit the rate limits.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;Administration&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Replication&lt;/strong&gt; and click the &lt;strong&gt;+ New Replication Rule&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Name&lt;/strong&gt; to &lt;code&gt;dockerhub-python-slim&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Replication mode&lt;/strong&gt; to &lt;code&gt;Pull-based&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Source registry&lt;/strong&gt; to &lt;code&gt;Docker Hub&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Source resource filter&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Name&lt;/strong&gt; to &lt;code&gt;library/python&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Source resource filter&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Tag&lt;/strong&gt; to &lt;code&gt;3.8.2-slim&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;Destination namespace&lt;/strong&gt; to &lt;code&gt;dockerhub-replica/python&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave the rest as their defaults.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/create-replica-python.png&#34; alt=&#34;Create Replica for Python&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;test-replication&#34;&gt;Test Replication&lt;/h3&gt;
&lt;p&gt;We chose manual replication (so that we don&amp;rsquo;t overwhelm the rate limits) so we
need to actually perform the replication step, and then validate that it worked.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Administration&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Replication&lt;/strong&gt; and click the
&lt;strong&gt;dockerhub-python-slim&lt;/strong&gt; item then click the &lt;strong&gt;Replicate&lt;/strong&gt; Button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Harbor will kick off the replication and will show the attempt below in the
&lt;strong&gt;Executions&lt;/strong&gt; section. You can click on it for more details or logs, but for
now we&amp;rsquo;re just waiting for it to &lt;strong&gt;finish&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Projects&lt;/strong&gt; and select &lt;strong&gt;dockerhub-replica&lt;/strong&gt; then click
&lt;strong&gt;Repositories&lt;/strong&gt;. You should see &lt;code&gt;dockerhub-replica/python/python&lt;/code&gt; with at
least one Artifact. *To avoid this accidental redundancy in the name we
should have set &lt;strong&gt;Destination namespace&lt;/strong&gt; to &lt;code&gt;dockerhub-replica&lt;/code&gt; rather than
&lt;code&gt;dockerhub-replica/python&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/harbor-as-docker-proxy/replica-success.png&#34; alt=&#34;Successful replication&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it! We&amp;rsquo;ve learned how to replicate Docker images from Docker Hub using
both Proxy-ing and Replication. This can be applied for Harbor to Harbor
replication as well. It&amp;rsquo;s not uncommon to have one main Harbor registry as the
source of truth and then Replication to remote sites, and Proxy-ing to edge
sites.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: What is Helmfile?</title>
      
      <link>/guides/kubernetes/helmfile-what-is/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/helmfile-what-is/</guid>
      <description>

        
        &lt;p&gt;&lt;a href=&#34;https://github.com/roboll/helmfile&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helmfile&lt;/a&gt; adds additional functionality to &lt;a href=&#34;https://helm.sh&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm&lt;/a&gt; by wrapping it in a declarative spec that allows you to compose several charts together to create a comprehensive deployment artifact for anything from a single application to your entire infrastructure stack.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you&amp;rsquo;re not familiar with Helm, start with our &lt;a href=&#34;../helm-what-is&#34;&gt;Getting Started with Helm&lt;/a&gt; guide.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In addition to the Templating and Packaging Helm gives you for your Kubernetes manifests, Helmfile provides a way to apply GitOps style CI/CD methodologies over your Helm charts by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separating out your Environment specific information from your Chart&lt;/li&gt;
&lt;li&gt;Performing a diff of your existing deployment and only applying the changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Helmfile uses the same templating system as Helm and in a way lets you template your templates (&lt;em&gt;&lt;insert yo dawg meme here&gt;&lt;/em&gt;). This can be a bit difficult to wrap your mind around at first, but adds a ton of powerful features as it allows you to put basic programming logic like &lt;em&gt;if/then/else&lt;/em&gt; into just about any component including your actual Helm Chart Values.&lt;/p&gt;
&lt;h2 id=&#34;why-is-it-important&#34;&gt;Why Is It Important?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://helm.sh&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm&lt;/a&gt; is a great tool for templating and sharing Kubernetes manifests for your applications. However it can become quite cumbersome to install larger multi-tier applications or groups of applications across multiple Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;Helmfile addresses this issue and more by providing a fairly simple but very powerful declarative specification for deploying Helm charts across many environments.&lt;/p&gt;
&lt;p&gt;First and foremost Helm is a &lt;strong&gt;declarative&lt;/strong&gt; specification. Like Kubernetes manifests you can store them in version control, and perform declarative style actions. Much like Kubernetes has &lt;code&gt;kubectl apply&lt;/code&gt; for Kubernetes manifests, Helmfile has &lt;code&gt;helmfile apply&lt;/code&gt; for Helm charts.&lt;/p&gt;
&lt;p&gt;Helmfile is very &lt;strong&gt;modular&lt;/strong&gt;, you can have one large &lt;code&gt;helmfile.yaml&lt;/code&gt; that does everything or you can break it down to suit your way of working. This modularity allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Give each Helm chart its own &lt;code&gt;helmfile.yaml&lt;/code&gt; and include them recursively in a centralized &lt;code&gt;helmfile.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separate out &lt;a href=&#34;https://github.com/roboll/helmfile/blob/master/docs/writing-helmfile.md#layering-state-files&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;environment specific&lt;/a&gt; values from general values. Often you&amp;rsquo;ll find while a Helm chart can take 50 different values, only a few actually differ between your environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As well as providing a set of values, either Environment specific or otherwise, you can also read Environment Variables, Execute scripts and read their output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Store &lt;a href=&#34;https://github.com/roboll/helmfile/pull/648&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;remote state&lt;/a&gt; in git/s3/fileshare/etc in much the same way as Terraform does.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Helmfile is &lt;strong&gt;versatile&lt;/strong&gt; enough to allow you to also include raw Kubernetes manifests, &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kustomizations&lt;/a&gt;, or even execute scripts via hooks, turning all of these into &lt;a href=&#34;https://github.com/roboll/helmfile/pull/673&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helm releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Need to modify the resources generated by a specific Helm chart? Helmfile allows you to &lt;a href=&#34;https://github.com/roboll/helmfile/pull/673&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;JSON/Strategic-Merge&lt;/a&gt; &lt;strong&gt;patch&lt;/strong&gt; resources before actually installing them.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How Does It Work?&lt;/h2&gt;
&lt;p&gt;Helmfile works by reading in your Helmfile manifest (usually &lt;code&gt;helmfile.yaml&lt;/code&gt;) which declares the Helm Charts you want to install and the values you wish to install them with, these are compared against the actual state of what is running in your cluster and any differences are then acted upon by calling out to Helm itself.&lt;/p&gt;
&lt;p&gt;A basic &lt;code&gt;helmfile.yaml&lt;/code&gt; to install nginx would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;./apps/nginx/helmfile.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;repositories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;stable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://kubernetes-charts.storage.googleapis.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;releases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-nginx-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;stable/nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;~1.24.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./nginx/vault.yaml.gotmpl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my.registry.com/nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Values are a list that can be passed in as a file or a list of key/values. These are the helm style values that will be rendered into your chart. Helmfile will treat any file with the &lt;code&gt;.gotmpl&lt;/code&gt; extension as a template and will render it &lt;strong&gt;before&lt;/strong&gt; passing it onto Helm.&lt;/p&gt;
&lt;p&gt;If you wanted to load the above into a parent &lt;code&gt;helmfile.yaml&lt;/code&gt; you could do the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;./helmfile.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;helmfiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;apps/*/helmfile.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can even make all of your included &lt;code&gt;helmfile.yaml&lt;/code&gt; files templates and render stuff right into the helmfiles. It really is templates all the way down.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;./helmfile.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helmfiles:
  - apps/*/helmfile.yaml.gotmpl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thankfully the Helmfile GitHub repository has some really good &lt;a href=&#34;https://github.com/roboll/helmfile#configuration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://github.com/roboll/helmfile/blob/master/docs/writing-helmfile.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;best practices&lt;/a&gt; showing different ways to construct your &lt;code&gt;helmfile.yaml&lt;/code&gt; files.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-use-it&#34;&gt;How Can I Use It?&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s pretty easy to get started with Helmfile. The documentation in the repository is quite good.&lt;/p&gt;
&lt;p&gt;For an interesting perspective showing how to completely decouple your Code and Environment data have a look at Paul Czarkowski&amp;rsquo;s &lt;a href=&#34;https://github.com/paulczar/helmfile-starter-kit&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Helmfile Starter Kit&lt;/a&gt; and the &lt;a href=&#34;https://github.com/paulczar/platform-operations-on-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Platform Operations on Kubernetes&lt;/a&gt; project built on top of it. The latter of which is used to deploy a whole kitchen sink worth of platform tooling across dozens of Kubernetes clusters.&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/faq.css&#34;&gt;
&lt;div class=&#34;faqs&#34; id=&#34;faqs&#34;&gt;
    &lt;div class=&#34;flex-container jc-between&#34;&gt;&lt;/div&gt;
        &lt;h2 class=&#34;h2 mb-md&#34;&gt;Frequently Asked Questions&lt;/h2&gt;
        &lt;div class=&#34;faq&#34;&gt;
            
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What is a Helmfile?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Helmfile is a declarative specification wrapping for deploying distributions of Helm charts. They add additional functionality to Helm by allowing you to compose several charts together to create a comprehensive deployment artifact.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What is a Helm chart?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Helm charts are Kubernetes manifests or a collection of files that correspond to a directly related set of Kubernetes resources.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;How do Helmfiles work?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Helmfiles work by reading your Helmfile manifests and comparing them against the actual state of what is running in your cluster. Any differences are then acted upon by calling out to Helm itself.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What is the difference between Helm and Helmfile?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Helm is a tool for templating and sharing Kubernetes manifests for your applications, while a Helmfile is a declarative specification for deploying Helm charts that adds functionality to Helm.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;How do you modify the resources generated by a specific Helm chart?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Resources generated by a specific Helm chart can be modified before installation by allowing you to JSON/Strategic-Merge patch resources.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
  &lt;div class=&#34;faq-item&#34; id=&#34;faq-item&#34;&gt;
    &lt;div class=&#34;flex jc-between ai-center&#34;&gt;
        &lt;h4 class=&#34;faq-question&#34;&gt;What are the benefits of Helmfiles?&lt;/h4&gt;
        &lt;i class=&#34;fa fa-angle-down&#34; id=&#34;arrow&#34;&gt;&lt;/i&gt;
    &lt;/div&gt;
    &lt;div class=&#34;faq-answer&#34;&gt;
        &lt;div&gt;Helmfiles are beneficial because they provide powerful declarative specification for deploying Helm charts across many environments.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
    $(&#34;.faq-item&#34;).each( function() {
        $(this).click(function () {
            $(this).find(&#34;#arrow&#34;).toggleClass(&#34;flip&#34;); 
            $(this).find(&#34;.faq-answer&#34;).slideToggle(200); 
        });
    });
&lt;/script&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Installing Harbor on Kubernetes with Project Contour, Cert Manager, and Let’s Encrypt</title>
      
      <link>/guides/kubernetes/harbor-gs/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/harbor-gs/</guid>
      <description>

        
        &lt;p&gt;Running a private container image registry has been a staple in many enterprise
environments for years. These registries allow full control over access,
updates, and the software platform itself. And while your organization may have
an official image registry, having your own can also be a benefit!&lt;/p&gt;
&lt;p&gt;Maybe it&amp;rsquo;s just for learning. Or maybe you like the idea of self-hosting your
own services. Or maybe, like so many companies that have also made the decision
to self-host, you are concerned about security and access. Whatever the reason,
you have made the decision to deploy your own. But this process includes a lot
more than just an initial install.&lt;/p&gt;
&lt;p&gt;A container image registry needs to be accessible to many online services to be
useful, not the least of which is your desktop. It’s what makes pulling and
pushing images possible. And you probably want it to be accessible from outside
your own network, too, so that you can collaborate and share your projects.
These days, to be secure, this requires TLS encryption to enable HTTPS traffic.&lt;/p&gt;
&lt;p&gt;In this guide, you will deploy Harbor to Kubernetes as the actual image registry
application. You will also use Project Contour to manage ingress to your
Kubernetes cluster.&lt;/p&gt;

&lt;div class=&#34;youtube-video-shortcode&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SXSqrgYKO4s&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;harbor-and-contour&#34;&gt;Harbor and Contour&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://goharbor.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Harbor&lt;/a&gt; is a powerful registry for containers and Helm
charts. It is fully open source and backed by the
&lt;a href=&#34;https://landscape.cncf.io/selected=harbor&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;.
But getting it up and running, with automated TLS certificate renewal in
particular, can be a challenge—especially with the multiple services Harbor uses
that require east-west and north-south network communication.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://projectcontour.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Contour&lt;/a&gt;, also a CNCF project, is an ingress
controller built for Kubernetes. It functions as a control plane for Envoy while
also offering advanced routing functionality beyond the default ingress
controller provided by Kubernetes.&lt;/p&gt;
&lt;p&gt;You will deploy Harbor and Contour, and use
&lt;a href=&#34;https://cert-manager.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;cert-manager&lt;/a&gt; and
&lt;a href=&#34;https://letsencrypt.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; to automate TLS certificate generation
and renewal for your Harbor installation. This will allow you to keep your
Harbor installation up and running and utilizing HTTPS without manually
generating and applying new certificates.&lt;/p&gt;
&lt;p&gt;Also, using the patterns in this guide, you should be able to deploy other
services to Kubernetes and secure their ingress as well. And once you understand
the basics of certificate management, ingress, and routing services, you’ll be
able to keep on deploying other services to Kubernetes and enabling secure
access over the internet!&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before you get started, you’ll need to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install Helm 3&lt;/strong&gt;: Helm is used in this guide to install Contour and Harbor.
A guide for installing Helm can be found
&lt;a href=&#34;https://helm.sh/docs/intro/install/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a Kubernetes cluster&lt;/strong&gt;: This guide was built using Google Kubernetes
Engine (GKE) with Kubernetes version 1.17. Any Kubernetes cluster with access
to the internet should work fine, but your results may vary depending on the
version you use. Initial testing with 1.16 resulted in errors during the
Harbor install. For a guide on creating a GKE cluster, see
&lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/quickstart&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;this page&lt;/a&gt; from
Google. Ensure your
&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/cheatsheet/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;kubectl&lt;/code&gt; context&lt;/a&gt;
is using this cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install watch&lt;/strong&gt;: watch is a small command-line utility that continually
shows the output of a command being run. This allows you to monitor
&lt;code&gt;kubectl get pods&lt;/code&gt;, for example, without explicitly re-running the command
multiple times. Instructions for installing on macOS are
&lt;a href=&#34;https://osxdaily.com/2010/08/22/install-watch-command-on-os-x/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;About 30 minutes&lt;/strong&gt;: It could take more time than that; it will depend on how
long the Let’s Encrypt servers take to issue certificates. But in most of my
testing for writing this post, it took about 30 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional - buy a domain name&lt;/em&gt;: You can use &lt;code&gt;.xip.io&lt;/code&gt; (a
&lt;a href=&#34;http://xip.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;service&lt;/a&gt; that provides dynamic DNS based on IP address)
addresses to avoid needing to buy a domain. Otherwise you will need a domain
name that you control in order to configure DNS. This guide uses a
Google-managed domain and DNS zone, but instructions can be modified for other
providers. Note: if you do decide to use &lt;code&gt;.xip.io&lt;/code&gt;, you may experience issues
using the &lt;code&gt;letsencrypt-prod&lt;/code&gt; ClusterIssuer later in the demo due to rate
limiting. Often you can just wait a few hours and it&amp;rsquo;ll eventually work. For
best results, we recommend using your own domain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prepare-the-environment&#34;&gt;Prepare the Environment&lt;/h2&gt;
&lt;p&gt;Create a Kubernetes cluster.  In GKE this can be as simple as running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcloud container clusters create jan8 --num-nodes &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Being organized is key to any successful project. So before you dig in, create a
new project directory and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir harbor-install &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-project-contour&#34;&gt;Install Project Contour&lt;/h2&gt;
&lt;p&gt;While you are going to use Helm to install Project Contour, Helm will not create
the namespace for you. So the first step in this installation is to create that
namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl create namespace projectcontour
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you do not have the Bitnami repo referenced in Helm yet (you can check by
running &lt;code&gt;helm repo list&lt;/code&gt;), you will need to install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo add bitnami https://charts.bitnami.com/bitnami
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will also need to update your Helm repositories.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, run &lt;code&gt;helm install&lt;/code&gt; to finish the installation. Here you will install
Bitnami&amp;rsquo;s image for Contour. This chart includes defaults that will work out of
the box for this guide. And since it comes from Bitnami, you can trust that the
image has been thoroughly tested and scanned.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm install ingress bitnami/contour -n projectcontour --version 3.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now simply wait for the Pods to become &lt;code&gt;READY&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;watch kubectl get pods -n projectcontour
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then define some environment variables for your proposed Harbor domain and your
email address. It is recommended that you use a subdomain under the domain
procured in the prerequisites section (e.g., harbor.example.com). This way you
can use other subdomain URLs to access other services you may deploy in the
future. The email address will be used for your Let&amp;rsquo;s Encrypt certificate so the
cert authority can notify you about expirations.&lt;/p&gt;
&lt;p&gt;Defining these variables will make the rest of the commands in this guide more
simple to run. The email address and the domain do not have to use the same
domain (a Gmail address is fine).&lt;/p&gt;
&lt;p&gt;If you do not have a custom domain run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl describe svc ingress-contour-envoy --namespace projectcontour &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep Ingress &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DOMAIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$IP&lt;/span&gt;.xip.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Otherwise run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DOMAIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;your.domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set your email address for cert-manager:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;username@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-up-dns&#34;&gt;Set Up DNS&lt;/h2&gt;


&lt;div class=&#34;aside aside-warning&#34;&gt;
    &lt;div class=&#34;aside aside-title&#34;&gt;
        &lt;i class=&#34;fas fa-exclamation-circle&#34;&gt;&lt;/i&gt;
        &lt;div&gt;You may skip this section&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;aside aside-content&#34;&gt;
    &lt;p&gt;This section is not applicable for those using &lt;code&gt;xip.io&lt;/code&gt;.
If that&amp;rsquo;s you, please skip this entire section.&lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this section, things can vary a bit. Because this guide was written using
Google Cloud Platform (GCP) tooling, the instructions below will reflect that.
But should you be using another provider, I will try to provide a generalized
description of what is being done so you can look up those specific steps. I
have also numbered these steps for clarity.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In order to set up DNS records, you need the IP address of the Envoy ingress
router installed by Project Contour. Use the following command to describe
the service. If the &lt;code&gt;EXTERNAL-IP&lt;/code&gt; is still in a &lt;code&gt;&amp;lt;pending&amp;gt;&lt;/code&gt; state, just wait
until one is assigned. Record this value for a future step.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch kubectl get service ingress-contour-envoy -n projectcontour -o wide
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Now set up a DNS zone within your cloud provider.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For GCP, this can be found in the GCP web UI, under Networking Services,
Cloud DNS. Click &lt;code&gt;Create Zone&lt;/code&gt; and follow the instructions to give the zone
a descriptive name, as well as provide the DNS name. The DNS name will be
whatever domain you have registered (e.g., &lt;code&gt;example.com&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For AWS, this is done via a service called
&lt;a href=&#34;https://aws.amazon.com/route53/faqs/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Route 53&lt;/a&gt;, and for Azure,
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/dns/dns-getstarted-portal_&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;this is done&lt;/a&gt;
by creating a resource in the Azure Portal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once completed, the important part is that you now have a list of name
servers. For example, one or more of the format
&lt;code&gt;ns-cloud-x1.googledomains.com.&lt;/code&gt; Record these for a future step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Next, add an A record to your DNS zone for a wildcard (&lt;code&gt;*&lt;/code&gt;) subdomain. An A
record is an &amp;ldquo;Address&amp;rdquo; record, one of the most fundamental types of DNS
records; it maps the more user-friendly URL (harbor.example.com) to an IP
address. Setting this up as a wildcard will allow you to configure any
traffic coming into any subdomain to first be resolved by Project Contour and
Envoy, then be routed to its final destination based on the specific
subdomain requested.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For GCP, click into the DNS zone you just created and select &lt;code&gt;Add Record Set&lt;/code&gt;.
From here, add a &lt;code&gt;*&lt;/code&gt; as the DNS name field so the full DNS name reads
&lt;code&gt;*.example.com&lt;/code&gt;. In the IPv4 address field, enter the &lt;code&gt;EXTERNAL_IP&lt;/code&gt; of the
Envoy service recorded earlier in Step 1. Then click create.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For AWS and Azure, this is done via the respective services listed in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once completed, your DNS zone should have an A record set up for any subdomain
(&lt;code&gt;*&lt;/code&gt;) to be mapped to the IP address of the Envoy service running in
Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;For the last of the somewhat confusing UI-based steps, you need to add the
list of name servers from Step 2 to your personal domain. This will allow any
HTTP/HTTPS requests for your domain to reference the records you set up
previously in your DNS zone.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Google-managed domains, in the Google Domains UI, click &lt;code&gt;manage&lt;/code&gt; next to
the domain you want to modify. Then click on &lt;code&gt;DNS&lt;/code&gt;. In the Name Servers
section at the top, click &lt;code&gt;edit&lt;/code&gt;. Now, one at a time, simply paste in the list
of name servers recorded in Step 2. There should be four name server
addresses. Then click &lt;code&gt;Save&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For other domain name registrars, the process is similar. Contact your
registrar if you require further assistance with this process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it for configuring DNS. Now you need to wait for all the new records to
propagate. Run the following command and wait for the output to show that your
domain is now referencing the IP address of the Envoy service. This could take a
few minutes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch host &lt;span class=&#34;nv&#34;&gt;$DOMAIN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-cert-manager&#34;&gt;Install cert-manager&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cert-manager.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cert-manager&lt;/a&gt; will automate certificate renewal for
your services behind Project Contour. When a certificate is set to expire,
cert-manager will automatically request a new one from the certificate issuer
(you will set this up in the next section). This is especially important when
using a project like Let&amp;rsquo;s Encrypt, whose certificates are only valid for 90
days.&lt;/p&gt;
&lt;p&gt;To install cert-manager, this guide uses Helm, for uniformity. As with
installing Project Contour, Helm will not create a namespace, so the first step
is to create one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create namespace cert-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you do not have the Jetstack repo referenced in Helm yet (you can check by
running &lt;code&gt;helm repo list&lt;/code&gt;), you will need to install that reference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm repo add jetstack https://charts.jetstack.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, update your Helm repositories.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm repo update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, run &lt;code&gt;helm install&lt;/code&gt; to install cert-manager.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm install cert-manager jetstack/cert-manager --namespace cert-manager &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --version v1.0.2 --set &lt;span class=&#34;nv&#34;&gt;installCRDs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, wait for the Pods to become &lt;code&gt;READY&lt;/code&gt; before moving on to the next step.
This should only take a minute or so.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch kubectl get pods -n cert-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-up-lets-encrypt-staging-certificates&#34;&gt;Set up Let&amp;rsquo;s Encrypt Staging Certificates&lt;/h2&gt;
&lt;p&gt;When initially setting up your Harbor service, or any service that will be using
Let&amp;rsquo;s Encrypt, it is important to start by using certificates from their staging
server as opposed to the production server. Staging certificates allow you to
test your service without the risk of running up against any API rate limiting,
which Let’s Encrypt imposes on its production environment. This is not a
requirement, however; production certificates can be used initially. But using
the staging ones is a good habit to get into, and will highlight how these
certificates are applied.&lt;/p&gt;
&lt;p&gt;Create the deployment YAML for the staging certificate by pasting the block
below into a new file. Once applied, this will set up the staging cert
configuration along with your email address, for certificate expirations
notifications. You won&amp;rsquo;t need to worry about these emails, however, as
cert-manager will take care of the renewal for you.&lt;/p&gt;
&lt;p&gt;Notice that this is of &lt;code&gt;kind: ClusterIssuer&lt;/code&gt;. That means this certificate issuer
is scoped to all namespaces in this Kubernetes cluster. For more granular
controls in production, you may decide to simply change this to &lt;code&gt;kind: Issuer&lt;/code&gt;,
which will be scoped to a specific namespace and only allow services in that
namespace to request certificates from that issuer. But be aware that this will
necessitate changing other configuration options throughout this guide. We are
using &lt;code&gt;ClusterIssuer&lt;/code&gt; because it is secure enough for our use case, and
presumably you are not using a multi-tenant Kubernetes cluster when following
this guide.&lt;/p&gt;
&lt;p&gt;Finally, this sets up a “challenge record&amp;quot; in the &lt;code&gt;solvers&lt;/code&gt; section, which
allows Let&amp;rsquo;s Encrypt to verify that the certificate it is issuing is really
controlled by you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; letsencrypt-staging.yaml
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1alpha2
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;kind: ClusterIssuer
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  name: letsencrypt-staging
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  acme:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    email: $EMAIL_ADDRESS
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    privateKeySecretRef:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;      name: letsencrypt-staging
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    server: https://acme-staging-v02.api.letsencrypt.org/directory
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    solvers:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    - http01:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        ingress:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;          class: contour
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;code&gt;apply&lt;/code&gt; the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f letsencrypt-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process of creating the cluster issuer should be fairly quick, but you can
confirm it completed successfully by running the following and ensuring the
cluster issuer was issued.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get clusterissuers.cert-manager.io
NAME                  READY   AGE
letsencrypt-staging   True    74s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-harbor&#34;&gt;Install Harbor&lt;/h2&gt;
&lt;p&gt;Now that you have your staging certificate, you can install Harbor, for which
this guide uses Helm in combination with the Bitnami repo set up earlier. As
with your other install steps, the first thing to do is create the namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create namespace harbor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, create the values file. The Bitnami Helm chart includes defaults that, for
the most part, will work for your needs. However, there are a few configuration
options that need to be set.&lt;/p&gt;
&lt;p&gt;Here you will notice that you are giving the TLS secret in Kubernetes a name,
&lt;code&gt;harbor-tls-staging&lt;/code&gt;. You can choose any name you like, but it should be
descriptive and reflect that this secret will be distinct from the production
certificate you will apply later.&lt;/p&gt;
&lt;p&gt;You are also setting up references to your domain so Harbor and Contour can set
up routing. The Annotations section is important as it tells Harbor about our
configuration. Notice that for
&lt;code&gt;cert-manager.io/cluster-issuer: letsencrypt-staging&lt;/code&gt; you are telling Harbor to
use the &lt;code&gt;ClusterIssuer&lt;/code&gt; called letsencrypt-staging, the one you set up earlier.
This will come up again later when you move to production certificates. Comments
are provided in the file for further detail.&lt;/p&gt;
&lt;p&gt;Finally, this values file will disable the Harbor Notary service. At the time of
this writing there is a bug in the Bitnami Helm chart (already reported) that
doesn&amp;rsquo;t allow a TLS certificate to be applied for both &lt;code&gt;notary.$DOMAIN&lt;/code&gt; and
&lt;code&gt;registry.$DOMAIN&lt;/code&gt;. I will try to update this post once that bug is fixed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; harbor-values.yaml
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;harborAdminPassword: Password12345
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;service:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  type: ClusterIP
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  tls:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    enabled: true
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    existingSecret: harbor-tls-staging
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    notaryExistingSecret: notary-tls-staging
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;ingress:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  enabled: true
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  hosts:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    core: registry.$DOMAIN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    notary: notary.$DOMAIN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  annotations:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    cert-manager.io/cluster-issuer: letsencrypt-staging  # use letsencrypt-staging as the cluster issuer for TLS certs
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    ingress.kubernetes.io/force-ssl-redirect: &amp;#34;true&amp;#34;     # force https, even if http is requested
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    kubernetes.io/ingress.class: contour                 # using Contour for ingress
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    kubernetes.io/tls-acme: &amp;#34;true&amp;#34;                       # using ACME certificates for TLS
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;externalURL: https://registry.$DOMAIN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;portal:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  tls:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    existingSecret: harbor-tls-staging
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now install Harbor using this values file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm install harbor bitnami/harbor -f harbor-values.yaml -n harbor --version 9.4.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And wait for the Pods to become &lt;code&gt;&amp;lt;READY&amp;gt;&lt;/code&gt;. This may take a minute or two.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch kubectl get pods -n harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, ensure that the certificates were requested and returned successfully.
This should happen fairly quickly, but may take up to an hour. It all depends on
the server load at that time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n harbor get certificate
NAME                 READY   SECRET               AGE
harbor-tls-staging   True    harbor-tls-staging   2m26s
notary-tls-staging   True    notary-tls-staging   2m26s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Print out the URL, username, and password:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;url: https://registry.$DOMAIN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;username: admin
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;password: $(kubectl get secret --namespace harbor harbor-core-envvars -o jsonpath=&amp;#34;{.data.HARBOR_ADMIN_PASSWORD}&amp;#34; | base64 --decode)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now open your browser of choice and go to your URL. You will notice that you
will need to accept the security warning that the site is &amp;ldquo;untrusted.&amp;rdquo; This is
because you are still using the staging certificates, which are not signed by a
trusted certificate authority (CA).&lt;/p&gt;
&lt;p&gt;Once you ensure that you can log in and that Harbor is working as intended, you
can move to production certificates.&lt;/p&gt;
&lt;h2 id=&#34;set-up-lets-encrypt-production-certificates&#34;&gt;Set Up Let&amp;rsquo;s Encrypt Production Certificates&lt;/h2&gt;


&lt;div class=&#34;aside aside-warning&#34;&gt;
    &lt;div class=&#34;aside aside-title&#34;&gt;
        &lt;i class=&#34;fas fa-exclamation-circle&#34;&gt;&lt;/i&gt;
        &lt;div&gt;Rate Limits&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;aside aside-content&#34;&gt;
    &lt;p&gt;Reminder, if using &lt;code&gt;.xip.io&lt;/code&gt; you may encounter rate limit issues with Lets
Encrypt causing major delays in the certificate issuance.&lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Similar to how you set up the Let&amp;rsquo;s Encrypt staging certificate, you now need to
create the &lt;code&gt;ClusterIssuer&lt;/code&gt; for production certificates. First, &lt;code&gt;echo&lt;/code&gt; the
following to create the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; letsencrypt-prod.yaml
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1alpha2
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;kind: ClusterIssuer
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  name: letsencrypt-prod
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  acme:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    email: $EMAIL_ADDRESS
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    privateKeySecretRef:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;      name: letsencrypt-prod
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    server: https://acme-v02.api.letsencrypt.org/directory
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    solvers:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    - http01:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        ingress:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;          class: contour
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then apply it to your Kubernetes cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f letsencrypt-prod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you can confirm this process completed successfully by running the
following and ensuring the cluster issuer was issued.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get clusterissuers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recall how earlier in the annotations of the Harbor &lt;code&gt;values.yml&lt;/code&gt; file you told
Harbor to use the &lt;code&gt;letsencrypt-staging&lt;/code&gt; cluster issuer, as well as the secret
&lt;code&gt;harbor-tls-staging&lt;/code&gt;. You must now tell Harbor to use the production cluster
issuer you just created, and trigger it to create a new secret based on that
certificate. To do this, you are going to update the &lt;code&gt;harbor-values.yaml&lt;/code&gt; file
using &lt;code&gt;sed&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s/-staging/-prod/&#39; harbor-values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;code&gt;helm delete&lt;/code&gt; then &lt;code&gt;helm install&lt;/code&gt; to uninstall and reinstall Harbor:&lt;/p&gt;
&lt;p&gt;Note: The persistent volumes are not deleted during the &lt;code&gt;helm delete&lt;/code&gt; so any
changes in Harbor you may have made should persist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm delete -n harbor harbor
helm install harbor bitnami/harbor -f harbor-values.yaml -n harbor --version 9.4.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait for the new Pods to become &lt;code&gt;&amp;lt;READY&amp;gt;&lt;/code&gt;. This may take a minute or two.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch kubectl get pods -n harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This process may take as little as a minute or as long as an hour. It just
depends on the server load at that time. But in most of my testing, it took less
than 10 minutes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;watch kubectl get certificate harbor-tls-prod -n harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the certificates are generated successfully, your Harbor instance should be
up and running with valid and trusted TLS certificates. Try logging into Harbor
again.&lt;/p&gt;
&lt;p&gt;Your browser should no longer present a warning, as the certificate you are now
using is signed by a trusted CA.&lt;/p&gt;
&lt;p&gt;Note: If you still see certificate warnings, you may need to re-open it from a
fresh browser.&lt;/p&gt;
&lt;h2 id=&#34;test-harbor&#34;&gt;Test Harbor&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;docker login&lt;/code&gt; to log into your new registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker login https://registry.&lt;span class=&#34;nv&#34;&gt;$DOMAIN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Push an image to the new registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pull nginx:latest
docker tag nginx:latest registry.&lt;span class=&#34;nv&#34;&gt;$DOMAIN&lt;/span&gt;/library/nginx:latest
docker push registry.&lt;span class=&#34;nv&#34;&gt;$DOMAIN&lt;/span&gt;/library/nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Test that Kubernetes can access the new image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create deployment nginx --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;registry.&lt;span class=&#34;nv&#34;&gt;$DOMAIN&lt;/span&gt;/library/nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait a few moments and check that the Pod is running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ NAME                         READY   STATUS    RESTARTS   AGE
pod/nginx-7cdffc88cf-p8v9r   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          5s

NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   AGE
service/kubernetes   ClusterIP   10.123.240.1   &amp;lt;none&amp;gt;        443/TCP   166m

NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nginx   1/1     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;           5s

NAME                               DESIRED   CURRENT   READY   AGE
replicaset.apps/nginx-7cdffc88cf   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       5s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it! You now have a service running in Kubernetes with TLS encryption
enforced and certificate generation automated. And by using these patterns, you
should be able to install and configure other services as well. Specific steps,
especially around the configuration of the service itself, will be different,
but after using this guide you should have a leg up in getting started.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Assign Pods to Nodes With Bitnami Helm Chart Affinity Rules</title>
      
      <link>/guides/kubernetes/assign-pods-to-nodes-with-bitnami-helm-chart-affinity-rules/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/kubernetes/assign-pods-to-nodes-with-bitnami-helm-chart-affinity-rules/</guid>
      <description>

        
        &lt;p&gt;First published on &lt;a href=&#34;https://docs.bitnami.com/tutorials/assign-pod-nodes-helm-affinity-rules/&#34;&gt;https://docs.bitnami.com/tutorials/assign-pod-nodes-helm-affinity-rules/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you install an application in a Kubernetes cluster, the &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes scheduler&lt;/a&gt; decides in which nodes the application pods will be installed unless certain constraints are defined. For example, Kubernetes scheduler may decide to install application pods in a node with more available memory. This is mostly useful except when cluster administrators prefer to distribute a group of pods across the cluster in a specific manner. For this use case, they need a tool that can force Kubernetes to follow custom rules specified by the user.&lt;/p&gt;
&lt;p&gt;Affinity rules supply a way to force the scheduler to follow specific rules that determine where pods should be distributed. To help users to implement affinity rules, Bitnami has enhanced its Helm charts by including opinionated affinities in their manifest files. Cluster administrators now only need to define the criteria to be followed by the scheduler when placing application pods in cluster nodes. They can then enable this feature via a simple install-time parameter&lt;/p&gt;
&lt;p&gt;This tutorial will demonstrate the available affinity rules and how they can be adapted to your needs.&lt;/p&gt;
&lt;h2 id=&#34;assumptions-and-prerequisites&#34;&gt;Assumptions and Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a Google Cloud account. &lt;a href=&#34;https://cloud.google.com/free&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Register for a Google Cloud account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a Kubernetes cluster running with Helm v3.x and &lt;code&gt;kubectl&lt;/code&gt; installed. &lt;a href=&#34;https://docs.bitnami.com/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about getting started with Kubernetes and Helm using different cloud providers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout td-box--gray-darkest p-3 mx-5 border-bottom border-right border-left border-top&#34;&gt;
    &lt;p&gt;This guide uses a Kubernetes cluster created in GKE. These steps are the same for all Kubernetes engines. They don’t work, however, in Minikube, since with Minikube you only can create single-node clusters.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;how-affinity-rules-work-in-bitnami-helm-charts&#34;&gt;How Affinity Rules Work in Bitnami Helm Charts&lt;/h2&gt;
&lt;p&gt;All Bitnami infrastructure solutions available in the &lt;a href=&#34;https://github.com/bitnami/charts/tree/master/bitnami&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Helm charts catalog&lt;/a&gt; now include pre-defined affinity rules exposed through the &lt;code&gt;podAffinityPreset&lt;/code&gt; and &lt;code&gt;podAntiAffinitypreset&lt;/code&gt; parameters in their &lt;code&gt;values.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-1.png&#34; alt=&#34;Pod affinity rules&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Pod affinity and anti-affinity rules allow you to define how the scheduler should behave when locating application pods in your cluster eligible nodes. Depending on the option you choose, the scheduler will behave as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;podAffinityPreset&lt;/code&gt; - Using the &lt;code&gt;podAffinity&lt;/code&gt; rule, the scheduler will locate a new pod on the same node where other pods with the same label are located. This approach is especially helpful to group under the same node pods that meet specific pre-defined patterns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;podAntiAffinitypreset&lt;/code&gt; - Using the &lt;code&gt;podAntiAffinity&lt;/code&gt; parameter lets the scheduler locates one pod in each node. Thus, you will prevent locating a new pod on the same node as other pods are running. This option is convenient if your deployment will demand high availability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having the pods distributed across all nodes allows Kubernetes to ensure high availability of your cluster by keeping running the remaining nodes when one node fails.&lt;/p&gt;
&lt;p&gt;These are the values you can set for both pod affinity and anti-affinity rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Soft&lt;/strong&gt; - Use this value to make the scheduler enforce a rule wherever it can be met (best-effort approach). If the rule cannot be met, the scheduler will deploy the required pods in the nodes with enough resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hard&lt;/strong&gt; - Use this value to make the scheduler enforce a rule. This means that if there are remaining pods that do not comply with the pre-defined rule, they won&amp;rsquo;t be allocated in any node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bitnami Helm charts have the &lt;code&gt;podAntiAffinity&lt;/code&gt; rule with the &lt;code&gt;soft&lt;/code&gt; value enabled by default. Hence, if there are not enough nodes to place one pod per node, it will leave the scheduler to decide where the remaining pods should be located.&lt;/p&gt;
&lt;p&gt;The following section shows two different use cases of configuring &lt;code&gt;podAntiaffinity&lt;/code&gt; parameter.&lt;/p&gt;
&lt;h2 id=&#34;deploying-a-chart-using-the-podantiaffinity-rule&#34;&gt;Deploying a Chart Using the &lt;code&gt;podAntiAffinity&lt;/code&gt; Rule&lt;/h2&gt;
&lt;p&gt;The following examples illustrate how the &lt;code&gt;podAntiAffinity&lt;/code&gt; rule works in the context of the Bitnami MySQL Helm chart. They cover two use cases: installing the chart with the default &lt;code&gt;podAntiAffinity&lt;/code&gt; value and changing the &lt;code&gt;podAntiAffinity&lt;/code&gt; value from &lt;code&gt;soft&lt;/code&gt; to &lt;code&gt;hard&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;use-case-1-install-the-chart-with-the-default-podantiaffinity-value&#34;&gt;Use Case 1: Install the Chart with the Default &lt;code&gt;podAntiaffinity&lt;/code&gt; Value&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install the Bitnami Helm charts repository by running:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;helm repo add bitnami https://charts.bitnami.com/bitnami 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Deploy the MySQL Helm chart by executing the command below. Note that the chart will deploy the cluster with three nodes and two replicas - one primary and one secondary. To make the scheduler follow the default &lt;code&gt;podAntiAffinity&lt;/code&gt; rule, set the parameter as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;helm install mysql bitnami/mysql --set architecture=replication --set secondary.replicaCount=2 --set secondary.podAntiAffinityPreset=soft 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Verify the cluster by checking the nodes. Use the following command to list the connected nodes:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl get nodes 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;You will see an output message like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-2.png&#34; alt=&#34;Example kubectl get pods output&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Three nodes are running in the cluster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check how the pods are distributed. Execute the command below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods -o wide 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-3.png&#34; alt=&#34;Example kubectl get pods -o wide output&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;As expected, both the primary and the secondary pods are in different nodes.&lt;/p&gt;
&lt;p&gt;To verify how the scheduler acts when the &lt;em&gt;soft&lt;/em&gt; value is defined, scale up the cluster by setting the number of secondary replicas to three instead of one. Thus, the resulting number of pods will be four, instead of two.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To scale the cluster, use the command below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl scale sts/mysql-secondary --replicas 3 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Check the pods by running again the &lt;code&gt;kubectl get pods&lt;/code&gt; command. The &lt;code&gt;soft&lt;/code&gt; value left the scheduler to locate the remaining pod that didn&amp;rsquo;t comply with the &amp;ldquo;one pod per node&amp;rdquo; rule:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-4.png&#34; alt=&#34;Example kubectl get pods output&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Note that two pods are running in the same node.&lt;/p&gt;
&lt;h3 id=&#34;use-case-2-change-the-podantiaffinity-value-from-soft-to-hard&#34;&gt;Use Case 2: Change the &lt;code&gt;podAntiAffinity&lt;/code&gt; Value from Soft to Hard&lt;/h3&gt;
&lt;p&gt;To try the &lt;code&gt;hard&lt;/code&gt; type of the &lt;code&gt;podAntiAffinity&lt;/code&gt; rule, deploy the chart again by changing the &lt;code&gt;secondary.podAntiAffinityPreset&lt;/code&gt; value from &lt;code&gt;soft&lt;/code&gt; to &lt;code&gt;hard&lt;/code&gt; as shown below. The chart will deploy the cluster with three nodes and two replicas - one primary and one secondary.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm install mysql-hard bitnami/mysql --set architecture=replication --set secondary.replicaCount=2 --set secondary.podAntiAffinityPreset=hard
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Check the nodes and the pods by running the &lt;code&gt;kubectl get nodes&lt;/code&gt; and the &lt;code&gt;kubectl get pods –o wide&lt;/code&gt; commands:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-5.png&#34; alt=&#34;Example kubectl get pods -o wide output&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Both the primary and secondary pods are running in the same node.&lt;/p&gt;
&lt;p&gt;To verify how the scheduler acts when the &lt;code&gt;hard&lt;/code&gt; value is defined, scale up the cluster by setting the number of secondary replicas to three instead of one. Thus, the resulting number of pods will be four, instead of two.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scale up the cluster by executing the command below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl scale sts/mysql-hard secondary --replicas 3 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;When checking the pods, you will see that the scheduler has ignored the &amp;ldquo;one pod per node&amp;rdquo; rule and also located only as many pods as there are nodes. The fourth pod was not deployed as there are only three nodes available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/kubernetes/bitnami-helm-chart-affinity-rules/image-6.png&#34; alt=&#34;Example kubectl get pods -o wide output&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;podAntiAffinity&lt;/code&gt; rule is an easy way to control how application pods will be distributed across the cluster nodes when installing a Helm chart. Deploy your favorite Bitnami applications and enable this feature via a simple install-time parameter.&lt;/p&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful Links&lt;/h2&gt;
&lt;p&gt;To learn more about the topics discussed in this article, use the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitnami/charts&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Helm charts catalog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.bitnami.com/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami Helm charts documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes scheduler documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes pod affinity documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Kubeapps Meets Tanzu Kubernetes Grid: a New Release is out</title>
      
      <link>/blog/kubeapps-meets-tanzu-kubernetes-grid-a-new-release-is-out/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/kubeapps-meets-tanzu-kubernetes-grid-a-new-release-is-out/</guid>
      <description>

        
        &lt;p&gt;&lt;em&gt;Special thanks to Antonio Gamez and Michael Nelson, members of the VMware Kubeapps Team&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The latest version of &lt;a href=&#34;https://github.com/kubeapps/kubeapps/releases/tag/v2.3.2&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubeapps (v.2.3.2)&lt;/a&gt; is now available for deployment on VMware Tanzu™ Kubernetes Grid™ (TKG) workload clusters. VMware Tanzu users already benefit from deploying Kubeapps in several environments and, now with a little configuration Kubeapps can be integrated with your TKG workload cluster.&lt;/p&gt;
&lt;p&gt;In addition to this capability,  Kubeapps also features full compatibility with the latest versions of &lt;a href=&#34;https://pinniped.dev/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Pinniped&lt;/a&gt; which means that it can be used with &lt;a href=&#34;https://github.com/kubeapps/kubeapps/blob/7aa7c579251e0fb5b446ab71a67d8d847d6ce843/docs/user/using-an-OIDC-provider-with-pinniped.md#enabling-oidc-login-in-managed-clusters&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;any OIDC provider for your TKG clusters and even in managed clusters&lt;/a&gt; such as Azure Kubernetes Service (AKS) and Google Kubernetes Engine (GKE).&lt;/p&gt;
&lt;p&gt;Want to know more? Keep reading to discover the latest capabilities of Kubeapps that will enable developers and admin clusters to deploy and manage trusted open-source content in TKG clusters.&lt;/p&gt;
&lt;h2 id=&#34;a-bit-of-history-what-is-kubeapps&#34;&gt;A bit of History: What is Kubeapps?&lt;/h2&gt;
&lt;p&gt;Kubeapps is an in-cluster web-based application that enables users with a one-time installation to deploy, manage, and upgrade applications on a Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;This past year, the Kubeapps team has added key new features to support different use cases and scenarios. Firstly, we added &lt;a href=&#34;https://blog.bitnami.com/2020/05/kubeapps-now-supports-private-docker-registries.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;support for private Helm and Docker registries&lt;/a&gt; and later, in &lt;a href=&#34;https://blog.bitnami.com/2020/10/Kubeapps-2.0.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubeapps version 2.0&lt;/a&gt;, we built support to run Kubeapps on various VMware Tanzu ™ platforms such as Tanzu ™ Mission Control, vSphere and Tanzu ™ Kubernetes Grid.&lt;/p&gt;
&lt;p&gt;With Kubeapps you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customize deployments through an intuitive, form-based user interface&lt;/li&gt;
&lt;li&gt;Inspect, upgrade and delete applications installed in the cluster&lt;/li&gt;
&lt;li&gt;Browse and deploy from public or private chart repositories including VMware Marketplace™ and Bitnami Application Catalog&lt;/li&gt;
&lt;li&gt;Secure authentication to Kubeapps using an OAuth2/OIDC provider such as the VMware Cloud Service Portal&lt;/li&gt;
&lt;li&gt;Secure authorization based on Kubernetes role-based access control&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-features-of-kubeapps-232&#34;&gt;Key Features of Kubeapps 2.3.2&lt;/h2&gt;
&lt;p&gt;In this Kubeapps release, we have focused on delivering key user experience features including the capability to enable Tanzu users to deploy Kubeapps directly as a Helm chart in TKG workload clusters. This version is tested and validated on the latest version of TKG (v1.3.1)&lt;/p&gt;
&lt;p&gt;Once Kubeapps is up and running, cluster admins will benefit from having :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSO for Authentication with TKG using Pinniped by configuring an OIDC provider&lt;/li&gt;
&lt;li&gt;Ability to configure VMware Tanzu™ Application Catalog (TAC) as a private Chart repository;&lt;/li&gt;
&lt;li&gt;Capability to configure VMware Marketplace ™ Catalog and the Bitnami Application Catalog as public chart repositories;&lt;/li&gt;
&lt;li&gt;A customized user interface adapted to the Tanzu look and feel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/kubeapps-232-release/kubeapps-tkg.png&#34; alt=&#34;alt_text&#34;  title=&#34;Kubeapps support for SSO Authentication&#34; /&gt;
&lt;em&gt;Kubeapps support for SSO Authentication&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All these new capabilities are designed to offer a seamless experience between Kubeapps and Tanzu Kubernetes Grid clusters.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-configure-kubeapps-to-run-in-my-tkg-clusters&#34;&gt;How can I configure Kubeapps to run in my TKG clusters?&lt;/h2&gt;
&lt;p&gt;Tanzu users can execute these simple steps to gain the maximum advantage with this new version of Kubeapps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure your cluster to enable SSO for Authentication with TKG using Pinniped and integrate Kubeapps with the identity management provider&lt;/li&gt;
&lt;li&gt;Adjust the Kubeapps user interface to get a customized look and feel&lt;/li&gt;
&lt;li&gt;Configure role-based access control in Kubeapps (RBAC) to manage roles and permissions among the teams in your organization&lt;/li&gt;
&lt;li&gt;Deploy Kubeapps in the cluster&lt;/li&gt;
&lt;li&gt;Add public and private repositories to Kubeapps: the public VMware Marketplace™ repository and your private &lt;a href=&#34;https://tanzu.vmware.com/application-catalog&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Application Catalog&lt;/a&gt; for &lt;a href=&#34;https://tanzu.vmware.com/tanzu/advanced&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Advanced&lt;/a&gt; repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point your development team can start deploying, listing, removing and managing applications in your TKG clusters from the Kubeapps user interface with total confidence!&lt;/p&gt;
&lt;p&gt;Refer to the Kubeapps documentation to learn how to &lt;a href=&#34;https://github.com/kubeapps/kubeapps/tree/master/docs/step-by-step/kubeapps-on-tkg&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;deploy and configure Kubeapps on VMware Tanzu Kubernetes Grid.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;support-and-resources&#34;&gt;Support and Resources&lt;/h2&gt;
&lt;p&gt;Since Kubeapps is an OSS project, support for this version of Kubeapps will be provided on a best-effort basis.&lt;/p&gt;
&lt;p&gt;For solving the problems you may have (including deployment support, operational support and bug fixes), please &lt;a href=&#34;https://github.com/kubeapps/kubeapps/issues&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;open an issue in the Kubeapps GitHub repository.&lt;/a&gt; A markdown template is provided by default to open new issues with the information requested to prioritize and respond to them as soon as possible.&lt;/p&gt;
&lt;p&gt;Also, if you want to contribute to the project, feel free to &lt;a href=&#34;https://github.com/kubeapps/kubeapps/pulls&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;send us a pull request,&lt;/a&gt; and the team will check it and guide you in the process for a successful merge.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubeapps/kubeapps/tree/master/docs&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Kubeapps documentation section&lt;/a&gt; is full of useful resources to help you get the best of the chart.&lt;/p&gt;
&lt;p&gt;Check out the step-by-step guide for &lt;a href=&#34;https://github.com/kubeapps/kubeapps/tree/master/docs/step-by-step/kubeapps-on-tkg&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;deploying and configuring Kubeapps on VMware Tanzu™ Kubernetes Grid™&lt;/a&gt; and the &lt;a href=&#34;https://docs.bitnami.com/tutorials/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami documentation tutorials site&lt;/a&gt; for improving your Kubernetes skills.&lt;/p&gt;
&lt;p&gt;For more information on VMware Tanzu Kubernetes Grid, refer to &lt;a href=&#34;https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid/index.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;its documentation page&lt;/a&gt;  where you will find handy information on managing your Kubernetes clusters.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Videos: Simplify Building Containers w/ Cloud Native Buildpacks</title>
      
      <link>/videos/cloudnativebuildpacks-lightboard/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/videos/cloudnativebuildpacks-lightboard/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Guides: Managing and Securing Container Images in a Registry</title>
      
      <link>/guides/containers/managing-container-images-registry/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/containers/managing-container-images-registry/</guid>
      <description>

        
        &lt;p&gt;A key reason why enterprises are turning to Kubernetes is that cloud native services and practices boost developer productivity. As you put containerized applications into production, you need a secure way to store, scan, and sign your container images. A container image registry without management and security puts your cloud native environment at risk.&lt;/p&gt;
&lt;p&gt;Container images present some security challenges. Images are usually built by layering other images, which could contain vulnerabilities, and those vulnerabilities can find their way into production systems. Defects and malware can also affect container images. When the provenance of a container is dubious or unknown these risks increase.&lt;/p&gt;
&lt;p&gt;Container image registries with the following functionality can reduce these risks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scan images for vulnerabilities found in the Common Vulnerabilities and Exploits (CVE) database.&lt;/li&gt;
&lt;li&gt;Sign images as known and trusted by using a notary.&lt;/li&gt;
&lt;li&gt;Set up secure, encrypted channels for connecting to the registry.&lt;/li&gt;
&lt;li&gt;Authenticate users and control access by using existing enterprise accounts managed in a standard directory service, such as Active Directory.&lt;/li&gt;
&lt;li&gt;Tightly control access to the registry using the principles of least privilege and separation of duties.&lt;/li&gt;
&lt;li&gt;Enact policies that let users consume only those images that meet your organization&amp;rsquo;s thresholds for vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;harbor-a-secure-image-registry&#34;&gt;Harbor: A Secure Image Registry&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Harbor&lt;/a&gt; is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. A CNCF Graduated project, Harbor delivers compliance, performance and interoperability to help you consistently and securely manage artifacts across cloud native compute platforms like Kubernetes and Docker. Harbor provides all the functionality mentioned above, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scans images for CVEs in conjunction with a number of scan providers including CentOS/Clair, Aqua/Trivy, Anchore/Engine, and DoSec to detect container images with vulnerabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrates with Active Directory/LDAP and OIDC to provide role-based access control so that you can securely store images behind your firewall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signs images as trusted by using &lt;a href=&#34;https://github.com/theupdateframework/notary&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Notary&lt;/a&gt;. You can also set policies that prevent vulnerable or untrusted images from being used in production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vulnerability-scanning&#34;&gt;Vulnerability Scanning&lt;/h3&gt;
&lt;p&gt;Containers often use base images of operating systems like Ubuntu and CentOS from a public image repository, such as DockerHub. The packages of an operating system and the applications on it, however, can contain vulnerabilities.&lt;/p&gt;
&lt;p&gt;Vulnerability scanning helps detect known vulnerabilities to reduce the risk of security breaches. Identifying a vulnerability on an image and keeping the vulnerability from going into production reduces the attack surface of a containerized application.&lt;/p&gt;
&lt;p&gt;The Harbor image registry scans images with Clair or Trivy (default options) to help prevent images with known vulnerabilities from running in production. With Harbor, you can automate the scanning of images or scan them manually.&lt;/p&gt;
&lt;p&gt;Scanners work by continuously importing metadata about vulnerabilities from various sources, including CVEs, and storing the metadata in a database. When Harbor scans an image, Harbor checks the database through the appropriate API and produces a list of vulnerabilities.&lt;/p&gt;
&lt;h3 id=&#34;establishing-content-trust-with-notary&#34;&gt;Establishing Content Trust with Notary&lt;/h3&gt;
&lt;p&gt;Because images are the building blocks of a containerized application, a security best practice is to use signed container images from a trusted registry. Harbor establishes trust by letting publishers sign images when they push them into the repository and by preventing unsigned images from being pulled from the repository.&lt;/p&gt;
&lt;p&gt;The Notary services of the Harbor private registry can furnish project-level content trust to container images to ensure that only trusted images are used as developers create their own layered images, automate the building of a container, or select images for use as the building blocks of an application.&lt;/p&gt;
&lt;h3 id=&#34;image-and-registry-security-in-the-software-pipeline&#34;&gt;Image and Registry Security in the Software Pipeline&lt;/h3&gt;
&lt;p&gt;Harbor works in the context of a development pipeline to manage and secure container images. The following diagram illustrates Harbor&amp;rsquo;s role in a development pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/guides/containers/diagrams/harbor-registry-security.png&#34; alt=&#34;The Harbor container registry manages and secures container images.&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Harbor is an important tool in your software security program, ensuring your cloud native application development meets all of the latest security protocols.&lt;/p&gt;
&lt;h2 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h2&gt;
&lt;p&gt;If you are new to Harbor or haven’t checked in recently, have a look at the &lt;a href=&#34;https://goharbor.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;features of the latest release&lt;/a&gt;. This guide focuses on security, but Harbor also provides support for multi-tenancy, replication across registries, and offers an extensible API and web UI.&lt;/p&gt;
&lt;p&gt;To get started using Harbor, this guide provides a good, real-world introduction: &lt;a href=&#34;/guides/kubernetes/harbor-gs/&#34;&gt;Installing Harbor on Kubernetes with Project Contour, Cert Manager, and Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Best Practices for Securing and Hardening Container Images</title>
      
      <link>/guides/containers/security-best-practices/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/guides/containers/security-best-practices/</guid>
      <description>

        
        &lt;p&gt;When a container is built and/or used, it is important to ensure that the image is built by following best practices in terms of security, efficiency, performance, etc. This article will go over some of the key points Bitnami takes into account when publishing Bitnami containers. It covers image tagging, non-root configuration and arbitrary UIDs, the importance of reducing size and dependencies, and the release process, including CVE scanning and tests.&lt;/p&gt;
&lt;h2 id=&#34;rolling-and-immutable-tags&#34;&gt;Rolling and immutable tags&lt;/h2&gt;
&lt;p&gt;A Docker tag is a label used to uniquely identify a Docker image. It allows users to deploy a specific version of an image. A single image can have multiple tags associated with it.&lt;/p&gt;
&lt;p&gt;Every time Bitnami publishes a new version of an image, the associated tags are also updated to make it easier for users to get the latest version.&lt;/p&gt;
&lt;h3 id=&#34;rolling-tags&#34;&gt;Rolling tags&lt;/h3&gt;
&lt;p&gt;Bitnami uses rolling tags (a tag that may not always point to the same image) for its Docker container images. To understand how this works, let&amp;rsquo;s use the Bitnami etcd container image tags as an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;3, 3-debian-10, 3.4.13, 3.4.13-debian-10-r8, latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;latest&lt;/em&gt; tag always points to the latest revision of the etcd image.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;3&lt;/em&gt; tag is a rolling tag that always points to the latest revision of etcd 3.x.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;3.4.13&lt;/em&gt; tag is a rolling tag that points to the latest revision of etcd 3.4.13. It will be updated with different revisions or daily releases but only for etcd 3.4.13.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;3-debian-10&lt;/em&gt; tag points to the latest revision of etcd 3.x for Debian 10, in case there are other distros supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When Bitnami releases container images - typically to upgrade system packages - it fixes bugs or improves the system configuration and also updates container tags to point to the latest revision of the image. Therefore, the rolling tags shown above are dynamic; they will always point to the latest revision or daily release of the corresponding image.&lt;/p&gt;
&lt;p&gt;Continuing with the example above, the &lt;em&gt;3.4.13&lt;/em&gt; tag might point to the etcd 3.4.13 revision 8 today, but it will refer to the etcd 3.4.13 revision 9 when Bitnami next updates the container image.&lt;/p&gt;
&lt;p&gt;The suffix revision number (&lt;em&gt;rXX&lt;/em&gt;) is incremented every time that Bitnami releases an updated version of the image for the same version of the application. As explained in the next section, suffixed tags are also known as immutable tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any tags that do not explicitly specify a distribution, such as &lt;em&gt;3&lt;/em&gt; or &lt;em&gt;3.4.13&lt;/em&gt;, should be assumed to refer to Debian 10.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;immutable-tags&#34;&gt;Immutable tags&lt;/h3&gt;
&lt;p&gt;A static, or immutable, tag always points to the same image. This is useful when you depend on a specific revision of an image For example, if you use the tag &lt;em&gt;3.4.13-debian-10-r8&lt;/em&gt;, this tag will always refer to etcd &lt;em&gt;3.4.13 revision 8&lt;/em&gt;. The use of this tag ensures that users get the same image every time.&lt;/p&gt;
&lt;h3 id=&#34;usage-recommendations&#34;&gt;Usage recommendations&lt;/h3&gt;
&lt;p&gt;Which tag should you use and when? Follow these guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are using containers in a production environment (such as Kubernetes), use immutable tags. Bitnami uses immutable tags by default in the Bitnami Helm Charts. This ensures that your deployment won&amp;rsquo;t be affected if a new revision inadvertently breaks existing functionality.&lt;/li&gt;
&lt;li&gt;If you are using containers for development, use rolling tags. This ensures that you are always using the latest version. Rolling tags also make it easier to use a specific version of a development tool (such as &lt;em&gt;bitnami/node:12&lt;/em&gt; for Node.js 12).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;root-and-non-root-containers&#34;&gt;Root and non-root containers&lt;/h2&gt;
&lt;p&gt;There are two types of Bitnami container images: root and non-root. Non-root images add an extra layer of security and are generally recommended for production environments. However, because they run as a &lt;em&gt;non-root&lt;/em&gt; user, privileged tasks such as installing system packages, editing configuration files, creating system users and groups, and modifying network information, are typically off-limits.&lt;/p&gt;
&lt;p&gt;This section gives you a quick introduction to non-root container images, explains possible issues you might face using them, and also shows how to modify them to work as root images.&lt;/p&gt;
&lt;h3 id=&#34;non-root-containers&#34;&gt;Non-root containers&lt;/h3&gt;
&lt;p&gt;By default, Docker containers are run as &lt;em&gt;root&lt;/em&gt; users. This means that you can do whatever you want in the container, such as install system packages, edit configuration files, bind privilege ports, adjust permissions, create system users and groups, or access networking information.&lt;/p&gt;
&lt;p&gt;With a non-root container, you can&amp;rsquo;t do any of this. A non-root container must be configured only for its main purpose, for example, run the NGINX server.&lt;/p&gt;
&lt;p&gt;A non-root container is a container in which the user executing the processes is not the &lt;em&gt;root&lt;/em&gt; user but an unprivileged user, like &lt;em&gt;1001&lt;/em&gt;. This is usually modified through the &lt;code&gt;USER&lt;/code&gt; instruction in the Dockerfile.&lt;/p&gt;
&lt;h3 id=&#34;advantages-of-non-root-containers&#34;&gt;Advantages of non-root containers&lt;/h3&gt;
&lt;p&gt;Non-root containers are recommended for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Security: Non-root containers are more secure. If there is a container engine security issue, running the container as an unprivileged user will prevent any malicious code from gaining elevated permissions on the container host. &lt;a href=&#34;https://docs.docker.com/engine/security/security/#other-kernel-security-features&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about Docker&amp;rsquo;s security features&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Platform restrictions: Some Kubernetes distributions (such as &lt;a href=&#34;https://www.openshift.com&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OpenShift&lt;/a&gt;) run containers using random UUIDs. This approach is not compatible with root containers, which must always run with the &lt;em&gt;root&lt;/em&gt; user&amp;rsquo;s UUID. In such cases, root-only container images will simply not run and a non-root image is a must. &lt;a href=&#34;https://cookbook.openshift.org/users-and-role-based-access-control/why-do-my-applications-run-as-a-random-user-id.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Learn more about random UUIDs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disadvantages-of-non-root-containers&#34;&gt;Disadvantages of non-root containers&lt;/h3&gt;
&lt;p&gt;Non-root containers also have some disadvantages when used for local development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write failures on mounted volumes: Docker mounts host volumes preserving the host UUID and GUID. This can lead to permission conflicts with non-root containers, as the user running the container may not have the appropriate privileges to write on the host volume.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write failures on persistent volumes in Kubernetes: Data persistence in Kubernetes is configured using persistent volumes. Kubernetes mounts these volumes with the &lt;em&gt;root&lt;/em&gt; user as the owner; therefore, non-root containers don&amp;rsquo;t have permissions to write to the persistent directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues with specific utilities or services: Some utilities (e.g. Git) or servers (e.g. PostgreSQL) run additional checks to find the user in the &lt;em&gt;/etc/passwd&lt;/em&gt; file. These checks will fail for non-root container images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To learn more about these issues, as well as potential solutions for each, &lt;a href=&#34;https://engineering.bitnami.com/articles/running-non-root-containers-on-openshift.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;refer to our detailed blog post on this topic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bitnami non-root containers fix the above issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For Kubernetes, Bitnami Helm charts use an &lt;em&gt;initContainer&lt;/em&gt; for changing the volume permissions properly. As the image runs as non-root by default, it is necessary to adjust the ownership of the persistent volume so that the container can write data to it.
By default, the charts are configured to use Kubernetes Security Context to automatically change the ownership of the volume. However, this feature does not work in all Kubernetes distributions. As an alternative, the charts support using an &lt;em&gt;initContainer&lt;/em&gt; to change the ownership of the volume before mounting it in the final destination. &lt;a href=&#34;https://github.com/bitnami/charts/blob/9353a76a4ddda6bf1da78328496fb649c951e80d/bitnami/rabbitmq/templates/statefulset.yaml#L58&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;See an example of this in action from the Bitnami RabbitMQ chart&lt;/a&gt; you can see how this &lt;em&gt;initContainer&lt;/em&gt; is used.&lt;/li&gt;
&lt;li&gt;For specific utilities, Bitnami ships the &lt;a href=&#34;https://packages.debian.org/sid/libnss-wrapper&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;em&gt;libnss-wrapper&lt;/em&gt; package&lt;/a&gt;, which defines custom user space files to ensure the software acts correctly. &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-postgresql/blob/master/12/debian-10/rootfs/opt/bitnami/scripts/libpostgresql.sh#L25&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;See an example of this in action from the Bitnami PostgreSQL image&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;use-non-root-containers-as-root-containers&#34;&gt;Use non-root containers as root containers&lt;/h3&gt;
&lt;p&gt;If you wish to run a Bitnami non-root container image as a root container image, you can do it by adding the line &lt;code&gt;user: root&lt;/code&gt; right after the &lt;code&gt;image:&lt;/code&gt; directive in the container&amp;rsquo;s &lt;em&gt;docker-compose.yml&lt;/em&gt; file. After making this change, restart the container and it will run as the &lt;em&gt;root&lt;/em&gt; user with all privileges instead of an unprivileged user.&lt;/p&gt;
&lt;p&gt;In Kubernetes, the user that executes the container can be customized by using &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Security Context&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;use-arbitrary-uuids&#34;&gt;Use arbitrary UUIDs&lt;/h3&gt;
&lt;p&gt;On some platforms like OpenShift, to support running containers with volumes mounted in a secure way, images must run as an arbitrary user ID. When those platforms mount volumes for a container, they configure the volume so it can only be written to by a particular user ID, and then run the image using that same user ID. This ensures the volume is only accessible to the appropriate container, but requires that the image is able to run as an arbitrary user ID.&lt;/p&gt;
&lt;p&gt;That means a non-root container executing on a platform with this policy can&amp;rsquo;t assume anything about the UUID. These platforms change the default container user to an arbitrary UUID, but the GUID is unmodified and containers are executed as &lt;em&gt;XXX:root&lt;/em&gt; (where &lt;em&gt;XXX&lt;/em&gt; is the arbitrary UUID).&lt;/p&gt;
&lt;p&gt;Bitnami images are configured with the proper permissions for the user and group in order to meet the requirements of these platforms. They do this by ensuring that the &lt;em&gt;XXX&lt;/em&gt; user belongs to the &lt;em&gt;root&lt;/em&gt; group and that the directories have the appropriate read, write and execution permissions.&lt;/p&gt;
&lt;h2 id=&#34;execute-one-process-per-container&#34;&gt;Execute one process per container&lt;/h2&gt;
&lt;p&gt;Each container should have only one concern. Decoupling applications into multiple containers makes it easier to scale horizontally and reuse containers. For instance, a web application stack might consist of three separate containers, each with its own unique image, to manage the web application, database, and an in-memory cache in a decoupled manner.&lt;/p&gt;
&lt;p&gt;Although all Bitnami images follow this good practice there are cases where two or more processes need to be executed at the same time in the same image. One such case is that of the &lt;a href=&#34;https://github.com/bitnami/bitnami-docker-postgresql-repmgr&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bitnami PostgreSQL with Replication Manager Docker Image&lt;/a&gt; where, apart from the &lt;em&gt;postgres&lt;/em&gt; process, there is a separate process for the &lt;em&gt;repmgr&lt;/em&gt; daemon. There are also other cases where the application spawns additional processes on its own.&lt;/p&gt;
&lt;p&gt;It is therefore important to take a decision about the number of processes per container keeping in mind the goal of keeping each container as clean and modular as possible.&lt;/p&gt;
&lt;h2 id=&#34;performance-considerations&#34;&gt;Performance considerations&lt;/h2&gt;
&lt;p&gt;As indirectly described in the previous section, it is important to follow the &amp;ldquo;Principle of least privilege&amp;rdquo; (POLP), an important concept in computer security. This refers to the practice of limiting access rights for users to the bare minimum permissions they need to perform their work.&lt;/p&gt;
&lt;p&gt;In the same way, a good security practice is to install and maintain only the minimum necessary dependencies in a container image. It is also important to reduce the size of the images to improve the security, performance, efficiency, and maintainability of the containers.&lt;/p&gt;
&lt;p&gt;Package installation in Bitnami images (also applicable to already-installed packages) is usually done using the &lt;code&gt;install_packages&lt;/code&gt; script. This tool was created to install system packages in a smart way for container environments. Apart from installing packages only with the required dependencies (no recommended packages or documentation), it also removes the cache and unnecessary package repositories.&lt;/p&gt;
&lt;h2 id=&#34;daily-builds-and-release-process&#34;&gt;Daily builds and release process&lt;/h2&gt;
&lt;p&gt;Bitnami automatically re-releases its container catalog every 24 hours. In terms of security, releasing the Bitnami containers on a daily basis ensures that the system packages and components bundled in the image are up-to-date from the package repositories.&lt;/p&gt;
&lt;p&gt;As explained previously, this approach means that a new immutable tag is produced every day, increasing the revision number. At the same time, rolling tags are updated to point to this new immutable tag.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the Bitnami Community Catalog, the release frequency is set to 1 day. However, this can be modified by the customer in the &lt;a href=&#34;https://tanzu.vmware.com/application-catalog&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Application Catalog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apart from daily releases, there are other processes that can trigger a new release. For example, if there is a new version (major, minor, or patch) of the main component, Bitnami&amp;rsquo;s tracking system detects this new upstream release and trigger a new release of the Bitnami image, which uses the &lt;em&gt;-r0&lt;/em&gt; tag suffix.&lt;/p&gt;
&lt;p&gt;Before a new image is released, antivirus scanners and other tests are executed. If these are unsuccessful, the release is blocked. These are discussed in the following sections&lt;/p&gt;
&lt;h3 id=&#34;cve-and-virus-scanning&#34;&gt;CVE and virus scanning&lt;/h3&gt;
&lt;p&gt;If you are running development containers to create a proof of concept or for production workloads, you will probably already be aware of CVEs that may affect the container&amp;rsquo;s operating system and packages. There are various tools/scanners to check containers for CVEs, such as &lt;a href=&#34;https://coreos.com/clair/docs/latest/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Clair&lt;/a&gt;, &lt;a href=&#34;https://github.com/anchore/anchore-engine&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Anchore&lt;/a&gt;, &lt;a href=&#34;http://github.com/theupdateframework/notary&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Notary&lt;/a&gt; and others.&lt;/p&gt;
&lt;p&gt;There are two ways of ensuring the health of containers: using a virus scan or a CVE scan.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The virus scan is executed during the release process. The virus scan performed by Bitnami uses antivirus engines for scanning the files present in the container, stopping the release if a positive is detected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the antivirus scan is a blocking step when releasing a container, the CVE scan is a tool executed periodically to trigger new releases. This tool analyzes the containers bundled by the Bitnami Helm charts. If it finds a CVE, it triggers the release of the affected container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verification-and-functional-testing&#34;&gt;Verification and functional testing&lt;/h3&gt;
&lt;p&gt;During the release process, all containers are tested to work with all deployment technologies with which they are likely to be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Compose, using several Docker Compose files to test different features like LDAP, cluster topologies, etc.&lt;/li&gt;
&lt;li&gt;Helm charts, tested on different Kubernetes platforms such as GKE, AKS, IKS, TKG, etc., and under different scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two types of tests are executed for each deployment method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verification tests: This type of testing involves inspecting a deployment to check certain properties. For example, checking if a particular file exists on the system and if it has the correct permissions.&lt;/li&gt;
&lt;li&gt;Functional tests: This type of testing is used to verify that an application is behaving as expected from the user&amp;rsquo;s perspective. For example, if the application must be accessible using a web browser, functional testing uses a headless browser to interact with the application and perform common actions such as logging in and out and adding users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fips&#34;&gt;FIPS&lt;/h2&gt;
&lt;p&gt;If customers require compliance with &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/140/2/final&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;FIPS 140-2&lt;/a&gt;, Bitnami containers can ship a FIPS-enabled version of OpenSSL. In a FIPS-enabled kernel, OpenSSL (and the applications using it) will only use FIPS-approved encryption algorithms. In the case of applications that have a FIPS mode (such as Elasticsearch), this would be enabled as well.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By implementing the above points in the Bitnami build and release process, Bitnami ensures that its container images are built following best practices in terms of security and performance and can be safely used on most platforms as part of production deployments.&lt;/p&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful links&lt;/h2&gt;
&lt;p&gt;To learn more about the topics discussed in this guide, use the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.bitnami.com/tutorials/understand-rolling-tags-containers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Understand Bitnami&amp;rsquo;s rolling tags for container images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.bitnami.com/tutorials/work-with-non-root-containers&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Work with non-root containers for Bitnami applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.bitnami.com/articles/why-non-root-containers-are-important-for-security.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Why non-root containers are important for security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.bitnami.com/articles/best-practices-writing-a-dockerfile.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Best practices writing a Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.bitnami.com/articles/how-bitnami-continuously-scans-container-images-to-fix-cve-reported-security-issues.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;How Bitnami continuously scans container images to fix CVE-reported security issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.bitnami.com/articles/running-non-root-containers-on-openshift.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Running non-root containers on OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: KubeCon NA 2020: For the Modern App Developer</title>
      
      <link>/blog/kubecon-na-2020-for-the-modern-app-developer/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/kubecon-na-2020-for-the-modern-app-developer/</guid>
      <description>

        
        &lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;KubeCon North America&lt;/a&gt; is coming up soon! It will take place virtually November 17th-20th.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;schedule&lt;/a&gt; is chock-full of very interesting talks,from introductory overviews to advanced deep dives. When I first saw it, I ended up copying down as many talks as possible to share here because they are all just so good. But I figured I should probably curate a bit, so below you will find a list of my top recommendations, broken down, for the most part, by their respective &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-list.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Special Interest Group (SIG)&lt;/a&gt; names.&lt;/p&gt;
&lt;p&gt;Talks with a 🌱 next to them are introductory/deep dive talks, and each SIG section header links to its respective SIG page.&lt;/p&gt;
&lt;h3 id=&#34;keynotes&#34;&gt;Keynotes&lt;/h3&gt;
&lt;p&gt;If you can, definitely watch all of the keynotes. There is a &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;complimentary pass&lt;/a&gt;  just for the keynotes if you’re unable to attend the rest of the conference.&lt;/p&gt;
&lt;h3 id=&#34;sponsored&#34;&gt;Sponsored&lt;/h3&gt;
&lt;p&gt;If you’re interested in seeing what cool things different companies are working on and/or are interested in, check out the sponsored sessions on &lt;a href=&#34;https://kccncna20.sched.com/2020-11-17/overview/?iframe=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Day 1&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;api-machineryhttpsgithubcomkubernetescommunitytreemastersig-api-machinery&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-api-machinery&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;API Machinery&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-2&#34;&gt;Day 2&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekBb/admission-control-we-have-a-problem-ryan-jarvinen-red-hat?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Admission Control, We Have a Problem - Ryan Jarvinen, Red Hat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an interactive session that will teach you how Admission Controllers play a critical role in securing Kubernetes APIs. You will be able to “implement basic input validation and testing of webhooks for the Admission Controller.”&lt;/p&gt;
&lt;h5 id=&#34;day-4&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekGp/into-the-deep-waters-of-api-machinery-federico-bongiovanni-daniel-smith-google-david-eads-stefan-schimanski-red-hat?iframe=yes&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Into the Deep Waters of API Machinery - Federico Bongiovanni &amp;amp; Daniel Smith, Google, &amp;amp; David Eads, Stefan Schimanski, Red Hat&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;architecturehttpsgithubcomkubernetescommunityblobmastersig-architecturereadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-architecture/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-4-1&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekGs/sig-architecture-intro-and-update-john-belamaric-google-derek-carr-red-hat&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;SIG Architecture Intro and Update - John Belamaric, Google &amp;amp; Derek Carr, Red Hat&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;autoscalinghttpsgithubcomkubernetescommunityblobmastersig-autoscalingreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-autoscaling/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Autoscaling&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-2-1&#34;&gt;Day 2&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekGm/introduction-to-autoscaling-guy-templeton-skyscanner-joe-burnett-google?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to Autoscaling - Guy Templeton, Skyscanner &amp;amp; Joe Burnett, Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk covers different types of autoscaling, how they work, and why you should use them. Best practices and gotchas will also be discussed.&lt;/p&gt;
&lt;h3 id=&#34;cluster-lifecyclehttpsgithubcomkubernetescommunityblobmastersig-cluster-lifecyclereadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-cluster-lifecycle/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cluster Lifecycle&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-4-2&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekH4/introduction-to-sig-cluster-lifecycle-lubomir-i-ivanov-vmware-justin-santa-barbara-google?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to SIG Cluster Lifecycle - Lubomir I. Ivanov, VMware &amp;amp; Justin Santa Barbara, Google&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;
&lt;h5 id=&#34;day-3&#34;&gt;Day 3&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekA9/kubernetes-and-logging-do-it-right-eduardo-silva-arm-treasure-data&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes and Logging: Do It Right - Eduardo Silva, Arm Treasure Data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk dives into logging for distributed systems, specifically for Kubernetes environments, best practices, and available open-source tools.&lt;/p&gt;
&lt;h3 id=&#34;networkhttpsgithubcomkubernetescommunityblobmastersig-networkreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-network/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Network&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-2-2&#34;&gt;Day 2&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekGX/contour-a-high-performance-multitenant-ingress-controller-for-kubernetes-michael-michael-steve-sloka-nick-young-james-peach-vmware?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Contour, A High Performance Multitenant Ingress Controller for Kubernetes - Michael Michael, Steve Sloka, Nick Young, &amp;amp; James Peach, VMware&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;day-3-1&#34;&gt;Day 3&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekHt/kubernetes-sig-network-intro-and-deep-dive-tim-hockin-bowei-du-google-rich-renner-sunder-networks?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes SIG-Network: Intro and Deep-Dive - Tim Hockin &amp;amp; Bowei Du, Google &amp;amp; Rich Renner, Sunder Networks&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;registry&#34;&gt;Registry&lt;/h3&gt;
&lt;h5 id=&#34;day-1&#34;&gt;Day 1&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/fGWK/simplify-application-deployment-at-the-edge-with-harbor-michael-michael-harbor?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Simplify Application Deployment at the Edge with Harbor - Michael Michael, Harbor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to operate Kubernetes at the Edge, a container registry is required. This is where Harbor comes in.&lt;/p&gt;
&lt;h5 id=&#34;day-2-3&#34;&gt;Day 2&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekI5/harbor-enterprise-cloud-native-artifact-registry-steven-zou-daniel-jiang-alex-xu-steven-ren-vmware?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Harbor- Enterprise Cloud Native Artifact Registry - Steven Zou, Daniel Jiang, Alex Xu, &amp;amp; Steven Ren, VMware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk goes into detail about Project Harbor, a container registry, and its roadmap.&lt;/p&gt;
&lt;h3 id=&#34;runtimehttpsgithubcomcncfsig-runtime&#34;&gt;&lt;a href=&#34;https://github.com/cncf/sig-runtime&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Runtime&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-1-1&#34;&gt;Day 1&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekGF/introduction-and-deep-dive-into-containerd-michael-crosby-derek-mcgowan-apple-phil-estes-ibm-wei-fu-alibaba?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction and Deep Dive into containerd - Michael Crosby &amp;amp; Derek McGowan, Apple, Phil Estes, IBM, &amp;amp; Wei Fu, Alibaba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will be a combined intro to and deep dive into containerd, a container runtime.&lt;/p&gt;
&lt;h5 id=&#34;day-3-2&#34;&gt;Day 3&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekG6/intro-cncf-sig-runtime-ricardo-aravena-rakuten-renaud-gaubert-nvidia?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Intro: CNCF SIG-Runtime - Ricardo Aravena, Rakuten &amp;amp; Renaud Gaubert , NVIDIA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this talk, there will be an overview of current projects and future technologies that fall into the SIG-Runtime scope.&lt;/p&gt;
&lt;h3 id=&#34;securityhttpsgithubcomkubernetescommunityblobmastersig-securityreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-security/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Security&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-2-4&#34;&gt;Day 2&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekI2/open-policy-agent-intro-patrick-east-styra-max-smythe-google?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Open Policy Agent Intro - Patrick East, Styra &amp;amp; Max Smythe, Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will give an intro to Open Policy Agent (OPA), which provides policy-based control for cloud native environments. To see an instance of how OPA has been used, scroll down to Day 4.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekGI/detecting-security-policies-violation-using-falco-a-practical-introduction-leonardo-grasso-sysdig?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Detecting Security Policies Violation Using Falco: A Practical Introduction - Leonardo Grasso, Sysdig&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will provide an intro to and tutorial of Falco, a runtime security tool designed to detect anomalous activity and security breaches.&lt;/p&gt;
&lt;h5 id=&#34;day-3-3&#34;&gt;Day 3&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekG3/a-special-interest-in-cloud-native-security-emily-fox-national-security-agency-nsa-brandon-lum-ibm?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;A Special Interest in Cloud Native Security - Emily Fox, National Security Agency (NSA) &amp;amp; Brandon Lum, IBM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will be about SIG-Security efforts and projects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes-native Security with Starboard - Liz Rice &amp;amp; Daniel Pacak, Aqua Security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Starboard is an open source project that gathers security information from various different tools into Kubernetes CRDs, so users can manage &amp;amp; access security reports through familiar Kubernetes interfaces, like kubectl or Octant.” This talk will include multiple demos.&lt;/p&gt;
&lt;h5 id=&#34;day-4-3&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekEP/using-open-policy-agent-to-meet-evolving-policy-requirements-jeremy-rickard-vmware&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Using Open Policy Agent to Meet Evolving Policy Requirements - Jeremy Rickard, VMware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will cover concrete examples of how VMware has used Open Policy Agent (OPA) to implement evolving Kubernetes policy requirements and more.&lt;/p&gt;
&lt;h3 id=&#34;storagehttpsgithubcomkubernetescommunityblobmastersig-storagereadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-storage/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Storage&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-4-4&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;🌱 &lt;a href=&#34;https://kccncna20.sched.com/event/ekHD/intro-deep-dive-kubernetes-sig-storage-xing-yang-vmware-michelle-au-google?iframe=yes&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Intro &amp;amp; Deep Dive: Kubernetes SIG-Storage - Xing Yang, VMware &amp;amp; Michelle Au, Google&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;usabilityhttpsgithubcomkubernetescommunityblobmastersig-usabilityreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-usability/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Usability&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-3-4&#34;&gt;Day 3&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekHY/kubernetes-putting-the-focus-on-upstream-usability-with-sig-usability-tasha-drew-vmware-gabby-moreno-cesar-ibm?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes: Putting the Focus on Upstream Usability with SIG Usability - Tasha Drew, VMware &amp;amp; Gabby Moreno Cesar, IBM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will focus on Kubernetes end users and how Kubernetes can help.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ek9o/five-hundred-twenty-five-thousand-six-hundred-k8s-clis-phillip-wittrock-gabbi-fisher-apple&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Five Hundred Twenty-five Thousand Six Hundred K8s CLI’s - Phillip Wittrock &amp;amp; Gabbi Fisher, Apple&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk will go into a number of very useful Kubernetes-related CLIs.&lt;/p&gt;
&lt;h3 id=&#34;windowshttpsgithubcomkubernetescommunityblobmastersig-windowsreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-windows/README.md&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&#34;day-4-5&#34;&gt;Day 4&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://kccncna20.sched.com/event/ekFu/simplifying-windows-runtime-and-deployment-in-kubernetes-michael-michael-vmware-mark-rossetti-muzz-imam-microsoft-deep-debroy-docker?iframe=yes&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Simplifying Windows Runtime and Deployment in Kubernetes - Michael Michael, VMware, Mark Rossetti &amp;amp; Muzz Imam, Microsoft, &amp;amp; Deep Debroy, Docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When talking about containers, people often think about Linux. This talk will instead dive into Windows and Kubernetes.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Highlights of the SpringOne 2020 Self-Paced Workshops---and Their New Home</title>
      
      <link>/blog/highlights-of-the-springone-2020-self-paced-workshops-and-their-new-home/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/highlights-of-the-springone-2020-self-paced-workshops-and-their-new-home/</guid>
      <description>

        
        &lt;p&gt;SpringOne 2020 just wrapped, and the self-paced workshops were a complete success! Moreover, all of your requests to continue providing these workshops beyond the conference have been heard. Their future home will be the &lt;a href=&#34;https://tanzu.vmware.com/developer/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Developer Center&lt;/a&gt;. &lt;em&gt;UPDATE: These workshops are available to &lt;a href=&#34;/workshops&#34;&gt;try out now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/workshops-and-training.png&#34; alt=&#34;SpringOne 2020 Workshops and Training&#34;  title=&#34;SpringOne2020&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For those that missed SpringOne 2020, we’ll quickly recap what the workshops focused on and what they accomplished. Feel free to jump around if you need to; the recap is meant to be a quick read with plenty of pictures.&lt;/p&gt;
&lt;p&gt;A total of 10 self-paced workshops covering a range of open source technology—from CI/CD with Tekton, several Spring technologies, and infrastructure technology like Kubernetes, Octant, and Carvel—were available at SpringOne 2020:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes Fundamentals&lt;/li&gt;
&lt;li&gt;Container Basics&lt;/li&gt;
&lt;li&gt;Getting Started with Octant&lt;/li&gt;
&lt;li&gt;Getting Started with Spring Boot on Kubernetes&lt;/li&gt;
&lt;li&gt;Spring Boot Probes on Kubernetes&lt;/li&gt;
&lt;li&gt;Spring Boot Skaffold on Kubernetes&lt;/li&gt;
&lt;li&gt;Spring Microservices&lt;/li&gt;
&lt;li&gt;Getting Started with Spring Cloud Gateway&lt;/li&gt;
&lt;li&gt;Getting Started with Carvel (formerly k14s)&lt;/li&gt;
&lt;li&gt;Tekton Fundamentals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these workshops has an environment prepared and ready, which is quite refreshing when you are accustomed to spending 15-30 minutes setting up to follow a tutorial. The workshop environment is also native to the technology being used. For example, you can interact with actual Kubernetes clusters in a Kubernetes workshop or work in a real Java 11 environment in Spring workshops. Finally, all the tools you need are built into the workshop, such as an IDE or Kubernetes tools like Octant to name a few.&lt;/p&gt;
&lt;p&gt;In this screenshot from Getting Started with Spring Boot on Kubernetes, you can see the code editor utilized in it and some of the other workshops.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/code-editor.png&#34; alt=&#34;SpringOne2020 code editor example&#34;  title=&#34;SpringOne2020 code editor example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In Getting Started with Octant, you use the open-source Kubernetes tool Octant to inspect your Kubernetes cluster. Many developers use &lt;a href=&#34;https://octant.dev/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Octant&lt;/a&gt; to reveal the objects running in their Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/octant-redact.png&#34; alt=&#34;SpringOne2020 Octant example&#34;  title=&#34;SpringOne2020 octant example&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-fundamentals&#34;&gt;Kubernetes Fundamentals&lt;/h2&gt;
&lt;p&gt;We designed the workshops so you can mouse-click to automate manual steps that are prone to error. For example, you can click to execute terminal commands, create files, precisely insert lines of code, and more. We also designed them to eliminate errors, like small typos that can interrupt your learning progress. Our goal was to enable you to focus on learning theory and any related concepts rather than on procedural steps you can review later, like commands and code blocks.&lt;/p&gt;
&lt;p&gt;The screenshot below from the Kubernetes Fundamentals workshop provides an example of the click automation capability we provided. In the instructions on the left, you click the command &lt;code&gt;kubectl apply -f database/&lt;/code&gt; which is then executed in the appropriate terminal on the right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/creating-resc-underline.png&#34; alt=&#34;SpringOne2020 click automation example&#34;  title=&#34;SpringOne2020 click automation example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Kubernetes Fundamentals workshop, a hands-on introduction to using Kubernetes, was by far the most popular workshop at SpringOne 2020. It not only provides you with a real Kubernetes cluster to interact with, but access to the Kubernetes Dashboard!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/kubernetes-dashboard.png&#34; alt=&#34;SpringOne2020 Kubernetes dashboard example&#34;  title=&#34;SpringOne2020 Kubernetes dashboard example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By the second step, you are already deploying a blog application to your Kubernetes cluster!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/kubernetes-blog.png&#34; alt=&#34;SpringOne2020 Kubernetes blog example&#34;  title=&#34;SpringOne2020 Kubernetes blog example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes Fundamentals covers many other concepts, such as service networking and exposing those services, as well as linking a database, persistent volumes, and even application health. You’ll even learn best practices for deployments with ReplicaSets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/replica-redact.png&#34; alt=&#34;SpringOne2020 Kubernetes ReplicaSet example&#34;  title=&#34;SpringOne2020 Kubernetes ReplicaSet example&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;container-basics&#34;&gt;Container Basics&lt;/h2&gt;
&lt;p&gt;The Container Basics workshop, while introductory, goes into details that are typically omitted from container tutorials, like how to inspect layers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/inspect-layers.png&#34; alt=&#34;SpringOne2020 container inspect layers example&#34;  title=&#34;SpringOne2020 container inspect layers example&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;getting-started-with-spring-boot-on-kubernetes&#34;&gt;Getting Started with Spring Boot on Kubernetes&lt;/h2&gt;
&lt;p&gt;It wouldn’t be a Spring conference without at least a few Spring workshops. Of those we offered at Spring 2020, Getting Started with Spring Boot on Kubernetes was the most heavily attended. It shows you how to build a Spring Boot application with no fuss&amp;ndash;—and no YAML—&amp;ndash;in a handful of steps. Leave it to Spring to make Kubernetes easy!&lt;/p&gt;
&lt;p&gt;You might recognize the terminal art in the following screenshot; it is of a Spring application being built.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/spring-jar-redact.png&#34; alt=&#34;SpringOne2020 Spring Boot Kubernetes build&#34;  title=&#34;SpringOne2020 Spring Boot Kubernetes build&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once the Spring Boot application is built, you deploy it to Kubernetes from your very own image registry!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/deploy-2-k8s.png&#34; alt=&#34;SpringOne2020 Spring Boot Kubernetes deploy&#34;  title=&#34;SpringOne2020 Spring Boot Kubernetes deploy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There were so many amazing workshops from SpringOne. New and hot technologies like &lt;a href=&#34;https://k14s.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Carvel&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/tekton&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tekton&lt;/a&gt; stood out as they are gaining traction in the industry.&lt;/p&gt;
&lt;p&gt;All of the Spring Boot Kubernetes workshops where surprisingly painless and quick to run through. After Getting Started with Spring Boot on Kubernetes, Spring Boot Skaffold on Kubernetes is my favorite. With &lt;a href=&#34;https://skaffold.dev/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Skaffold&lt;/a&gt; Kubernetes development becomes dynamic, eliminating tedious commands and overall speeding up your work.&lt;/p&gt;
&lt;p&gt;For those brand new to Spring or &lt;a href=&#34;https://spring.io/microservices&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Microservices&lt;/a&gt;, the Spring Microservices workshop is a good introduction that could be completed in 10 minutes or less due to the magic of the Spring Framework.&lt;/p&gt;
&lt;p&gt;Using very similar code to the Spring Microservices workshop in Getting Started with Spring Cloud Gateway you build your own &lt;a href=&#34;https://spring.io/projects/spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;API Gateway&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a full rundown of the self-paced workshops featured at SpringOne 2020:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/workshops-1.png&#34; alt=&#34;SpringOne2020 workshops list 1&#34;  title=&#34;SpringOne2020 workshops list&#34; /&gt;
&lt;img src=&#34;/images/blogs/springone2020-workshops/workshops-2.png&#34; alt=&#34;SpringOne2020 workshops list 2&#34;  title=&#34;SpringOne2020 workshops list&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;self-paced-workshops-are-coming-to-tanzu-developer-center&#34;&gt;Self-Paced Workshops Are Coming to Tanzu Developer Center!&lt;/h2&gt;
&lt;p&gt;Now that SpringOne 2020 has come and gone, the SpringOne self-paced workshops are being moved to their new home at &lt;a href=&#34;https://tanzu.vmware.com/developer/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Developer Center&lt;/a&gt;! It is a perfect fit. As its name implies, &lt;a href=&#34;https://tanzu.vmware.com/developer/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Developer Center&lt;/a&gt; is developer-focused (no marketing jargon allowed); its sole purpose is to train developers and enable them on their journey forward. The &lt;a href=&#34;https://tanzu.vmware.com/developer/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tanzu Developer Center&lt;/a&gt; already has blogs, videos, an integrated community, and a learning portal, and features weekly live streams and recordings via &lt;a href=&#34;/tv/&#34;&gt;Tanzu.TV&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only are you getting the workshops from SpringOne 2020, but more workshops are being made as we speak!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/springone2020-workshops/overview.png&#34; alt=&#34;SpringOne2020 workshops end&#34;  title=&#34;SpringOne2020 workshops end&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To be notified as soon as the workshops are made available, &lt;a href=&#34;/community/&#34;&gt;subscribe to Tanzu Developer Newsletter.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UPDATE: These workshops are available to &lt;a href=&#34;/workshops&#34;&gt;try out now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Building Docker Containers</title>
      
      <link>/videos/python-build-containers-for-python-apps-the-easy-way-with-buildpacks/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-build-containers-for-python-apps-the-easy-way-with-buildpacks/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Videos: Python Like A Pro: Run In Production</title>
      
      <link>/videos/python-deploy-python-to-production-in-seconds/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/python-deploy-python-to-production-in-seconds/</guid>
      <description>

        
        
      </description>
    </item>
    
    <item>
      
      <title>Blog: What’s New in .NET Core for Containers and Microservices</title>
      
      <link>/blog/whats-new-in-.net-core-for-containers-and-microservices/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/whats-new-in-.net-core-for-containers-and-microservices/</guid>
      <description>

        
        &lt;p&gt;Throughout most of my career as a developer, I have written code using .NET (mostly C#). But lately, I have been spending more time with Spring, and I keep hearing comments about exciting changes in .NET around containers. I decided it was time to go back and check out what I had missed. This article highlights some of these changes, emphasizing the ones most relevant to containers and microservices; after all, I am part of the &lt;a href=&#34;https://tanzu.vmware.com/tanzu&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;VMware Tanzu Portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft released .NET Core 3.0 on Sept. 23, 2019, and a couple of months later, on Dec. 3, 2019, version 3.1 followed. Version 3.0 had already reached its end of life, while version 3.1, with its LTS designation, will have support until Dec. 3, 2022 (more details &lt;a href=&#34;https://dotnet.microsoft.com/platform/support/policy/dotnet-core&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 contains a tiny number of changes compared to version 3.0. These are mainly related to Blazor and Windows Desktop, in addition to the LTS designation. The bulk of significant changes were in version 3.0. I have selected a subset of items that I believe have a more significant impact on my day-to-day role at VMware Tanzu Labs. For the complete list of changes, go &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;from-container-friendly-to-container-aware&#34;&gt;From Container-Friendly to Container-Aware&lt;/h2&gt;
&lt;p&gt;Before version 3, running .NET Core in a container was not for the faint of heart. CoreCLR was inefficient when allocating GC heaps and quickly ran into Out-of-Memory situations. The new version of .NET Core has made significant progress to make it a correct container runtime by adding support for memory and CPU limits.&lt;/p&gt;
&lt;p&gt;Microsoft is actively producing images for multiple platforms (x64, ARM32, ARM64) and operating systems (macOS, Alpine, CentOS, Debian, Fedora, Ubuntu, Windows).&lt;/p&gt;
&lt;p&gt;The example below creates an Alpine-based Docker image for an ASP.NET Core 3.1 application that runs in a container limited to 10MB of memory.&lt;/p&gt;
&lt;h4 id=&#34;dockerfilealpine-x64-slim&#34;&gt;Dockerfile.alpine-x64-slim&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# https://hub.docker.com/_/microsoft-dotnet-core
FROM mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build
WORKDIR /source

# copy csproj and restore as distinct layers
COPY *.sln .
COPY aspnetapp/*.csproj ./aspnetapp/
RUN dotnet restore -r linux-musl-x64

# copy everything else and build app
COPY aspnetapp/. ./aspnetapp/
WORKDIR /source/aspnetapp
RUN dotnet publish -c release -o /app -r linux-musl-x64 --self-contained true --no-restore /p:PublishTrimmed=true /p:PublishReadyToRun=true

# final stage/image
FROM mcr.microsoft.com/dotnet/core/runtime-deps:3.1-alpine
WORKDIR /app
COPY --from=build /app ./

ENTRYPOINT [&amp;quot;./aspnetapp&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;build-the-aspnet-core-app-docker-image&#34;&gt;Build the ASP.NET Core App Docker image&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker build --pull -t aspnetapp:alpine-slim -f Dockerfile.alpine-x64-slim .&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;run-the-aspnet-core-app-docker-container-limiting-memory&#34;&gt;Run the ASP.NET Core App Docker container limiting memory&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker run --rm -d -p 8080:80 -m=10mb --name my-aspnet-app aspnetapp:alpine-slim&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-images-size-improvements&#34;&gt;Docker Images Size Improvements&lt;/h2&gt;
&lt;p&gt;.NET Core 3.0 brings smaller runtime Docker images. For example, the ASP.NET Core runtime Docker image for the Alpine distribution is a little over 100MB. There are also additional size improvement examples from the Linux amd64 images on &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-core-aspnet/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Hub&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Alpine
3.1.6-alpine3.12 = 105MB (34% smaller)
2.1.20-alpine3.12 = 160MB

Debian
3.1.6-buster-slim = 207MB (18% smaller)
2.1.20-stretch-slim = 253MB

Ubuntu
3.1.6-focal = 221MB (20% smaller)
2.1.20-focal = 276MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to smaller runtime images, the SDK includes a tool that analyzes an application and creates self-contained distributions that include only the required runtime libraries, reducing the image size even further (more details &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/deploying/trim-self-contained&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;faster-start-up-time-by-default&#34;&gt;Faster Start-up Time by Default&lt;/h2&gt;
&lt;p&gt;.NET Core 2.x had tiered compilation disabled by default. Version 3.0 enables it by default. With tiered compilation, one can opt to have the first tier compilation load precompiled code from assemblies created using the &lt;code&gt;ReadytoRun&lt;/code&gt; format (more details &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#readytorun-images&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;) ahead of time instead of just-in-time.&lt;/p&gt;
&lt;p&gt;To compile a project using the &lt;code&gt;ReadyToRun&lt;/code&gt; format, add the &lt;code&gt;&amp;lt;PublishReadyToRun&amp;gt;&lt;/code&gt; setting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup&amp;gt;
  &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then publish as a self-contained app. The example below targets the Linux ARM64 runtime.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -c Release -r linux-arm64 --self-contained
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;grpc-support&#34;&gt;gRPC Support&lt;/h2&gt;
&lt;p&gt;ASP.NET Core 3.0 adds support for building gRPC services that are well suited for microservices scenarios requiring low latency and high throughput. In addition, the Protobuf lightweight message payloads are ideal for limited bandwidth channels like 2G and 3G mobile networks.&lt;/p&gt;
&lt;p&gt;Proto files included in .NET applications automatically generate .NET types for gRPC services, client, and messages.&lt;/p&gt;
&lt;h4 id=&#34;proto-file-greeterproto&#34;&gt;Proto file (Greeter.proto)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

service Greeter {
  rpc SayHello (HelloRequest) returns (HelloReply);
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.NET types generated from proto files can be used as base classes and can be connected to other .NET Core features like Dependency Injection, Logging, Authentication, etc.&lt;/p&gt;
&lt;h4 id=&#34;greeterservicecs&#34;&gt;GreeterService.cs&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;public class GreeterService : Greeter.GreeterBase
{
	private readonly ILogger&amp;lt;GreeterService&amp;gt; _logger;

	public GreeterService(ILogger&amp;lt;GreeterService&amp;gt; logger)
	{
    	_logger = logger;
	}

	public override Task&amp;lt;HelloReply&amp;gt; SayHello(HelloRequest request,
    	ServerCallContext context)
	{
    	_logger.LogInformation(&amp;quot;Saying hello to {Name}&amp;quot;, request.Name);
    	return Task.FromResult(new HelloReply
    	{
        	Message = &amp;quot;Hello &amp;quot; + request.Name
    	});
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gRPC services can be hosted on ASP.NET Core applications.&lt;/p&gt;
&lt;h4 id=&#34;startupcs&#34;&gt;Startup.cs&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;app.UseEndpoints(endpoints =&amp;gt;
{
	endpoints.MapGrpcService&amp;lt;GreeterService&amp;gt;();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mode details can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;browser-samesite&#34;&gt;Browser SameSite&lt;/h2&gt;
&lt;p&gt;Changes in the SameSite implementation (an HTTP cookies standard extension) by Chrome and Firefox are breaking authentication mechanisms in sites that use OpenID and other protocols that must opt out by sending the HTTP header &lt;code&gt;SameSite=none&lt;/code&gt;. ASP.NET Core 3.1 updated the default cookie-emitting behaviors to match the changes in the latest versions of popular browsers (more details &lt;a href=&#34;https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;other-changes-worth-calling-out&#34;&gt;Other Changes Worth Calling Out&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C# 8 includes new features, like async streams, nullable reference types, static local functions, using declarations, additional pattern matchings, interfaces default implementations&lt;/li&gt;
&lt;li&gt;Diagnostic improvements (details &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Distributed tracing (details &lt;a href=&#34;https://devblogs.microsoft.com/aspnet/improvements-in-net-core-3-0-for-troubleshooting-and-monitoring-distributed-apps/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Faster JSON serialization based on &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; (details &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&#34;&gt;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-0/&#34;&gt;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-1-hard-limit-for-the-gc-heap/&#34;&gt;https://devblogs.microsoft.com/dotnet/running-with-server-gc-in-a-small-container-scenario-part-1-hard-limit-for-the-gc-heap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/aspnet/grpc-vs-http-apis/&#34;&gt;https://devblogs.microsoft.com/aspnet/grpc-vs-http-apis/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.1&amp;amp;tabs=visual-studio&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.1&amp;amp;tabs=visual-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&#34;&gt;https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/&#34;&gt;https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/README.md&#34;&gt;https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/richlander/dotnet-docker-limits&#34;&gt;https://github.com/richlander/dotnet-docker-limits&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      
      <title>Guides: Python Like A Pro: Building Docker Containers</title>
      
      <link>/guides/python/cnb-gs-python/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/guides/python/cnb-gs-python/</guid>
      <description>

        
        &lt;p&gt;Packaging your application code into Docker containers is a tricky business. Python code is no exception. There are a &lt;em&gt;ton&lt;/em&gt; of best practices that you need to know about if you&amp;rsquo;re going to build a container that is safe, secure, and maintainable over the long term. &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks&lt;/a&gt; codify these best practices, and they&amp;rsquo;re open-source, so they&amp;rsquo;re a great way to turn your application code into runnable containers.&lt;/p&gt;
&lt;p&gt;And because buildpacks completely remove the need for a &lt;code&gt;Dockerfile&lt;/code&gt;, they dramatically simplify the maintenance of your container images &amp;mdash; particularly useful if you have multiple images to maintain. They&amp;rsquo;re no &amp;lsquo;flash-in-the-pan&amp;rsquo; either. Developed by Heroku in 2011, and also used in Cloud Foundry, buildpacks have built and run millions of production workloads!&lt;/p&gt;
&lt;p&gt;For Python developers, there are currently two implementations of the Buildpack standard which provide Python compatible buildpacks. One is from Google and the other is from Heroku. In this guide, you&amp;rsquo;ll learn how to use Heroku&amp;rsquo;s Python buildpack to create a container image for a sample Python application.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before You Begin&lt;/h2&gt;
&lt;p&gt;There are a few things you need to do before getting started with Python Buildpacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://hub.docker.com/search?type=edition&amp;amp;offering=community&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker Desktop&lt;/a&gt;. The &lt;code&gt;pack&lt;/code&gt; CLI requires the Docker daemon, so you&amp;rsquo;ll need to have that installed and running locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://kube.academy/courses/containers-101&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Containers 101&lt;/a&gt; on KubeAcademy, particularly if you&amp;rsquo;ve never worked with containers or Docker before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the documentation for &lt;a href=&#34;https://buildpacks.io/docs/install-pack/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;installing &lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; in your local environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Optional] If you are completely new to buildpacks, you might prefer to first read up on &lt;a href=&#34;/guides/containers/cnb-what-is&#34;&gt;what are buildpacks?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-buildpacks-with-python&#34;&gt;Using Buildpacks With Python&lt;/h2&gt;
&lt;p&gt;Buildpacks work the same way no matter what language the code is written in. In this guide you&amp;rsquo;ll use a simple Python application, but remember that the process works in the same way for Node.JS, Java, Go, PHP, and more.&lt;/p&gt;
&lt;p&gt;Follow the steps below to quickly create a container image for a Python application using the Heroku Python Buildpack.&lt;/p&gt;
&lt;h3 id=&#34;get-the-sample-python-application&#34;&gt;Get The Sample Python Application&lt;/h3&gt;
&lt;p&gt;Download the sample Python application from Github and make the sample application&amp;rsquo;s folder your current working directory as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; git clone https://github.com/benwilcock/buildpacks-python-demo.git
&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; buildpacks-python-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the folder you will notice three text files, &lt;code&gt;web.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, and &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The file &lt;code&gt;web.py&lt;/code&gt; contains a hello-world web application written in &lt;code&gt;Python3&lt;/code&gt; using the &lt;code&gt;Flask&lt;/code&gt; and &lt;code&gt;MarkupSafe&lt;/code&gt; libraries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;markupsafe&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/hello/&amp;lt;username&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# say hello to that user&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The file &lt;code&gt;requirements.txt&lt;/code&gt; clarifies which libraries your application is dependent on, and their versions. Pip can generate the contents of this file for you using the command &lt;code&gt;pip freeze&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;click==7.1.2
Flask==1.1.2
itsdangerous==1.1.0
Jinja2==2.11.2
MarkupSafe==1.1.1
Werkzeug==1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Procfile&lt;/code&gt; specifies the command-line used to execute the application at runtime. In this case the Procfile declares that the &lt;code&gt;web.py&lt;/code&gt; file contains your &lt;code&gt;FLASK_APP&lt;/code&gt;, calls &lt;code&gt;flask run&lt;/code&gt;, and binds the web-server to the &lt;code&gt;--host&lt;/code&gt; with the IP address &lt;code&gt;0.0.0.0&lt;/code&gt;. It is expected that the &lt;code&gt;--port&lt;/code&gt; to bind the application to will be set as an environment variable using the name &lt;code&gt;$PORT&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;web: FLASK_APP=web.py python3 -m flask run --host=0.0.0.0 --port=$PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-the-list-of-suggested-builders&#34;&gt;Get The List Of Suggested Builders&lt;/h3&gt;
&lt;p&gt;There are many implementations of the &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks&lt;/a&gt; standard. These implementations are called &amp;lsquo;builders&amp;rsquo;. To discover the very latest list of suggested builders, use the &lt;code&gt;pack suggest-builders&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack suggest-builders

Suggested builders:
	Google:                gcr.io/buildpacks/builder:v1                 Ubuntu &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; .NET, Go, Java, Node.js, and Python
	Heroku:                heroku/buildpacks:18                         heroku-18 base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Ruby, Java, Node.js, Python, Golang, &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; PHP
	Paketo Buildpacks:     gcr.io/paketo-buildpacks/builder:full-cf     cflinuxfs3 base image with buildpacks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX
        ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, both &lt;a href=&#34;https://github.com/heroku/heroku-buildpack-python&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Heroku&lt;/a&gt; and &lt;a href=&#34;https://github.com/GoogleCloudPlatform/buildpacks&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Google Cloud Platform&lt;/a&gt; offer open-source Python compatible builders. For this exercise, you&amp;rsquo;ll use the Heroku builder, but you could just as easily use Google&amp;rsquo;s.&lt;/p&gt;
&lt;h3 id=&#34;set-heroku-as-your-default-builder&#34;&gt;Set Heroku As Your Default Builder&lt;/h3&gt;
&lt;p&gt;Copy the name of the builder that you want to set as your default from the list above &amp;mdash; in this case it&amp;rsquo;s &lt;code&gt;heroku/buildpacks:18&lt;/code&gt; &amp;mdash; and use the &lt;code&gt;pack set-default-builder&lt;/code&gt; command to set this buildpack as the default as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack set-default-builder heroku/buildpacks:18
Builder heroku/buildpacks:18 is now the default builder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-pack-to-create-your-container-image&#34;&gt;Use &lt;code&gt;pack&lt;/code&gt; To Create Your Container Image&lt;/h3&gt;
&lt;p&gt;To run the builder and create your Python application container image, use the command &lt;code&gt;pack build&lt;/code&gt;. Be sure to also specify an image name for the container in the format &amp;ldquo;&amp;lt;repository&amp;gt;/&amp;lt;container-name&amp;gt;:&amp;lt;tag&amp;gt;&amp;rdquo; as shown in the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; pack build benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process of building the image will now begin. The first time you do this, you will notice that docker is downloading a series of container image &amp;lsquo;layers.&amp;rsquo; This is because buildpacks are also containers, so they must first be pulled by Docker before the buildpack can be run locally. Once these images are in your cache, the process is much quicker. The output looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;18: Pulling from heroku/buildpacks
4e20becbd46f: Pull &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
3c742a4a0f38: Already exists
ab0f59294661: Downloading &lt;span class=&#34;o&#34;&gt;[=============================&lt;/span&gt;&amp;gt;                     &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  16.05MB/26.96MB
Digest: sha256:296e4f3394e3147a61bd8b08d3c46c0dfa2bf2d4266ed598241cf2419dc96fa3
Status: Image is up to date &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; heroku/buildpacks:18
18: Pulling from heroku/pack
Digest: sha256:219a7621db58790ace66a87d33a200cd89aeda03192994e11a05967fbf8892f6
Status: Image is up to date &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; heroku/pack:18
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; DETECTING
heroku/python   0.2
heroku/procfile 0.5
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; ANALYZING
Restoring metadata &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;heroku/python:shim&amp;#34;&lt;/span&gt; from &lt;span class=&#34;nv&#34;&gt;cache&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; RESTORING
Restoring data &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;heroku/python:shim&amp;#34;&lt;/span&gt; from &lt;span class=&#34;nv&#34;&gt;cache&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; BUILDING
-----&amp;gt; No change in requirements detected, installing from cache
-----&amp;gt; Installing SQLite3
-----&amp;gt; Installing requirements with pip
-----&amp;gt; Discovering process types
       Procfile declares types     -&amp;gt; &lt;span class=&#34;nv&#34;&gt;web&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; EXPORTING
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;launcher&amp;#39;&lt;/span&gt;
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;heroku/python:profile&amp;#39;&lt;/span&gt;
Adding 1/1 app layer&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Reusing layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;
*** Images &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;a904788f7748&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
      index.docker.io/benwilcock/python-sample:1.0.0
Adding cache layer &lt;span class=&#34;s1&#34;&gt;&amp;#39;heroku/python:shim&amp;#39;&lt;/span&gt;
Successfully built image benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you see the words &amp;ldquo;Successfully built image&amp;rdquo; the process is complete. Your new container image will now be available in your local Docker image repository. You can list the images in your local repository with the command &lt;code&gt;docker images&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker images
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
benwilcock/python-sample    1.0.0               59843a212207        &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; years ago        651MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Already we&amp;rsquo;re benefiting from buildpack engineering! Notice that the &lt;code&gt;CREATED&lt;/code&gt; date says &amp;ldquo;40 years ago&amp;rdquo;. This is a best practice whereby the timestamps of layers are &amp;lsquo;zeroed&amp;rsquo; to make container builds more reproducible, cache-able, and to avoid unnecessary image downloads. You can read more &lt;a href=&#34;https://buildpacks.io/docs/reference/reproducibility/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;test-the-container-image&#34;&gt;Test The Container Image&lt;/h3&gt;
&lt;p&gt;Testing the container is no more difficult than running the image with the &lt;code&gt;docker run&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker run -d -ePORT&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; -p8080:8080 --name python-sample benwilcock/python-sample:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the container image of your application is running in the background, simply query the &lt;code&gt;http://localhost:8080&lt;/code&gt; endpoint, either using a command-line tool like &lt;a href=&#34;https://httpie.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Httpie&lt;/a&gt; as shown below, or a regular web browser.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; http localhost:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your application will respond with the legend &amp;ldquo;Hello, World!&amp;rdquo; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Content-Length: 13
Content-Type: text/html; charset=utf-8
Date: Tue, 21 Jul 2020 10:27:47 GMT
Server: Werkzeug/1.0.1 Python/3.6.11

Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you&amp;rsquo;re done! You built your sample Python application into an OCI compliant Docker container image without resorting to a &lt;code&gt;Dockerfile&lt;/code&gt;. Heroku will take care of most of the underlying maintenance tasks on the operating system and the Python interpreter. All you need to do is re-run &lt;code&gt;pack build&lt;/code&gt; and you&amp;rsquo;ll get a fresh image. If nothing changed, neither will your image.&lt;/p&gt;
&lt;h3 id=&#34;tidy-up&#34;&gt;Tidy Up&lt;/h3&gt;
&lt;p&gt;You can stop and remove the container from Docker as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; docker stop python-sample
&amp;gt; docker rm python-sample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;keep-learning&#34;&gt;Keep Learning&lt;/h3&gt;
&lt;p&gt;Learn more about buildpacks right here on the Tanzu Developer Center with these great guides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-what-is&#34;&gt;Buildpacks: What Are They?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-gs-pack&#34;&gt;Getting Started With The &lt;code&gt;pack&lt;/code&gt; CLI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/guides/containers/cnb-gs-kpack&#34;&gt;Getting Started With Automated Builds Using &lt;code&gt;kpack&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find out more about what the &lt;code&gt;pack&lt;/code&gt; tool can do by using the &lt;code&gt;--help&lt;/code&gt; command and browsing the &lt;a href=&#34;https://buildpacks.io&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Buildpacks.io&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;If you liked this guide, you might find these others in our &amp;lsquo;Python Like A Pro&amp;rsquo; series useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-like-a-pro&#34;&gt;Install Python Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-managing-python-packages&#34;&gt;Managing Python Project Dependencies Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/gs-python-installing-global-packages&#34;&gt;Managing Python Global Packages Like A Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/guides/python/cf-gs&#34;&gt;Run Python In Production Like A Pro!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you&amp;rsquo;d prefer to see the buildpack in action without actually following the steps above, check out the accompanying YouTube video guide:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/JS_YIn49xuw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;

      </description>
    </item>
    
    <item>
      
      <title>Blog: Save Your Stack: Build Cloud Native Apps with Spring, Kubernetes and Cassandra</title>
      
      <link>/blog/save-your-stack-build-cloud-native-apps-with-spring-kubernetes-and-cassandra/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/save-your-stack-build-cloud-native-apps-with-spring-kubernetes-and-cassandra/</guid>
      <description>

        
        &lt;p&gt;You can start to build modern, cloud native apps today using the latest innovations from Spring, Cassandra and Kubernetes. This blog will show you code samples and a fully working demo to get you up to speed in minutes with these open-source technologies.&lt;/p&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s no shortage of buzzwords, such as &amp;ldquo;digital transformation&amp;rdquo;, &amp;ldquo;cloud native&amp;rdquo; and &amp;ldquo;serverless,&amp;rdquo; being thrown around the internet. Peeling back a layer of the buzzword onion, we do see significant changes in the technology world that have inspired these terms. First, most companies are becoming technology companies as having a presence in the digital space grows as a requirement for survival. Second, the mad dash to the cloud is showing no signs of slowing down. Third, time to market for new applications matters more than ever.&lt;/p&gt;
&lt;p&gt;So, how has this affected technology practitioners? Well, the developer population is multiplying rapidly and the pressures for faster delivery of these new digital experiences are getting more extreme by the day. It&amp;rsquo;s now a fundamental expectation that applications will be there whenever, wherever and however users want to engage. The cloud movement is creating complex architectures that span on-premises and cloud environments, not to mention the pure amount of data coming through these services is exploding. Sounds fun!&lt;/p&gt;
&lt;p&gt;Open-source technology to the rescue. These factors have given rise to technologies such as Spring Boot to boost developer productivity, Apache Cassandra to deal with the volumes of distributed data and Kubernetes to manage containerized workloads across environments.&lt;/p&gt;
&lt;h2 id=&#34;stack-overview&#34;&gt;Stack Overview&lt;/h2&gt;
&lt;h3 id=&#34;spring&#34;&gt;Spring&lt;/h3&gt;
&lt;p&gt;There are many handy utilities in &lt;a href=&#34;https://spring.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring&lt;/a&gt; that take care of the boilerplate required to build microservices with Kubernetes and Cassandra. In this blog post, we use the following modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot&lt;/a&gt; to package our dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-data-cassandra&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Data Cassandra&lt;/a&gt; for access to the Cassandra database&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-data-rest&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Data REST&lt;/a&gt; for the API on top of the Spring Data Cassandra microservice&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot Actuator&lt;/a&gt; for health checks, liveness and readiness probes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Web&lt;/a&gt; to build our REST interface for the Spring Boot microservice&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Cloud Kubernetes&lt;/a&gt; to pass application configuration via ConfigMaps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In May 2020, the Spring engineering teams released &lt;a href=&#34;https://spring.io/blog/2020/05/15/spring-boot-2-3-0-available-now&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Boot 2.3.0&lt;/a&gt; and &lt;a href=&#34;https://spring.io/blog/2020/05/18/what-s-new-in-spring-data-klara-dan-von-neumann&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Spring Data Neumann&lt;/a&gt;, which brought an upgrade to the latest version 4.x of the &lt;a href=&#34;https://docs.datastax.com/en/developer/java-driver/latest/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cassandra Java driver&lt;/a&gt;. This driver upgrade provides full support for the newest major version of Cassandra 4.0, which we&amp;rsquo;ll showcase throughout the blog. The Spring and Cassandra communities continue to work together to provide tighter integrations.&lt;/p&gt;
&lt;h3 id=&#34;cassandra&#34;&gt;Cassandra&lt;/h3&gt;
&lt;p&gt;The Cassandra community is &lt;a href=&#34;https://www.zdnet.com/article/faster-than-ever-apache-cassandra-4-0-beta-is-on-its-way/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;nearing the release of version 4.0&lt;/a&gt;, which features extensive stability improvements, faster scaling for elastic architectures, enterprise security features such as audit logging, Java 11 support and more. Momentum is also brewing in the Cassandra community around a &lt;a href=&#34;https://cwiki.apache.org/confluence/display/CASSANDRA/Cassandra&amp;#43;Kubernetes&amp;#43;Operator&amp;#43;SIG&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;project-backed Kubernetes operator&lt;/a&gt;. There are many in the ecosystem today, and in this blog we use DataStax&amp;rsquo;s open-source Kubernetes Operator called &lt;a href=&#34;https://github.com/datastax/cass-operator&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;cass-operator&lt;/a&gt; with a Cassandra 4.0 pre-release build.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes&lt;/a&gt; wave is changing the paradigm for how applications are built, deployed and scaled. In this blog post, we&amp;rsquo;ll get into the details of tricky parts of Kubernetes-based applications and how to use Spring libraries to quickly develop microservice applications on Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;lets-see-it-in-action&#34;&gt;Let&amp;rsquo;s See It in Action&lt;/h2&gt;
&lt;p&gt;In the next sections, we&amp;rsquo;ll walk through an inventory application of Products and Orders that ties all of these technologies together. If you want to skip the details and go straight to hands on, head over to the GitHub repository at &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;DataStax-Examples/spring-k8s-cassandra-microservices&lt;/code&gt;&lt;/a&gt; to hit the ground running.&lt;/p&gt;
&lt;p&gt;At a glance, the architecture of the application looks as follows. Each portion of the stack is deployed in Kubernetes in its own namespace to have clear separation of duties and isolation between services, simulating different teams working on separate parts of a single application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogs/spring-k8s-cassandra/stack.png&#34; alt=&#34;Application stack showing two microservices behind Spring Cloud Gateway, both of which connect to Cassandra&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Minikube&lt;/a&gt; as we walk through deploying this stack locally. All of these commands can be translated to &lt;a href=&#34;https://kind.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kind&lt;/a&gt; alternatives, and there are step-by-step details for setting up Cassandra with Kind over on the &lt;a href=&#34;https://github.com/DataStax-Academy/kubernetes-workshop-online&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;DataStax Academy GitHub&lt;/a&gt;. You will need to install &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;kubectl&lt;/a&gt;, &lt;a href=&#34;https://maven.apache.org/install.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Maven&lt;/a&gt; and &lt;a href=&#34;https://adoptopenjdk.net/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Java 11+&lt;/a&gt; as prerequisites for this demo. And with that, let&amp;rsquo;s get this thing going.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# start minikube and the dashboard&lt;/span&gt;
minikube start --driver&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker --extra-config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;apiserver.authorization-mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;RBAC,Node
minikube dashboard

&lt;span class=&#34;c1&#34;&gt;# tell minikube to use the local docker environment&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;minikube docker-env&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# clone the example repository&lt;/span&gt;
git clone https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;start-cassandra&#34;&gt;Start Cassandra&lt;/h3&gt;
&lt;p&gt;Working from the bottom up, let’s first get the database deployed and ready to serve data to our APIs. When deploying microservices, it is common to have a database per service to have isolation all the way down to the data tier. Since we&amp;rsquo;re running locally, for demonstration purposes we&amp;rsquo;ll keep it light and start a single Cassandra 4.0 node for both of our services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create namespace&lt;/span&gt;
kubectl create ns cass-operator

&lt;span class=&#34;c1&#34;&gt;# create the storage class for the database&lt;/span&gt;
kubectl -n cass-operator apply -f deploy/storage-class.yml

&lt;span class=&#34;c1&#34;&gt;# apply the operator manifest, wait until complete&lt;/span&gt;
kubectl -n cass-operator apply -f https://raw.githubusercontent.com/DataStax-Academy/kubernetes-workshop-online/master/1-cassandra/11-install-cass-operator-v1.1.yaml

&lt;span class=&#34;c1&#34;&gt;# start a single C* 4.0 node&lt;/span&gt;
kubectl -n cass-operator apply -f deploy/cassandra-4.0.0-1node.yml 

&lt;span class=&#34;c1&#34;&gt;# check that everything started successfully&lt;/span&gt;
kubectl -n cass-operator get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Five simple commands and we have Cassandra running in Kubernetes—pretty cool. One thing that you&amp;rsquo;ll quickly notice is that this database has security enabled by default. We can browse the &lt;a href=&#34;https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Kubernetes Secret&lt;/a&gt; and you should see something that resembles an encoded username and password in the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n cass-operator get secret cluster1-superuser -o yaml

apiVersion: v1
data:
  password: OE92MzB2MWlDRF90ZWtVYzAyRFNpN3RtZkJ0LVpUVjlicDNxaFRDc3h1RzhYN3BKNW10ZjZ3
  username: Y2x1c3RlcjEtc3VwZXJ1c2Vy
kind: Secret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To decode these we use the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Y2x1c3RlcjEtc3VwZXJ1c2Vy &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 -D &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
cluster1-superuser

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; OE92MzB2MWlDRF90ZWtVYzAyRFNpN3RtZkJ0LVpUVjlicDNxaFRDc3h1RzhYN3BKNW10ZjZ3 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 -D &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
8Ov30v1iCD_tekUc02DSi7tmfBt-ZTV9bp3qhTCsxuG8X7pJ5mtf6w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go ahead and save the decoded values off for later because we&amp;rsquo;ll need them to allow our services to access the database.&lt;/p&gt;
&lt;h3 id=&#34;spring-boot-microservice&#34;&gt;Spring Boot Microservice&lt;/h3&gt;
&lt;p&gt;Next let&amp;rsquo;s have a look at the Spring Boot service that is responsible for the Products portion of our microservices application. This module uses the Cassandra Java driver directly, and we are handling configuration, query execution and API endpoint definition explicitly in our service compared to the boilerplate abstraction that we will show in the next section with Spring Data Cassandra and Spring Data REST.&lt;/p&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;One convenient feature of Spring Cloud Kubernetes is that it allows for the loading of sensitive information like this through Kubernetes Secrets. We&amp;rsquo;ll create a namespace for our service and then add the secrets using the database credentials that we decoded above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create ns spring-boot-service
kubectl -n spring-boot-service create secret generic db-secret --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster1-superuser --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8Ov30v1iCD_tekUc02DSi7tmfBt-ZTV9bp3qhTCsxuG8X7pJ5mtf6w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We define our configuration in the application using the &lt;code&gt;@Configuration&lt;/code&gt; annotation, and this class specifies the database credentials and connection details. For example, we define our database username and password with environment variables and the &lt;code&gt;@Value&lt;/code&gt; annotation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${DB_USERNAME:cassandra}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${DB_PASSWORD:cassandra}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last piece to pass the database credentials to the application running in Kubernetes is defined in the &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/deploy/spring-boot/spring-boot-deployment.yml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Deployment YAML&lt;/a&gt; for our service. This exposes the Secret username and password as &lt;code&gt;DB_USERNAME&lt;/code&gt; and &lt;code&gt;DB_PASSWORD&lt;/code&gt; environment variables, which our application will consume.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can further customize the connection to the database with &lt;code&gt;@Beans&lt;/code&gt; that hook into Spring Boot&amp;rsquo;s auto-configuration. You&amp;rsquo;ll see that we have different switches for whether we are connecting to &lt;a href=&#34;https://astra.datastax.com/register&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;DataStax Astra&lt;/a&gt;, a Cassandra as-a-Service database or whether we are connecting to a self-managed Cassandra deployment. Any Cassandra Java driver &lt;a href=&#34;https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;configuration option&lt;/a&gt; can be customized through these hooks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CqlSessionBuilderCustomizer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sessionBuilderCustomizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withCloudSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Paths&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withAuthCredentials&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addContactPoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InetSocketAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contactPoints&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withLocalDatacenter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;localDataCenter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withAuthCredentials&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DriverConfigLoaderBuilderCustomizer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;driverConfigLoaderBuilderCustomizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;without&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DefaultDriverOption&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;CONTACT_POINTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;builder&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DefaultDriverOption&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SESSION_KEYSPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keyspace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With Spring Cloud Kubernetes, we can also load configuration directly from Kubernetes ConfigMaps. In this application, we show how to load the database connection information using this technique. Our simple ConfigMap for the Spring Boot service is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spring-boot-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;application.yml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;   cassandra.contact-points: cluster1-dc1-service.cass-operator
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;   cassandra.keyspace: betterbotz
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;   cassandra.local-datacenter: dc1
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;   cassandra.port: 9042&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;p&gt;Thanks to Spring Boot, defining an HTTP interface for our application is a breeze with the &lt;code&gt;@Controller&lt;/code&gt; stereotype and the standard request helpers in Spring Web. With these utilities we expose the following APIs for our Spring Boot-based Products service.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/products/add&lt;/code&gt;: Add a new product&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/search/{name}&lt;/code&gt;: Search products by name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/search/{name}/{id}&lt;/code&gt;: Search products by name and id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/delete/{name}&lt;/code&gt;: Delete products by name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/delete/{name}/{id}&lt;/code&gt;: Delete product by name and id&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-service&#34;&gt;Data Service&lt;/h4&gt;
&lt;p&gt;The persistence layer of our application is handled by three classes. Note: the &lt;a href=&#34;https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cassandra Java Object Mapper&lt;/a&gt; is another option that could have been used for the Entity and DAO definition.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJO (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-boot/src/main/java/com/datastax/examples/product/Product.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Product.java&lt;/a&gt;): Standard object definition with getters and setters&lt;/li&gt;
&lt;li&gt;DAO (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-boot/src/main/java/com/datastax/examples/product/ProductDao.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ProductDao.java&lt;/a&gt;): Contains the CQL queries and database access logic&lt;/li&gt;
&lt;li&gt;Service (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-boot/src/main/java/com/datastax/examples/product/ProductService.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ProductService.java&lt;/a&gt;): Interfaces between the DAO and the Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deployment&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;We package our application in a jar file and then build a local docker image to prepare for deployment to Kubernetes. If you prefer to avoid hitting a remote registry, &lt;code&gt;run eval `minikube docker-env`&lt;/code&gt; so that Kubernetes can find the image. Once the service is deployed, Kubernetes ensures that it starts and remains healthy by using the liveness and readiness that come out-of-the-box with Spring Actuator. That&amp;rsquo;s right, just include Actuator on your classpath and sit back! See this &lt;a href=&#34;https://spring.io/blog/2020/03/25/liveness-and-readiness-probes-with-spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;blog post&lt;/a&gt; for details on customization of the liveness and readiness probes. We use a minimal configuration in our &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/deploy/spring-boot/spring-boot-deployment.yml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Deployment YAML&lt;/a&gt; as seen below, though we could have leveraged the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Cassandra-specific health check&lt;/a&gt; as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;livenessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/actuator/health&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actuator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readinessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/actuator/health&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actuator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will go ahead and start our Spring Boot service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# from the spring-k8s-cassandra-microservices root directory, build each module&lt;/span&gt;
mvn package

&lt;span class=&#34;c1&#34;&gt;# from the spring-k8s-cassandra-microservices/microservice-spring-boot directory&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# build docker image&lt;/span&gt;
docker build -t csplinter/spring-boot-service:1.0.0-SNAPSHOT .

&lt;span class=&#34;c1&#34;&gt;# deploy the service &lt;/span&gt;
kubectl apply -n spring-boot-service -f ../deploy/spring-boot

&lt;span class=&#34;c1&#34;&gt;# check that the pod is running&lt;/span&gt;
kubectl -n spring-boot-service get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test out the endpoints exposed by the service, we can expose the target port of the service and then hit the endpoints. Note that these same endpoints are exposed through the &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/tree/master/gateway-service&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Gateway Service&lt;/a&gt;, which would typically handle all traffic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n spring-boot-service get pods
kubectl -n spring-boot-service port-forward &amp;lt;pod-name&amp;gt; 8083:8083
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Add products&lt;/span&gt;
curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;mobile&amp;#34;, &amp;#34;id&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440000&amp;#34;, &amp;#34;description&amp;#34;:&amp;#34;iPhone&amp;#34;, &amp;#34;price&amp;#34;:&amp;#34;500.00&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:8083/api/products/add

curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;mobile&amp;#34;, &amp;#34;id&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440001&amp;#34;, &amp;#34;description&amp;#34;:&amp;#34;Android&amp;#34;, &amp;#34;price&amp;#34;:&amp;#34;600.00&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:8083/api/products/add

&lt;span class=&#34;c1&#34;&gt;# Get products with name = mobile&lt;/span&gt;
curl http://localhost:8083/api/products/search/mobile

&lt;span class=&#34;c1&#34;&gt;# Get products with name = mobile and id = 123e4567-e89b-12d3-a456-556642440001&lt;/span&gt;
curl http://localhost:8083/api/products/search/mobile/123e4567-e89b-12d3-a456-556642440001

&lt;span class=&#34;c1&#34;&gt;# Delete product with name = mobile and id = 123e4567-e89b-12d3-a456-556642440001&lt;/span&gt;
curl -X DELETE http://localhost:8083/api/products/delete/mobile/123e4567-e89b-12d3-a456-556642440001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just like that we have a Spring Boot service running in Kubernetes with our Cassandra 4.0 deployment to write, read and delete Products from the database. We see that the benefits of Spring Boot, Spring Cloud and Spring Web make it easy to quickly build cloud native applications with Kubernetes and Cassandra. The complete source code for this service can be found in the &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/tree/master/microservice-spring-boot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;microservice-spring-boot&lt;/code&gt;&lt;/a&gt; module in GitHub.&lt;/p&gt;
&lt;h3 id=&#34;spring-data-microservice&#34;&gt;Spring Data Microservice&lt;/h3&gt;
&lt;p&gt;Now that we covered our Spring Boot Products service, let&amp;rsquo;s compare that to Spring Data Cassandra and Spring Data REST with our Orders service in the &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/tree/master/microservice-spring-data&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;microservice-spring-data&lt;/code&gt;&lt;/a&gt; module. One of the key differences is the boilerplate that is provided by the Spring Data libraries that abstracts our development experience from the lower-level controls. This gives a lot of value for getting things done quickly, as we no longer have to spend the time writing what is otherwise already taken care of for us.&lt;/p&gt;
&lt;h4 id=&#34;configuration-1&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;Spring Data Cassandra takes care of the majority of default configuration for the connection to Cassandra. In this demo, we are extending &lt;a href=&#34;https://docs.spring.io/spring-data/cassandra/docs/current/api/org/springframework/data/cassandra/config/AbstractCassandraConfiguration.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;code&gt;AbstractCassandraConfiguration&lt;/code&gt;&lt;/a&gt; so the driver customization looks slightly different than the Spring Boot example. We are using the &lt;code&gt;@Configuration&lt;/code&gt; annotation as well as the &lt;code&gt;@EnableConfigurationProperties(CassandraProperties.class)&lt;/code&gt; so that we do not lose the auto-configuration capabilities that Spring Boot provides for this module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SessionBuilderConfigurer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getSessionBuilderConfigurer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SessionBuilderConfigurer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
       &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CqlSessionBuilder&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CqlSessionBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cqlSessionBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
               &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cqlSessionBuilder&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withCloudSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Paths&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withAuthCredentials&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
               &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cqlSessionBuilder&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addContactPoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InetSocketAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
                               &lt;span class=&#34;n&#34;&gt;cassandraProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getContactPoints&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
                               &lt;span class=&#34;n&#34;&gt;cassandraProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()))&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withAuthCredentials&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We extend &lt;code&gt;AbstractCassandraConfiguration&lt;/code&gt; to leverage the automatic schema generation methods built into Spring Data Cassandra, though this is not a requirement for many applications. Here we specify the keyspace that we want to create upon initialization of the connection as well as the table definition that we read from a file in the resources directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateKeyspaceSpecification&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getKeyspaceCreations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astraSecureConnectBundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateKeyspaceSpecification&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createKeyspace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getKeyspaceName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ifNotExists&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withNetworkReplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataCenterReplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getLocalDataCenter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyspaceOption&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DURABLE_WRITES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyspacePopulator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;keyspacePopulator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;ResourceKeyspacePopulator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyspacePopulate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResourceKeyspacePopulator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;keyspacePopulate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSeparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;keyspacePopulate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setScripts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassPathResource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;orders-schema.cql&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyspacePopulate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll see in the code that we do the same thing here as in our Spring Boot service, where we are loading the database username and password from environment variables that are stored in Kubernetes Secrets. Since Secrets are bound to a namespace, we have to make sure that we also create these secrets in our spring-data-service namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create ns spring-data-service

kubectl -n spring-data-service create secret generic db-secret --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster1-superuser --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8Ov30v1iCD_tekUc02DSi7tmfBt-ZTV9bp3qhTCsxuG8X7pJ5mtf6w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;controller-1&#34;&gt;Controller&lt;/h4&gt;
&lt;p&gt;We use a controller in our service to customize the API endpoints for our Spring Data Orders service so that they match the pattern of the Spring Boot service. If we did not provide a controller, Spring Data REST would have generated the endpoints for us through simply annotating our &lt;code&gt;OrderRepository&lt;/code&gt; with &lt;code&gt;@RepositoryRestResource&lt;/code&gt;. In our case, we use &lt;code&gt;@RestResource(exported = false)&lt;/code&gt; in the repository to tell Spring Data REST that we wanted to handle these endpoints ourselves, which correspond to the methods in the controller. The following APIs are exposed for our Order service.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/orders/add&lt;/code&gt;: Add a new order&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/orders/search/order-by-id?{orderId}&lt;/code&gt;: Search orders by id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/search/order-by-product-id?{orderId}&amp;amp;{productId}&lt;/code&gt;: Search orders by &lt;code&gt;orderid&lt;/code&gt; and &lt;code&gt;productid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/orders/search/name-and-price-only?{orderId}&lt;/code&gt;: Search orders by id and only return product name and price&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/delete/order?{orderId}&lt;/code&gt;: Delete orders by id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/products/delete/product-from-order?{orderId}&amp;amp;{productId}&lt;/code&gt;: Delete product from order&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-service-1&#34;&gt;Data Service&lt;/h4&gt;
&lt;p&gt;The persistence layer of our Spring Data application is handled by our models/entities and the repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJOs (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-data/src/main/java/com/datastax/examples/order/Order.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Order.java&lt;/a&gt;, &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-data/src/main/java/com/datastax/examples/order/OrderPrimaryKey.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OrderPrimaryKey.java&lt;/a&gt;): Standard object definition with getters and setters. These are interpreted by Spring Data Cassandra as database types with the &lt;code&gt;@Table&lt;/code&gt; annotation for Order and the &lt;code&gt;@PrimaryKeyClass&lt;/code&gt; for &lt;code&gt;OrderPrimaryKey&lt;/code&gt;. The latter is required when using clustering keys in Cassandra.&lt;/li&gt;
&lt;li&gt;Projection (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-data/src/main/java/com/datastax/examples/order/ProductNameAndPriceOnly.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ProductNameAndPriceOnly.java&lt;/a&gt;): This class is used by Spring Data to limit the results that are returned from the database. We use this in conjunction with a custom &lt;code&gt;@Query&lt;/code&gt; in our &lt;code&gt;OrderRepository&lt;/code&gt; to demonstrate how to return results with a subset of columns from the database.&lt;/li&gt;
&lt;li&gt;Repository (&lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/blob/master/microservice-spring-data/src/main/java/com/datastax/examples/order/OrderRepository.java&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;OrderRepository.java&lt;/a&gt;): Extends Spring Data&amp;rsquo;s &lt;code&gt;CassandraRepository&lt;/code&gt; and defines the methods that are translated automatically under the hood to database queries. Note that the naming of these methods is specific to the Spring Data spec. For example, &lt;code&gt;findByKeyOrderIdAndKeyProductId&lt;/code&gt; is required to tell Spring Data that we wish to query by the &lt;code&gt;OrderId&lt;/code&gt; and &lt;code&gt;ProductId&lt;/code&gt; portions of our Primary Key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deployment-1&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;Similar to our Spring Boot service, we get the same liveness and readiness probes with our Spring Data service. These are configured in the exact same manner and are enabled simply by having Actuator on the classpath. To build and deploy our service to Kubernetes, we execute the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# (optional if performed above) tell minikube to use the local docker environment&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;minikube docker-env&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# (optional if performed above) from the spring-k8s-cassandra-microservices root directory, build each module&lt;/span&gt;
mvn package

&lt;span class=&#34;c1&#34;&gt;# from the spring-k8s-cassandra-microservices/microservice-spring-data directory&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# build docker image&lt;/span&gt;
docker build -t csplinter/spring-data-service:1.0.0-SNAPSHOT .

&lt;span class=&#34;c1&#34;&gt;# deploy the service &lt;/span&gt;
kubectl apply -n spring-data-service -f ../deploy/spring-data

&lt;span class=&#34;c1&#34;&gt;# check that the pod is running&lt;/span&gt;
kubectl -n spring-data-service get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test out the endpoints exposed by the service, we can expose the Service port and then hit the endpoints.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n spring-data-service get pods

kubectl -n spring-data-service port-forward &amp;lt;pod-name&amp;gt; 8081:8081
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Add orders&lt;/span&gt;
curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;: {&amp;#34;orderId&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440000&amp;#34;, &amp;#34;productId&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440000&amp;#34;}, &amp;#34;productName&amp;#34;:&amp;#34;iPhone&amp;#34;, &amp;#34;productPrice&amp;#34;:&amp;#34;500.00&amp;#34;, &amp;#34;productQuantity&amp;#34;:1, &amp;#34;addedToOrderTimestamp&amp;#34;: &amp;#34;2020-04-12T11:21:59.001+0000&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:8081/api/orders/add

curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt;  -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;: {&amp;#34;orderId&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440000&amp;#34;, &amp;#34;productId&amp;#34;:&amp;#34;123e4567-e89b-12d3-a456-556642440001&amp;#34;}, &amp;#34;productName&amp;#34;:&amp;#34;Android&amp;#34;, &amp;#34;productPrice&amp;#34;:&amp;#34;600.00&amp;#34;, &amp;#34;productQuantity&amp;#34;:1, &amp;#34;addedToOrderTimestamp&amp;#34;: &amp;#34;2020-04-12T11:22:59.001+0000&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:8081/api/orders/add

&lt;span class=&#34;c1&#34;&gt;# Get orders with order_id = 123e4567-e89b-12d3-a456-556642440000&lt;/span&gt;
curl http://localhost:8081/api/orders/search/order-by-id?orderId&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;123e4567-e89b-12d3-a456-556642440000

&lt;span class=&#34;c1&#34;&gt;# Get order with order_id = 123e4567-e89b-12d3-a456-556642440000 and product_id = 123e4567-e89b-12d3-a456-556642440000&lt;/span&gt;
curl &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8081/api/orders/search/order-by-product-id?orderId=123e4567-e89b-12d3-a456-556642440000&amp;amp;productId=123e4567-e89b-12d3-a456-556642440000&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Shows how to use a projection with Spring Data REST&lt;/span&gt;
curl http://localhost:8081/api/orders/search/name-and-price-only?orderId&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;123e4567-e89b-12d3-a456-556642440000
curl &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8081/api/orders/search/name-and-price-only?orderId=123e4567-e89b-12d3-a456-556642440000&amp;amp;projection=product-name-and-price&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Delete order with order_id = 123e4567-e89b-12d3-a456-556642440000 and product_id = 123e4567-e89b-12d3-a456-556642440000&lt;/span&gt;
curl -X DELETE &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8081/api/orders/delete/product-from-order?orderId=123e4567-e89b-12d3-a456-556642440000&amp;amp;productId=123e4567-e89b-12d3-a456-556642440000&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Delete order with order_id = 123e4567-e89b-12d3-a456-556642440000&lt;/span&gt;
curl -X DELETE &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8081/api/orders/delete/order?orderId=123e4567-e89b-12d3-a456-556642440000&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gateway-service&#34;&gt;Gateway Service&lt;/h3&gt;
&lt;p&gt;There are many options for federating external access to a Kubernetes cluster. A common solution when building Spring applications is to use the Spring Cloud Gateway project as the broker to handle the routing of traffic to back-end services. This also comes with automatic discovery of other services in the cluster using Kubernetes resources, and a simple implementation that routes traffic to our two microservices is found in the &lt;a href=&#34;https://github.com/DataStax-Examples/spring-k8s-cassandra-microservices/tree/master/gateway-service&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;gateway-service&lt;/a&gt; module of the demo app.&lt;/p&gt;
&lt;p&gt;We can start this Gateway Service to act as the router to our Spring Boot and Spring Data downstream services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create ns gateway-service

&lt;span class=&#34;c1&#34;&gt;# from the spring-k8s-cassandra-microservices/gateway-service directory&lt;/span&gt;
docker build -t csplinter/gateway-service:1.0.0-SNAPSHOT .
kubectl apply -n gateway-service -f ../deploy/gateway

kubectl -n gateway-service get pods
kubectl -n gateway-service port-forward &amp;lt;pod-name&amp;gt; 8080:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We test this by executing the same curl commands above, but now with the port 8080. You should see the exact same result as before demonstrating that the gateway is working properly!&lt;/p&gt;
&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h3&gt;
&lt;p&gt;We hope that this blog post provides relevant hands-on material that you can take and apply to your own development experience. As the challenges facing developers are rising, powerful tools must keep pace in order to exceed the expectations of users, and Spring, Kubernetes and Cassandra are among those to level up your stack. We encourage you to join us on this collective journey, and we look forward to seeing you in the Spring, Kubernetes or Cassandra communities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/community&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Join the Spring community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cassandra.apache.org/community/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Join the Cassandra mailing list and Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.datastax.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Ask questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://astra.datastax.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Run Cassandra in the cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog was written by Chris Splinter who works for DataStax, focusing on open source solutions in the Apache Cassandra ecosystem. As a former automation engineer, Chris is focused on developers and making it easier to build applications through APIs, frameworks, and tools. You can find him on &lt;a href=&#34;https://www.linkedin.com/in/csplinter/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      
      <title>Videos: Getting Started with kpack</title>
      
      <link>/videos/kpack-gs/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/videos/kpack-gs/</guid>
      <description>

        
        
      </description>
    </item>
    
  </channel>
</rss>
